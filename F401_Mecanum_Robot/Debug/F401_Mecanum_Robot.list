
F401_Mecanum_Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b6c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08005d04  08005d04  00015d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d34  08005d34  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08005d34  08005d34  00015d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d3c  08005d3c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d3c  08005d3c  00015d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d40  08005d40  00015d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08005d44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000894  2000001c  08005d60  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008b0  08005d60  000208b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e57b  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002318  00000000  00000000  0002e5c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d10  00000000  00000000  000308e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf8  00000000  00000000  000315f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a45  00000000  00000000  000321e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f221  00000000  00000000  00048c2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008caf0  00000000  00000000  00057e4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e493e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036ac  00000000  00000000  000e4994  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000001c 	.word	0x2000001c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005cec 	.word	0x08005cec

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000020 	.word	0x20000020
 80001d4:	08005cec 	.word	0x08005cec

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_uldivmod>:
 8000a14:	b953      	cbnz	r3, 8000a2c <__aeabi_uldivmod+0x18>
 8000a16:	b94a      	cbnz	r2, 8000a2c <__aeabi_uldivmod+0x18>
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	bf08      	it	eq
 8000a1c:	2800      	cmpeq	r0, #0
 8000a1e:	bf1c      	itt	ne
 8000a20:	f04f 31ff 	movne.w	r1, #4294967295
 8000a24:	f04f 30ff 	movne.w	r0, #4294967295
 8000a28:	f000 b96e 	b.w	8000d08 <__aeabi_idiv0>
 8000a2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a34:	f000 f806 	bl	8000a44 <__udivmoddi4>
 8000a38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a40:	b004      	add	sp, #16
 8000a42:	4770      	bx	lr

08000a44 <__udivmoddi4>:
 8000a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a48:	9d08      	ldr	r5, [sp, #32]
 8000a4a:	4604      	mov	r4, r0
 8000a4c:	468c      	mov	ip, r1
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	f040 8083 	bne.w	8000b5a <__udivmoddi4+0x116>
 8000a54:	428a      	cmp	r2, r1
 8000a56:	4617      	mov	r7, r2
 8000a58:	d947      	bls.n	8000aea <__udivmoddi4+0xa6>
 8000a5a:	fab2 f282 	clz	r2, r2
 8000a5e:	b142      	cbz	r2, 8000a72 <__udivmoddi4+0x2e>
 8000a60:	f1c2 0020 	rsb	r0, r2, #32
 8000a64:	fa24 f000 	lsr.w	r0, r4, r0
 8000a68:	4091      	lsls	r1, r2
 8000a6a:	4097      	lsls	r7, r2
 8000a6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000a70:	4094      	lsls	r4, r2
 8000a72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a76:	0c23      	lsrs	r3, r4, #16
 8000a78:	fbbc f6f8 	udiv	r6, ip, r8
 8000a7c:	fa1f fe87 	uxth.w	lr, r7
 8000a80:	fb08 c116 	mls	r1, r8, r6, ip
 8000a84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a88:	fb06 f10e 	mul.w	r1, r6, lr
 8000a8c:	4299      	cmp	r1, r3
 8000a8e:	d909      	bls.n	8000aa4 <__udivmoddi4+0x60>
 8000a90:	18fb      	adds	r3, r7, r3
 8000a92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a96:	f080 8119 	bcs.w	8000ccc <__udivmoddi4+0x288>
 8000a9a:	4299      	cmp	r1, r3
 8000a9c:	f240 8116 	bls.w	8000ccc <__udivmoddi4+0x288>
 8000aa0:	3e02      	subs	r6, #2
 8000aa2:	443b      	add	r3, r7
 8000aa4:	1a5b      	subs	r3, r3, r1
 8000aa6:	b2a4      	uxth	r4, r4
 8000aa8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000aac:	fb08 3310 	mls	r3, r8, r0, r3
 8000ab0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ab4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ab8:	45a6      	cmp	lr, r4
 8000aba:	d909      	bls.n	8000ad0 <__udivmoddi4+0x8c>
 8000abc:	193c      	adds	r4, r7, r4
 8000abe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ac2:	f080 8105 	bcs.w	8000cd0 <__udivmoddi4+0x28c>
 8000ac6:	45a6      	cmp	lr, r4
 8000ac8:	f240 8102 	bls.w	8000cd0 <__udivmoddi4+0x28c>
 8000acc:	3802      	subs	r0, #2
 8000ace:	443c      	add	r4, r7
 8000ad0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ad4:	eba4 040e 	sub.w	r4, r4, lr
 8000ad8:	2600      	movs	r6, #0
 8000ada:	b11d      	cbz	r5, 8000ae4 <__udivmoddi4+0xa0>
 8000adc:	40d4      	lsrs	r4, r2
 8000ade:	2300      	movs	r3, #0
 8000ae0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ae4:	4631      	mov	r1, r6
 8000ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aea:	b902      	cbnz	r2, 8000aee <__udivmoddi4+0xaa>
 8000aec:	deff      	udf	#255	; 0xff
 8000aee:	fab2 f282 	clz	r2, r2
 8000af2:	2a00      	cmp	r2, #0
 8000af4:	d150      	bne.n	8000b98 <__udivmoddi4+0x154>
 8000af6:	1bcb      	subs	r3, r1, r7
 8000af8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000afc:	fa1f f887 	uxth.w	r8, r7
 8000b00:	2601      	movs	r6, #1
 8000b02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b06:	0c21      	lsrs	r1, r4, #16
 8000b08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b10:	fb08 f30c 	mul.w	r3, r8, ip
 8000b14:	428b      	cmp	r3, r1
 8000b16:	d907      	bls.n	8000b28 <__udivmoddi4+0xe4>
 8000b18:	1879      	adds	r1, r7, r1
 8000b1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b1e:	d202      	bcs.n	8000b26 <__udivmoddi4+0xe2>
 8000b20:	428b      	cmp	r3, r1
 8000b22:	f200 80e9 	bhi.w	8000cf8 <__udivmoddi4+0x2b4>
 8000b26:	4684      	mov	ip, r0
 8000b28:	1ac9      	subs	r1, r1, r3
 8000b2a:	b2a3      	uxth	r3, r4
 8000b2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b38:	fb08 f800 	mul.w	r8, r8, r0
 8000b3c:	45a0      	cmp	r8, r4
 8000b3e:	d907      	bls.n	8000b50 <__udivmoddi4+0x10c>
 8000b40:	193c      	adds	r4, r7, r4
 8000b42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b46:	d202      	bcs.n	8000b4e <__udivmoddi4+0x10a>
 8000b48:	45a0      	cmp	r8, r4
 8000b4a:	f200 80d9 	bhi.w	8000d00 <__udivmoddi4+0x2bc>
 8000b4e:	4618      	mov	r0, r3
 8000b50:	eba4 0408 	sub.w	r4, r4, r8
 8000b54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b58:	e7bf      	b.n	8000ada <__udivmoddi4+0x96>
 8000b5a:	428b      	cmp	r3, r1
 8000b5c:	d909      	bls.n	8000b72 <__udivmoddi4+0x12e>
 8000b5e:	2d00      	cmp	r5, #0
 8000b60:	f000 80b1 	beq.w	8000cc6 <__udivmoddi4+0x282>
 8000b64:	2600      	movs	r6, #0
 8000b66:	e9c5 0100 	strd	r0, r1, [r5]
 8000b6a:	4630      	mov	r0, r6
 8000b6c:	4631      	mov	r1, r6
 8000b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b72:	fab3 f683 	clz	r6, r3
 8000b76:	2e00      	cmp	r6, #0
 8000b78:	d14a      	bne.n	8000c10 <__udivmoddi4+0x1cc>
 8000b7a:	428b      	cmp	r3, r1
 8000b7c:	d302      	bcc.n	8000b84 <__udivmoddi4+0x140>
 8000b7e:	4282      	cmp	r2, r0
 8000b80:	f200 80b8 	bhi.w	8000cf4 <__udivmoddi4+0x2b0>
 8000b84:	1a84      	subs	r4, r0, r2
 8000b86:	eb61 0103 	sbc.w	r1, r1, r3
 8000b8a:	2001      	movs	r0, #1
 8000b8c:	468c      	mov	ip, r1
 8000b8e:	2d00      	cmp	r5, #0
 8000b90:	d0a8      	beq.n	8000ae4 <__udivmoddi4+0xa0>
 8000b92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b96:	e7a5      	b.n	8000ae4 <__udivmoddi4+0xa0>
 8000b98:	f1c2 0320 	rsb	r3, r2, #32
 8000b9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ba0:	4097      	lsls	r7, r2
 8000ba2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ba6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000baa:	40d9      	lsrs	r1, r3
 8000bac:	4330      	orrs	r0, r6
 8000bae:	0c03      	lsrs	r3, r0, #16
 8000bb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000bb4:	fa1f f887 	uxth.w	r8, r7
 8000bb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000bbc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bc0:	fb06 f108 	mul.w	r1, r6, r8
 8000bc4:	4299      	cmp	r1, r3
 8000bc6:	fa04 f402 	lsl.w	r4, r4, r2
 8000bca:	d909      	bls.n	8000be0 <__udivmoddi4+0x19c>
 8000bcc:	18fb      	adds	r3, r7, r3
 8000bce:	f106 3cff 	add.w	ip, r6, #4294967295
 8000bd2:	f080 808d 	bcs.w	8000cf0 <__udivmoddi4+0x2ac>
 8000bd6:	4299      	cmp	r1, r3
 8000bd8:	f240 808a 	bls.w	8000cf0 <__udivmoddi4+0x2ac>
 8000bdc:	3e02      	subs	r6, #2
 8000bde:	443b      	add	r3, r7
 8000be0:	1a5b      	subs	r3, r3, r1
 8000be2:	b281      	uxth	r1, r0
 8000be4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000be8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bf0:	fb00 f308 	mul.w	r3, r0, r8
 8000bf4:	428b      	cmp	r3, r1
 8000bf6:	d907      	bls.n	8000c08 <__udivmoddi4+0x1c4>
 8000bf8:	1879      	adds	r1, r7, r1
 8000bfa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000bfe:	d273      	bcs.n	8000ce8 <__udivmoddi4+0x2a4>
 8000c00:	428b      	cmp	r3, r1
 8000c02:	d971      	bls.n	8000ce8 <__udivmoddi4+0x2a4>
 8000c04:	3802      	subs	r0, #2
 8000c06:	4439      	add	r1, r7
 8000c08:	1acb      	subs	r3, r1, r3
 8000c0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c0e:	e778      	b.n	8000b02 <__udivmoddi4+0xbe>
 8000c10:	f1c6 0c20 	rsb	ip, r6, #32
 8000c14:	fa03 f406 	lsl.w	r4, r3, r6
 8000c18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c1c:	431c      	orrs	r4, r3
 8000c1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c22:	fa01 f306 	lsl.w	r3, r1, r6
 8000c26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c2e:	431f      	orrs	r7, r3
 8000c30:	0c3b      	lsrs	r3, r7, #16
 8000c32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c36:	fa1f f884 	uxth.w	r8, r4
 8000c3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c42:	fb09 fa08 	mul.w	sl, r9, r8
 8000c46:	458a      	cmp	sl, r1
 8000c48:	fa02 f206 	lsl.w	r2, r2, r6
 8000c4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000c50:	d908      	bls.n	8000c64 <__udivmoddi4+0x220>
 8000c52:	1861      	adds	r1, r4, r1
 8000c54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c58:	d248      	bcs.n	8000cec <__udivmoddi4+0x2a8>
 8000c5a:	458a      	cmp	sl, r1
 8000c5c:	d946      	bls.n	8000cec <__udivmoddi4+0x2a8>
 8000c5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c62:	4421      	add	r1, r4
 8000c64:	eba1 010a 	sub.w	r1, r1, sl
 8000c68:	b2bf      	uxth	r7, r7
 8000c6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c76:	fb00 f808 	mul.w	r8, r0, r8
 8000c7a:	45b8      	cmp	r8, r7
 8000c7c:	d907      	bls.n	8000c8e <__udivmoddi4+0x24a>
 8000c7e:	19e7      	adds	r7, r4, r7
 8000c80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c84:	d22e      	bcs.n	8000ce4 <__udivmoddi4+0x2a0>
 8000c86:	45b8      	cmp	r8, r7
 8000c88:	d92c      	bls.n	8000ce4 <__udivmoddi4+0x2a0>
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	4427      	add	r7, r4
 8000c8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c92:	eba7 0708 	sub.w	r7, r7, r8
 8000c96:	fba0 8902 	umull	r8, r9, r0, r2
 8000c9a:	454f      	cmp	r7, r9
 8000c9c:	46c6      	mov	lr, r8
 8000c9e:	4649      	mov	r1, r9
 8000ca0:	d31a      	bcc.n	8000cd8 <__udivmoddi4+0x294>
 8000ca2:	d017      	beq.n	8000cd4 <__udivmoddi4+0x290>
 8000ca4:	b15d      	cbz	r5, 8000cbe <__udivmoddi4+0x27a>
 8000ca6:	ebb3 020e 	subs.w	r2, r3, lr
 8000caa:	eb67 0701 	sbc.w	r7, r7, r1
 8000cae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000cb2:	40f2      	lsrs	r2, r6
 8000cb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000cb8:	40f7      	lsrs	r7, r6
 8000cba:	e9c5 2700 	strd	r2, r7, [r5]
 8000cbe:	2600      	movs	r6, #0
 8000cc0:	4631      	mov	r1, r6
 8000cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc6:	462e      	mov	r6, r5
 8000cc8:	4628      	mov	r0, r5
 8000cca:	e70b      	b.n	8000ae4 <__udivmoddi4+0xa0>
 8000ccc:	4606      	mov	r6, r0
 8000cce:	e6e9      	b.n	8000aa4 <__udivmoddi4+0x60>
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	e6fd      	b.n	8000ad0 <__udivmoddi4+0x8c>
 8000cd4:	4543      	cmp	r3, r8
 8000cd6:	d2e5      	bcs.n	8000ca4 <__udivmoddi4+0x260>
 8000cd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000cdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000ce0:	3801      	subs	r0, #1
 8000ce2:	e7df      	b.n	8000ca4 <__udivmoddi4+0x260>
 8000ce4:	4608      	mov	r0, r1
 8000ce6:	e7d2      	b.n	8000c8e <__udivmoddi4+0x24a>
 8000ce8:	4660      	mov	r0, ip
 8000cea:	e78d      	b.n	8000c08 <__udivmoddi4+0x1c4>
 8000cec:	4681      	mov	r9, r0
 8000cee:	e7b9      	b.n	8000c64 <__udivmoddi4+0x220>
 8000cf0:	4666      	mov	r6, ip
 8000cf2:	e775      	b.n	8000be0 <__udivmoddi4+0x19c>
 8000cf4:	4630      	mov	r0, r6
 8000cf6:	e74a      	b.n	8000b8e <__udivmoddi4+0x14a>
 8000cf8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cfc:	4439      	add	r1, r7
 8000cfe:	e713      	b.n	8000b28 <__udivmoddi4+0xe4>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	e724      	b.n	8000b50 <__udivmoddi4+0x10c>
 8000d06:	bf00      	nop

08000d08 <__aeabi_idiv0>:
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop

08000d0c <nrf24_WriteReg>:
#define NRF24_CSN_LOW			HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET)
#define NRF24_CSN_HIGH			HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET)

/* Write the data to the register */
static void nrf24_WriteReg (uint8_t Reg, uint8_t data)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	460a      	mov	r2, r1
 8000d16:	71fb      	strb	r3, [r7, #7]
 8000d18:	4613      	mov	r3, r2
 8000d1a:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|(1<<5);
 8000d1c:	79fb      	ldrb	r3, [r7, #7]
 8000d1e:	f043 0320 	orr.w	r3, r3, #32
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	733b      	strb	r3, [r7, #12]
	buf[1] = data;
 8000d26:	79bb      	ldrb	r3, [r7, #6]
 8000d28:	737b      	strb	r3, [r7, #13]
	NRF24_CSN_LOW;
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2180      	movs	r1, #128	; 0x80
 8000d2e:	4809      	ldr	r0, [pc, #36]	; (8000d54 <nrf24_WriteReg+0x48>)
 8000d30:	f002 fc12 	bl	8003558 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 100);
 8000d34:	f107 010c 	add.w	r1, r7, #12
 8000d38:	2364      	movs	r3, #100	; 0x64
 8000d3a:	2202      	movs	r2, #2
 8000d3c:	4806      	ldr	r0, [pc, #24]	; (8000d58 <nrf24_WriteReg+0x4c>)
 8000d3e:	f003 f8c2 	bl	8003ec6 <HAL_SPI_Transmit>

	NRF24_CSN_HIGH;
 8000d42:	2201      	movs	r2, #1
 8000d44:	2180      	movs	r1, #128	; 0x80
 8000d46:	4803      	ldr	r0, [pc, #12]	; (8000d54 <nrf24_WriteReg+0x48>)
 8000d48:	f002 fc06 	bl	8003558 <HAL_GPIO_WritePin>
}
 8000d4c:	bf00      	nop
 8000d4e:	3710      	adds	r7, #16
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40020400 	.word	0x40020400
 8000d58:	2000071c 	.word	0x2000071c

08000d5c <nrf24_WriteReg_Multi>:

static void nrf24_WriteReg_Multi (uint8_t Reg, uint8_t *data, uint16_t size)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	6039      	str	r1, [r7, #0]
 8000d66:	71fb      	strb	r3, [r7, #7]
 8000d68:	4613      	mov	r3, r2
 8000d6a:	80bb      	strh	r3, [r7, #4]
	uint8_t buf[2];
	buf[0] = Reg|(1<<5);
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	f043 0320 	orr.w	r3, r3, #32
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	733b      	strb	r3, [r7, #12]
//	buf[1] = data;
	NRF24_CSN_LOW;
 8000d76:	2200      	movs	r2, #0
 8000d78:	2180      	movs	r1, #128	; 0x80
 8000d7a:	480c      	ldr	r0, [pc, #48]	; (8000dac <nrf24_WriteReg_Multi+0x50>)
 8000d7c:	f002 fbec 	bl	8003558 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 10);
 8000d80:	f107 010c 	add.w	r1, r7, #12
 8000d84:	230a      	movs	r3, #10
 8000d86:	2201      	movs	r2, #1
 8000d88:	4809      	ldr	r0, [pc, #36]	; (8000db0 <nrf24_WriteReg_Multi+0x54>)
 8000d8a:	f003 f89c 	bl	8003ec6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 100);
 8000d8e:	88ba      	ldrh	r2, [r7, #4]
 8000d90:	2364      	movs	r3, #100	; 0x64
 8000d92:	6839      	ldr	r1, [r7, #0]
 8000d94:	4806      	ldr	r0, [pc, #24]	; (8000db0 <nrf24_WriteReg_Multi+0x54>)
 8000d96:	f003 f896 	bl	8003ec6 <HAL_SPI_Transmit>

	NRF24_CSN_HIGH;
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	2180      	movs	r1, #128	; 0x80
 8000d9e:	4803      	ldr	r0, [pc, #12]	; (8000dac <nrf24_WriteReg_Multi+0x50>)
 8000da0:	f002 fbda 	bl	8003558 <HAL_GPIO_WritePin>
}
 8000da4:	bf00      	nop
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40020400 	.word	0x40020400
 8000db0:	2000071c 	.word	0x2000071c

08000db4 <nrf24_ReadReg>:


/* Read single byte from the register */
static uint8_t nrf24_ReadReg(uint8_t Reg)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	71fb      	strb	r3, [r7, #7]
	uint8_t data;

	NRF24_CSN_LOW;
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2180      	movs	r1, #128	; 0x80
 8000dc2:	480d      	ldr	r0, [pc, #52]	; (8000df8 <nrf24_ReadReg+0x44>)
 8000dc4:	f002 fbc8 	bl	8003558 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 10);
 8000dc8:	1df9      	adds	r1, r7, #7
 8000dca:	230a      	movs	r3, #10
 8000dcc:	2201      	movs	r2, #1
 8000dce:	480b      	ldr	r0, [pc, #44]	; (8000dfc <nrf24_ReadReg+0x48>)
 8000dd0:	f003 f879 	bl	8003ec6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 10);
 8000dd4:	f107 010f 	add.w	r1, r7, #15
 8000dd8:	230a      	movs	r3, #10
 8000dda:	2201      	movs	r2, #1
 8000ddc:	4807      	ldr	r0, [pc, #28]	; (8000dfc <nrf24_ReadReg+0x48>)
 8000dde:	f003 f9ae 	bl	800413e <HAL_SPI_Receive>

	NRF24_CSN_HIGH;
 8000de2:	2201      	movs	r2, #1
 8000de4:	2180      	movs	r1, #128	; 0x80
 8000de6:	4804      	ldr	r0, [pc, #16]	; (8000df8 <nrf24_ReadReg+0x44>)
 8000de8:	f002 fbb6 	bl	8003558 <HAL_GPIO_WritePin>

	return data;
 8000dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40020400 	.word	0x40020400
 8000dfc:	2000071c 	.word	0x2000071c

08000e00 <nrfsendCmd>:
	NRF24_CSN_HIGH;
}


static void nrfsendCmd (uint8_t cmd)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2180      	movs	r1, #128	; 0x80
 8000e0e:	4809      	ldr	r0, [pc, #36]	; (8000e34 <nrfsendCmd+0x34>)
 8000e10:	f002 fba2 	bl	8003558 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 10);
 8000e14:	1df9      	adds	r1, r7, #7
 8000e16:	230a      	movs	r3, #10
 8000e18:	2201      	movs	r2, #1
 8000e1a:	4807      	ldr	r0, [pc, #28]	; (8000e38 <nrfsendCmd+0x38>)
 8000e1c:	f003 f853 	bl	8003ec6 <HAL_SPI_Transmit>
	NRF24_CSN_HIGH;
 8000e20:	2201      	movs	r2, #1
 8000e22:	2180      	movs	r1, #128	; 0x80
 8000e24:	4803      	ldr	r0, [pc, #12]	; (8000e34 <nrfsendCmd+0x34>)
 8000e26:	f002 fb97 	bl	8003558 <HAL_GPIO_WritePin>
}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40020400 	.word	0x40020400
 8000e38:	2000071c 	.word	0x2000071c

08000e3c <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b088      	sub	sp, #32
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	2b07      	cmp	r3, #7
 8000e4a:	d104      	bne.n	8000e56 <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x0e);
 8000e4c:	210e      	movs	r1, #14
 8000e4e:	2007      	movs	r0, #7
 8000e50:	f7ff ff5c 	bl	8000d0c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 8000e54:	e090      	b.n	8000f78 <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	2b17      	cmp	r3, #23
 8000e5a:	d104      	bne.n	8000e66 <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 8000e5c:	2111      	movs	r1, #17
 8000e5e:	2017      	movs	r0, #23
 8000e60:	f7ff ff54 	bl	8000d0c <nrf24_WriteReg>
}
 8000e64:	e088      	b.n	8000f78 <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 8000e66:	2108      	movs	r1, #8
 8000e68:	2000      	movs	r0, #0
 8000e6a:	f7ff ff4f 	bl	8000d0c <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3f);
 8000e6e:	213f      	movs	r1, #63	; 0x3f
 8000e70:	2001      	movs	r0, #1
 8000e72:	f7ff ff4b 	bl	8000d0c <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 8000e76:	2103      	movs	r1, #3
 8000e78:	2002      	movs	r0, #2
 8000e7a:	f7ff ff47 	bl	8000d0c <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 8000e7e:	2103      	movs	r1, #3
 8000e80:	2003      	movs	r0, #3
 8000e82:	f7ff ff43 	bl	8000d0c <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 8000e86:	2103      	movs	r1, #3
 8000e88:	2004      	movs	r0, #4
 8000e8a:	f7ff ff3f 	bl	8000d0c <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 8000e8e:	2102      	movs	r1, #2
 8000e90:	2005      	movs	r0, #5
 8000e92:	f7ff ff3b 	bl	8000d0c <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0e);
 8000e96:	210e      	movs	r1, #14
 8000e98:	2006      	movs	r0, #6
 8000e9a:	f7ff ff37 	bl	8000d0c <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x0e);
 8000e9e:	210e      	movs	r1, #14
 8000ea0:	2007      	movs	r0, #7
 8000ea2:	f7ff ff33 	bl	8000d0c <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	2008      	movs	r0, #8
 8000eaa:	f7ff ff2f 	bl	8000d0c <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 8000eae:	2100      	movs	r1, #0
 8000eb0:	2009      	movs	r0, #9
 8000eb2:	f7ff ff2b 	bl	8000d0c <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xe7, 0xe7, 0xe7, 0xe7, 0xe7};
 8000eb6:	4a32      	ldr	r2, [pc, #200]	; (8000f80 <nrf24_reset+0x144>)
 8000eb8:	f107 0318 	add.w	r3, r7, #24
 8000ebc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ec0:	6018      	str	r0, [r3, #0]
 8000ec2:	3304      	adds	r3, #4
 8000ec4:	7019      	strb	r1, [r3, #0]
	nrf24_WriteReg_Multi(RX_ADDR_P0, rx_addr_p0_def, 5);
 8000ec6:	f107 0318 	add.w	r3, r7, #24
 8000eca:	2205      	movs	r2, #5
 8000ecc:	4619      	mov	r1, r3
 8000ece:	200a      	movs	r0, #10
 8000ed0:	f7ff ff44 	bl	8000d5c <nrf24_WriteReg_Multi>
	uint8_t rx_addr_p1_def[5] = {0xc2, 0xc2, 0xc2, 0xc2, 0xc2};
 8000ed4:	4a2b      	ldr	r2, [pc, #172]	; (8000f84 <nrf24_reset+0x148>)
 8000ed6:	f107 0310 	add.w	r3, r7, #16
 8000eda:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ede:	6018      	str	r0, [r3, #0]
 8000ee0:	3304      	adds	r3, #4
 8000ee2:	7019      	strb	r1, [r3, #0]
	nrf24_WriteReg_Multi(RX_ADDR_P1, rx_addr_p1_def, 5);
 8000ee4:	f107 0310 	add.w	r3, r7, #16
 8000ee8:	2205      	movs	r2, #5
 8000eea:	4619      	mov	r1, r3
 8000eec:	200b      	movs	r0, #11
 8000eee:	f7ff ff35 	bl	8000d5c <nrf24_WriteReg_Multi>
	nrf24_WriteReg(RX_ADDR_P2, 0xc3);
 8000ef2:	21c3      	movs	r1, #195	; 0xc3
 8000ef4:	200c      	movs	r0, #12
 8000ef6:	f7ff ff09 	bl	8000d0c <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xc4);
 8000efa:	21c4      	movs	r1, #196	; 0xc4
 8000efc:	200d      	movs	r0, #13
 8000efe:	f7ff ff05 	bl	8000d0c <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xc5);
 8000f02:	21c5      	movs	r1, #197	; 0xc5
 8000f04:	200e      	movs	r0, #14
 8000f06:	f7ff ff01 	bl	8000d0c <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xc6);
 8000f0a:	21c6      	movs	r1, #198	; 0xc6
 8000f0c:	200f      	movs	r0, #15
 8000f0e:	f7ff fefd 	bl	8000d0c <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xc7, 0xc7, 0xc7, 0xc7, 0xc7};
 8000f12:	4a1d      	ldr	r2, [pc, #116]	; (8000f88 <nrf24_reset+0x14c>)
 8000f14:	f107 0308 	add.w	r3, r7, #8
 8000f18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f1c:	6018      	str	r0, [r3, #0]
 8000f1e:	3304      	adds	r3, #4
 8000f20:	7019      	strb	r1, [r3, #0]
	nrf24_WriteReg_Multi(TX_ADDR, tx_addr_def, 5);
 8000f22:	f107 0308 	add.w	r3, r7, #8
 8000f26:	2205      	movs	r2, #5
 8000f28:	4619      	mov	r1, r3
 8000f2a:	2010      	movs	r0, #16
 8000f2c:	f7ff ff16 	bl	8000d5c <nrf24_WriteReg_Multi>
	nrf24_WriteReg(RX_PW_P0, 0);
 8000f30:	2100      	movs	r1, #0
 8000f32:	2011      	movs	r0, #17
 8000f34:	f7ff feea 	bl	8000d0c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 8000f38:	2100      	movs	r1, #0
 8000f3a:	2012      	movs	r0, #18
 8000f3c:	f7ff fee6 	bl	8000d0c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 8000f40:	2100      	movs	r1, #0
 8000f42:	2013      	movs	r0, #19
 8000f44:	f7ff fee2 	bl	8000d0c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 8000f48:	2100      	movs	r1, #0
 8000f4a:	2014      	movs	r0, #20
 8000f4c:	f7ff fede 	bl	8000d0c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 8000f50:	2100      	movs	r1, #0
 8000f52:	2015      	movs	r0, #21
 8000f54:	f7ff feda 	bl	8000d0c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 8000f58:	2100      	movs	r1, #0
 8000f5a:	2016      	movs	r0, #22
 8000f5c:	f7ff fed6 	bl	8000d0c <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 8000f60:	2111      	movs	r1, #17
 8000f62:	2017      	movs	r0, #23
 8000f64:	f7ff fed2 	bl	8000d0c <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 8000f68:	2100      	movs	r1, #0
 8000f6a:	201c      	movs	r0, #28
 8000f6c:	f7ff fece 	bl	8000d0c <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 8000f70:	2100      	movs	r1, #0
 8000f72:	201d      	movs	r0, #29
 8000f74:	f7ff feca 	bl	8000d0c <nrf24_WriteReg>
}
 8000f78:	bf00      	nop
 8000f7a:	3720      	adds	r7, #32
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	08005d04 	.word	0x08005d04
 8000f84:	08005d0c 	.word	0x08005d0c
 8000f88:	08005d14 	.word	0x08005d14

08000f8c <NRF24_Init>:



void NRF24_Init (void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
	// idle state for the pins
	NRF24_CSN_HIGH;
 8000f90:	2201      	movs	r2, #1
 8000f92:	2180      	movs	r1, #128	; 0x80
 8000f94:	4811      	ldr	r0, [pc, #68]	; (8000fdc <NRF24_Init+0x50>)
 8000f96:	f002 fadf 	bl	8003558 <HAL_GPIO_WritePin>
	NRF24_CE_LOW;
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2140      	movs	r1, #64	; 0x40
 8000f9e:	480f      	ldr	r0, [pc, #60]	; (8000fdc <NRF24_Init+0x50>)
 8000fa0:	f002 fada 	bl	8003558 <HAL_GPIO_WritePin>
	HAL_Delay (1);
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	f001 fc8b 	bl	80028c0 <HAL_Delay>

	// reset the nrf
	nrf24_reset(0);
 8000faa:	2000      	movs	r0, #0
 8000fac:	f7ff ff46 	bl	8000e3c <nrf24_reset>

	// config register
	nrf24_WriteReg(CONFIG, 0x00);
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	f7ff feaa 	bl	8000d0c <nrf24_WriteReg>

	// Disable Auto ACK for all data pipes
	nrf24_WriteReg(EN_AA, 0x00);
 8000fb8:	2100      	movs	r1, #0
 8000fba:	2001      	movs	r0, #1
 8000fbc:	f7ff fea6 	bl	8000d0c <nrf24_WriteReg>

	// set up address width
	//nrf24_WriteReg(SETUP_AW, 0x01);

	//set the  Automatic Retransmission
	nrf24_WriteReg(SETUP_RETR, 0xff);
 8000fc0:	21ff      	movs	r1, #255	; 0xff
 8000fc2:	2004      	movs	r0, #4
 8000fc4:	f7ff fea2 	bl	8000d0c <nrf24_WriteReg>

	// set RF Register
	//nrf24_WriteReg(RF_SETUP , 0x06);
	SetRF(0, 3);
 8000fc8:	2103      	movs	r1, #3
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f000 f808 	bl	8000fe0 <SetRF>

	// disable dynamic payload
	nrf24_WriteReg(FEATURE, 0);
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	201d      	movs	r0, #29
 8000fd4:	f7ff fe9a 	bl	8000d0c <nrf24_WriteReg>
}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40020400 	.word	0x40020400

08000fe0 <SetRF>:
void SetRF(uint8_t DataRate, uint8_t OutPwr) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	460a      	mov	r2, r1
 8000fea:	71fb      	strb	r3, [r7, #7]
 8000fec:	4613      	mov	r3, r2
 8000fee:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	73fb      	strb	r3, [r7, #15]

	if (DataRate == 2) {//NRF24L01_DataRate_2M
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d104      	bne.n	8001004 <SetRF+0x24>
		tmp |= 1 << 3;
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	f043 0308 	orr.w	r3, r3, #8
 8001000:	73fb      	strb	r3, [r7, #15]
 8001002:	e006      	b.n	8001012 <SetRF+0x32>
	} else if (DataRate == 250) {//NRF24L01_DataRate_250k
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	2bfa      	cmp	r3, #250	; 0xfa
 8001008:	d103      	bne.n	8001012 <SetRF+0x32>
		tmp |= 1 << 5;
 800100a:	7bfb      	ldrb	r3, [r7, #15]
 800100c:	f043 0320 	orr.w	r3, r3, #32
 8001010:	73fb      	strb	r3, [r7, #15]
	}
	/* If 1Mbps, all bits set to 0 */

	if (OutPwr == 3) {//NRF24L01_OutputPower_0dBm
 8001012:	79bb      	ldrb	r3, [r7, #6]
 8001014:	2b03      	cmp	r3, #3
 8001016:	d104      	bne.n	8001022 <SetRF+0x42>
		tmp |= 3 << 1;
 8001018:	7bfb      	ldrb	r3, [r7, #15]
 800101a:	f043 0306 	orr.w	r3, r3, #6
 800101e:	73fb      	strb	r3, [r7, #15]
 8001020:	e011      	b.n	8001046 <SetRF+0x66>
	} else if (OutPwr == 2) {//NRF24L01_OutputPower_-6dBm
 8001022:	79bb      	ldrb	r3, [r7, #6]
 8001024:	2b02      	cmp	r3, #2
 8001026:	d104      	bne.n	8001032 <SetRF+0x52>
		tmp |= 2 << 1;
 8001028:	7bfb      	ldrb	r3, [r7, #15]
 800102a:	f043 0304 	orr.w	r3, r3, #4
 800102e:	73fb      	strb	r3, [r7, #15]
 8001030:	e009      	b.n	8001046 <SetRF+0x66>
	} else if (OutPwr == 1) {//NRF24L01_OutputPower_-12dBm
 8001032:	79bb      	ldrb	r3, [r7, #6]
 8001034:	2b01      	cmp	r3, #1
 8001036:	d104      	bne.n	8001042 <SetRF+0x62>
		tmp |= 1 << 1;
 8001038:	7bfb      	ldrb	r3, [r7, #15]
 800103a:	f043 0302 	orr.w	r3, r3, #2
 800103e:	73fb      	strb	r3, [r7, #15]
 8001040:	e001      	b.n	8001046 <SetRF+0x66>
	}else if(OutPwr == 0){////NRF24L01_OutputPower_-18dBm
 8001042:	79bb      	ldrb	r3, [r7, #6]
 8001044:	2b00      	cmp	r3, #0
		tmp |= 0 << 1;
	}

	nrf24_WriteReg(RF_SETUP, tmp);
 8001046:	7bfb      	ldrb	r3, [r7, #15]
 8001048:	4619      	mov	r1, r3
 800104a:	2006      	movs	r0, #6
 800104c:	f7ff fe5e 	bl	8000d0c <nrf24_WriteReg>
}
 8001050:	bf00      	nop
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <NRF24_RxMode>:
	return 0;
}


void NRF24_RxMode (uint8_t *Address, uint8_t channel, uint8_t payload_size)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	460b      	mov	r3, r1
 8001062:	70fb      	strb	r3, [r7, #3]
 8001064:	4613      	mov	r3, r2
 8001066:	70bb      	strb	r3, [r7, #2]
	uint8_t cmdtosend;

	// Pull the CE LOW
	NRF24_CE_LOW;
 8001068:	2200      	movs	r2, #0
 800106a:	2140      	movs	r1, #64	; 0x40
 800106c:	4818      	ldr	r0, [pc, #96]	; (80010d0 <NRF24_RxMode+0x78>)
 800106e:	f002 fa73 	bl	8003558 <HAL_GPIO_WritePin>

	// Flush the RX FIFO
	cmdtosend = FLUSH_RX;
 8001072:	23e2      	movs	r3, #226	; 0xe2
 8001074:	73fb      	strb	r3, [r7, #15]
	nrfsendCmd(cmdtosend);
 8001076:	7bfb      	ldrb	r3, [r7, #15]
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff fec1 	bl	8000e00 <nrfsendCmd>

	// Reset the status Register
	nrf24_reset(STATUS);
 800107e:	2007      	movs	r0, #7
 8001080:	f7ff fedc 	bl	8000e3c <nrf24_reset>

	// set the payload size for pipe 1
	nrf24_WriteReg(RX_PW_P1, payload_size);
 8001084:	78bb      	ldrb	r3, [r7, #2]
 8001086:	4619      	mov	r1, r3
 8001088:	2012      	movs	r0, #18
 800108a:	f7ff fe3f 	bl	8000d0c <nrf24_WriteReg>

	//set address for rx pipe
	nrf24_WriteReg_Multi(RX_ADDR_P1, Address, 5);
 800108e:	2205      	movs	r2, #5
 8001090:	6879      	ldr	r1, [r7, #4]
 8001092:	200b      	movs	r0, #11
 8001094:	f7ff fe62 	bl	8000d5c <nrf24_WriteReg_Multi>

	nrf24_WriteReg(RF_CH, channel);
 8001098:	78fb      	ldrb	r3, [r7, #3]
 800109a:	4619      	mov	r1, r3
 800109c:	2005      	movs	r0, #5
 800109e:	f7ff fe35 	bl	8000d0c <nrf24_WriteReg>
	// enable Pipe 1 for RX
	//nrf24_WriteReg(EN_RXADDR, nrf24_ReadReg(EN_RXADDR)|(1<<1));
	// enable Pipe 0 for RX
	//nrf24_WriteReg(EN_RXADDR, 0x01);

	uint8_t config = nrf24_ReadReg(CONFIG);
 80010a2:	2000      	movs	r0, #0
 80010a4:	f7ff fe86 	bl	8000db4 <nrf24_ReadReg>
 80010a8:	4603      	mov	r3, r0
 80010aa:	73bb      	strb	r3, [r7, #14]
	config|= (1<<1) | (1<<0);   // enable the PWR_UP bit and PRIM_RX bit
 80010ac:	7bbb      	ldrb	r3, [r7, #14]
 80010ae:	f043 0303 	orr.w	r3, r3, #3
 80010b2:	73bb      	strb	r3, [r7, #14]
	nrf24_WriteReg(CONFIG, config);  // power on in rx mode
 80010b4:	7bbb      	ldrb	r3, [r7, #14]
 80010b6:	4619      	mov	r1, r3
 80010b8:	2000      	movs	r0, #0
 80010ba:	f7ff fe27 	bl	8000d0c <nrf24_WriteReg>

	NRF24_CE_HIGH;
 80010be:	2201      	movs	r2, #1
 80010c0:	2140      	movs	r1, #64	; 0x40
 80010c2:	4803      	ldr	r0, [pc, #12]	; (80010d0 <NRF24_RxMode+0x78>)
 80010c4:	f002 fa48 	bl	8003558 <HAL_GPIO_WritePin>
}
 80010c8:	bf00      	nop
 80010ca:	3710      	adds	r7, #16
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40020400 	.word	0x40020400

080010d4 <DataReady>:
		return 1;
	}

	else return 0;
}
uint8_t DataReady(uint8_t Pipenum) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	71fb      	strb	r3, [r7, #7]
	uint8_t status=nrf24_ReadReg(STATUS);
 80010de:	2007      	movs	r0, #7
 80010e0:	f7ff fe68 	bl	8000db4 <nrf24_ReadReg>
 80010e4:	4603      	mov	r3, r0
 80010e6:	73fb      	strb	r3, [r7, #15]
	if ((status&(1<<6)) && (status&(Pipenum<<1))){
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
 80010ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d007      	beq.n	8001102 <DataReady+0x2e>
 80010f2:	7bfa      	ldrb	r2, [r7, #15]
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	4013      	ands	r3, r2
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <DataReady+0x2e>
		// clear the RX_DR bit
		//nrf24_WriteReg(STATUS, status|(1<<6));
		return 1;
 80010fe:	2301      	movs	r3, #1
 8001100:	e007      	b.n	8001112 <DataReady+0x3e>
	}
	return !RxFifoEmpty();
 8001102:	f000 f80a 	bl	800111a <RxFifoEmpty>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	bf0c      	ite	eq
 800110c:	2301      	moveq	r3, #1
 800110e:	2300      	movne	r3, #0
 8001110:	b2db      	uxtb	r3, r3
}
 8001112:	4618      	mov	r0, r3
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <RxFifoEmpty>:

uint8_t RxFifoEmpty(void) {
 800111a:	b580      	push	{r7, lr}
 800111c:	b082      	sub	sp, #8
 800111e:	af00      	add	r7, sp, #0
	uint8_t data = nrf24_ReadReg(FIFO_STATUS);
 8001120:	2017      	movs	r0, #23
 8001122:	f7ff fe47 	bl	8000db4 <nrf24_ReadReg>
 8001126:	4603      	mov	r3, r0
 8001128:	71fb      	strb	r3, [r7, #7]
	return data;
 800112a:	79fb      	ldrb	r3, [r7, #7]
}
 800112c:	4618      	mov	r0, r3
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <NRF24_Receive>:



void NRF24_Receive (uint8_t *data, uint16_t size)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	460b      	mov	r3, r1
 800113e:	807b      	strh	r3, [r7, #2]
	uint8_t cmdtosend;

	// Pull the CSN pin LOW
	NRF24_CSN_LOW;
 8001140:	2200      	movs	r2, #0
 8001142:	2180      	movs	r1, #128	; 0x80
 8001144:	4812      	ldr	r0, [pc, #72]	; (8001190 <NRF24_Receive+0x5c>)
 8001146:	f002 fa07 	bl	8003558 <HAL_GPIO_WritePin>

	// Send the read command
	cmdtosend = R_RX_PAYLOAD;
 800114a:	2361      	movs	r3, #97	; 0x61
 800114c:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 10);
 800114e:	f107 010f 	add.w	r1, r7, #15
 8001152:	230a      	movs	r3, #10
 8001154:	2201      	movs	r2, #1
 8001156:	480f      	ldr	r0, [pc, #60]	; (8001194 <NRF24_Receive+0x60>)
 8001158:	f002 feb5 	bl	8003ec6 <HAL_SPI_Transmit>

	// read the data
	HAL_SPI_Receive(NRF24_SPI, data, size, 100);
 800115c:	887a      	ldrh	r2, [r7, #2]
 800115e:	2364      	movs	r3, #100	; 0x64
 8001160:	6879      	ldr	r1, [r7, #4]
 8001162:	480c      	ldr	r0, [pc, #48]	; (8001194 <NRF24_Receive+0x60>)
 8001164:	f002 ffeb 	bl	800413e <HAL_SPI_Receive>

	// pull the CS pin HIGH
	NRF24_CSN_HIGH;
 8001168:	2201      	movs	r2, #1
 800116a:	2180      	movs	r1, #128	; 0x80
 800116c:	4808      	ldr	r0, [pc, #32]	; (8001190 <NRF24_Receive+0x5c>)
 800116e:	f002 f9f3 	bl	8003558 <HAL_GPIO_WritePin>
	// clear the RX_DR bit
	nrf24_WriteReg(STATUS, (1<<6));
 8001172:	2140      	movs	r1, #64	; 0x40
 8001174:	2007      	movs	r0, #7
 8001176:	f7ff fdc9 	bl	8000d0c <nrf24_WriteReg>
	// Flush the RX FIFO
	cmdtosend = FLUSH_RX;
 800117a:	23e2      	movs	r3, #226	; 0xe2
 800117c:	73fb      	strb	r3, [r7, #15]
	nrfsendCmd(cmdtosend);
 800117e:	7bfb      	ldrb	r3, [r7, #15]
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff fe3d 	bl	8000e00 <nrfsendCmd>
}
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40020400 	.word	0x40020400
 8001194:	2000071c 	.word	0x2000071c

08001198 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	607b      	str	r3, [r7, #4]
 80011a2:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <MX_DMA_Init+0x3c>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	4a0b      	ldr	r2, [pc, #44]	; (80011d4 <MX_DMA_Init+0x3c>)
 80011a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011ac:	6313      	str	r3, [r2, #48]	; 0x30
 80011ae:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <MX_DMA_Init+0x3c>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011b6:	607b      	str	r3, [r7, #4]
 80011b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2100      	movs	r1, #0
 80011be:	2039      	movs	r0, #57	; 0x39
 80011c0:	f001 fc7d 	bl	8002abe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80011c4:	2039      	movs	r0, #57	; 0x39
 80011c6:	f001 fc96 	bl	8002af6 <HAL_NVIC_EnableIRQ>

}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40023800 	.word	0x40023800

080011d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b088      	sub	sp, #32
 80011dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011de:	f107 030c 	add.w	r3, r7, #12
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	60da      	str	r2, [r3, #12]
 80011ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	60bb      	str	r3, [r7, #8]
 80011f2:	4b1f      	ldr	r3, [pc, #124]	; (8001270 <MX_GPIO_Init+0x98>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a1e      	ldr	r2, [pc, #120]	; (8001270 <MX_GPIO_Init+0x98>)
 80011f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	4b1c      	ldr	r3, [pc, #112]	; (8001270 <MX_GPIO_Init+0x98>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001206:	60bb      	str	r3, [r7, #8]
 8001208:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	607b      	str	r3, [r7, #4]
 800120e:	4b18      	ldr	r3, [pc, #96]	; (8001270 <MX_GPIO_Init+0x98>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	4a17      	ldr	r2, [pc, #92]	; (8001270 <MX_GPIO_Init+0x98>)
 8001214:	f043 0301 	orr.w	r3, r3, #1
 8001218:	6313      	str	r3, [r2, #48]	; 0x30
 800121a:	4b15      	ldr	r3, [pc, #84]	; (8001270 <MX_GPIO_Init+0x98>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	603b      	str	r3, [r7, #0]
 800122a:	4b11      	ldr	r3, [pc, #68]	; (8001270 <MX_GPIO_Init+0x98>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a10      	ldr	r2, [pc, #64]	; (8001270 <MX_GPIO_Init+0x98>)
 8001230:	f043 0302 	orr.w	r3, r3, #2
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <MX_GPIO_Init+0x98>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	603b      	str	r3, [r7, #0]
 8001240:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_CE_Pin|SPI1_CSN_Pin, GPIO_PIN_RESET);
 8001242:	2200      	movs	r2, #0
 8001244:	21c0      	movs	r1, #192	; 0xc0
 8001246:	480b      	ldr	r0, [pc, #44]	; (8001274 <MX_GPIO_Init+0x9c>)
 8001248:	f002 f986 	bl	8003558 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SPI1_CE_Pin|SPI1_CSN_Pin;
 800124c:	23c0      	movs	r3, #192	; 0xc0
 800124e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001250:	2301      	movs	r3, #1
 8001252:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001258:	2300      	movs	r3, #0
 800125a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800125c:	f107 030c 	add.w	r3, r7, #12
 8001260:	4619      	mov	r1, r3
 8001262:	4804      	ldr	r0, [pc, #16]	; (8001274 <MX_GPIO_Init+0x9c>)
 8001264:	f001 fff4 	bl	8003250 <HAL_GPIO_Init>

}
 8001268:	bf00      	nop
 800126a:	3720      	adds	r7, #32
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40023800 	.word	0x40023800
 8001274:	40020400 	.word	0x40020400

08001278 <HAL_TIM_PWM_PulseFinishedCallback>:
/* USER CODE BEGIN PFP */

	/* RGB */

		void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
		{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
			HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8001280:	2100      	movs	r1, #0
 8001282:	4805      	ldr	r0, [pc, #20]	; (8001298 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8001284:	f003 fe46 	bl	8004f14 <HAL_TIM_PWM_Stop_DMA>
			datasentflag=1;
 8001288:	4b04      	ldr	r3, [pc, #16]	; (800129c <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 800128a:	2201      	movs	r2, #1
 800128c:	601a      	str	r2, [r3, #0]
		}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	2000081c 	.word	0x2000081c
 800129c:	20000040 	.word	0x20000040

080012a0 <Set_LED>:

		void Set_LED (int LEDnum, int Red, int Green, int Blue)
		{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
 80012ac:	603b      	str	r3, [r7, #0]
			LED_Data[LEDnum][0] = LEDnum;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	b2d9      	uxtb	r1, r3
 80012b2:	4a11      	ldr	r2, [pc, #68]	; (80012f8 <Set_LED+0x58>)
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
			LED_Data[LEDnum][1] = Green;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	b2d9      	uxtb	r1, r3
 80012be:	4a0e      	ldr	r2, [pc, #56]	; (80012f8 <Set_LED+0x58>)
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	4413      	add	r3, r2
 80012c6:	460a      	mov	r2, r1
 80012c8:	705a      	strb	r2, [r3, #1]
			LED_Data[LEDnum][2] = Red;
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	b2d9      	uxtb	r1, r3
 80012ce:	4a0a      	ldr	r2, [pc, #40]	; (80012f8 <Set_LED+0x58>)
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	4413      	add	r3, r2
 80012d6:	460a      	mov	r2, r1
 80012d8:	709a      	strb	r2, [r3, #2]
			LED_Data[LEDnum][3] = Blue;
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	b2d9      	uxtb	r1, r3
 80012de:	4a06      	ldr	r2, [pc, #24]	; (80012f8 <Set_LED+0x58>)
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	4413      	add	r3, r2
 80012e6:	460a      	mov	r2, r1
 80012e8:	70da      	strb	r2, [r3, #3]
		}
 80012ea:	bf00      	nop
 80012ec:	3714      	adds	r7, #20
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	20000054 	.word	0x20000054

080012fc <WS2812_Send>:
		}

		uint16_t pwmData[(24*MAX_LED)+50];

		void WS2812_Send (void)
		{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
			uint32_t indx=0;
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
			uint32_t color;


			for (int i= 0; i<MAX_LED; i++)
 8001306:	2300      	movs	r3, #0
 8001308:	613b      	str	r3, [r7, #16]
 800130a:	e036      	b.n	800137a <WS2812_Send+0x7e>
			{
		#if USE_BRIGHTNESS
				color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
		#else
				color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
 800130c:	4a2e      	ldr	r2, [pc, #184]	; (80013c8 <WS2812_Send+0xcc>)
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	00db      	lsls	r3, r3, #3
 8001312:	4413      	add	r3, r2
 8001314:	785b      	ldrb	r3, [r3, #1]
 8001316:	041a      	lsls	r2, r3, #16
 8001318:	492b      	ldr	r1, [pc, #172]	; (80013c8 <WS2812_Send+0xcc>)
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	00db      	lsls	r3, r3, #3
 800131e:	440b      	add	r3, r1
 8001320:	789b      	ldrb	r3, [r3, #2]
 8001322:	021b      	lsls	r3, r3, #8
 8001324:	431a      	orrs	r2, r3
 8001326:	4928      	ldr	r1, [pc, #160]	; (80013c8 <WS2812_Send+0xcc>)
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	440b      	add	r3, r1
 800132e:	78db      	ldrb	r3, [r3, #3]
 8001330:	4313      	orrs	r3, r2
 8001332:	607b      	str	r3, [r7, #4]
		#endif

				for (int i=23; i>=0; i--)
 8001334:	2317      	movs	r3, #23
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	e019      	b.n	800136e <WS2812_Send+0x72>
				{
					if (color&(1<<i))
 800133a:	2201      	movs	r2, #1
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	461a      	mov	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4013      	ands	r3, r2
 8001348:	2b00      	cmp	r3, #0
 800134a:	d005      	beq.n	8001358 <WS2812_Send+0x5c>
					{
						pwmData[indx] = 70;  // 2/3 of 105/70
 800134c:	4a1f      	ldr	r2, [pc, #124]	; (80013cc <WS2812_Send+0xd0>)
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	2146      	movs	r1, #70	; 0x46
 8001352:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001356:	e004      	b.n	8001362 <WS2812_Send+0x66>
					}

					else pwmData[indx] = 35;  // 1/3 of 105/37
 8001358:	4a1c      	ldr	r2, [pc, #112]	; (80013cc <WS2812_Send+0xd0>)
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	2123      	movs	r1, #35	; 0x23
 800135e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

					indx++;
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	3301      	adds	r3, #1
 8001366:	617b      	str	r3, [r7, #20]
				for (int i=23; i>=0; i--)
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	3b01      	subs	r3, #1
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	2b00      	cmp	r3, #0
 8001372:	dae2      	bge.n	800133a <WS2812_Send+0x3e>
			for (int i= 0; i<MAX_LED; i++)
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	3301      	adds	r3, #1
 8001378:	613b      	str	r3, [r7, #16]
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	2b18      	cmp	r3, #24
 800137e:	ddc5      	ble.n	800130c <WS2812_Send+0x10>
				}

			}

			for (int i=0; i<50; i++)
 8001380:	2300      	movs	r3, #0
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	e00a      	b.n	800139c <WS2812_Send+0xa0>
			{
				pwmData[indx] = 0;
 8001386:	4a11      	ldr	r2, [pc, #68]	; (80013cc <WS2812_Send+0xd0>)
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	2100      	movs	r1, #0
 800138c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				indx++;
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	3301      	adds	r3, #1
 8001394:	617b      	str	r3, [r7, #20]
			for (int i=0; i<50; i++)
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	3301      	adds	r3, #1
 800139a:	60bb      	str	r3, [r7, #8]
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	2b31      	cmp	r3, #49	; 0x31
 80013a0:	ddf1      	ble.n	8001386 <WS2812_Send+0x8a>
			}

			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	4a09      	ldr	r2, [pc, #36]	; (80013cc <WS2812_Send+0xd0>)
 80013a8:	2100      	movs	r1, #0
 80013aa:	4809      	ldr	r0, [pc, #36]	; (80013d0 <WS2812_Send+0xd4>)
 80013ac:	f003 fc02 	bl	8004bb4 <HAL_TIM_PWM_Start_DMA>
			while (!datasentflag){};
 80013b0:	bf00      	nop
 80013b2:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <WS2812_Send+0xd8>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d0fb      	beq.n	80013b2 <WS2812_Send+0xb6>
			datasentflag = 0;
 80013ba:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <WS2812_Send+0xd8>)
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
		}
 80013c0:	bf00      	nop
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20000054 	.word	0x20000054
 80013cc:	200001ec 	.word	0x200001ec
 80013d0:	2000081c 	.word	0x2000081c
 80013d4:	20000040 	.word	0x20000040

080013d8 <Reset_LED>:

		void Reset_LED (void)
		{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
			for (int i=0; i<MAX_LED; i++)
 80013de:	2300      	movs	r3, #0
 80013e0:	607b      	str	r3, [r7, #4]
 80013e2:	e01a      	b.n	800141a <Reset_LED+0x42>
			{
				LED_Data[i][0] = i;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	b2d9      	uxtb	r1, r3
 80013e8:	4a11      	ldr	r2, [pc, #68]	; (8001430 <Reset_LED+0x58>)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
				LED_Data[i][1] = 0;
 80013f0:	4a0f      	ldr	r2, [pc, #60]	; (8001430 <Reset_LED+0x58>)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	4413      	add	r3, r2
 80013f8:	2200      	movs	r2, #0
 80013fa:	705a      	strb	r2, [r3, #1]
				LED_Data[i][2] = 0;
 80013fc:	4a0c      	ldr	r2, [pc, #48]	; (8001430 <Reset_LED+0x58>)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	4413      	add	r3, r2
 8001404:	2200      	movs	r2, #0
 8001406:	709a      	strb	r2, [r3, #2]
				LED_Data[i][3] = 0;
 8001408:	4a09      	ldr	r2, [pc, #36]	; (8001430 <Reset_LED+0x58>)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	4413      	add	r3, r2
 8001410:	2200      	movs	r2, #0
 8001412:	70da      	strb	r2, [r3, #3]
			for (int i=0; i<MAX_LED; i++)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3301      	adds	r3, #1
 8001418:	607b      	str	r3, [r7, #4]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2b18      	cmp	r3, #24
 800141e:	dde1      	ble.n	80013e4 <Reset_LED+0xc>
			}
		}
 8001420:	bf00      	nop
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	20000054 	.word	0x20000054

08001434 <map>:

		double map(double x, double in_min, double in_max, double out_min, double out_max) {
 8001434:	b5b0      	push	{r4, r5, r7, lr}
 8001436:	b08a      	sub	sp, #40	; 0x28
 8001438:	af00      	add	r7, sp, #0
 800143a:	ed87 0b08 	vstr	d0, [r7, #32]
 800143e:	ed87 1b06 	vstr	d1, [r7, #24]
 8001442:	ed87 2b04 	vstr	d2, [r7, #16]
 8001446:	ed87 3b02 	vstr	d3, [r7, #8]
 800144a:	ed87 4b00 	vstr	d4, [r7]
		  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800144e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001452:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001456:	f7fe fec3 	bl	80001e0 <__aeabi_dsub>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	4614      	mov	r4, r2
 8001460:	461d      	mov	r5, r3
 8001462:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001466:	e9d7 0100 	ldrd	r0, r1, [r7]
 800146a:	f7fe feb9 	bl	80001e0 <__aeabi_dsub>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	4620      	mov	r0, r4
 8001474:	4629      	mov	r1, r5
 8001476:	f7ff f86b 	bl	8000550 <__aeabi_dmul>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	4614      	mov	r4, r2
 8001480:	461d      	mov	r5, r3
 8001482:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001486:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800148a:	f7fe fea9 	bl	80001e0 <__aeabi_dsub>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	4620      	mov	r0, r4
 8001494:	4629      	mov	r1, r5
 8001496:	f7ff f985 	bl	80007a4 <__aeabi_ddiv>
 800149a:	4602      	mov	r2, r0
 800149c:	460b      	mov	r3, r1
 800149e:	4610      	mov	r0, r2
 80014a0:	4619      	mov	r1, r3
 80014a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80014a6:	f7fe fe9d 	bl	80001e4 <__adddf3>
 80014aa:	4602      	mov	r2, r0
 80014ac:	460b      	mov	r3, r1
 80014ae:	ec43 2b17 	vmov	d7, r2, r3
		}
 80014b2:	eeb0 0a47 	vmov.f32	s0, s14
 80014b6:	eef0 0a67 	vmov.f32	s1, s15
 80014ba:	3728      	adds	r7, #40	; 0x28
 80014bc:	46bd      	mov	sp, r7
 80014be:	bdb0      	pop	{r4, r5, r7, pc}

080014c0 <reset_data>:

	/* RESET DATE nRF24L01 */

		void reset_data(void){
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
		  RxData[0] = 128;//x1
 80014c4:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <reset_data+0x40>)
 80014c6:	2280      	movs	r2, #128	; 0x80
 80014c8:	701a      	strb	r2, [r3, #0]
		  RxData[1] = 128;//y1
 80014ca:	4b0d      	ldr	r3, [pc, #52]	; (8001500 <reset_data+0x40>)
 80014cc:	2280      	movs	r2, #128	; 0x80
 80014ce:	705a      	strb	r2, [r3, #1]
		  RxData[2] = 128;//x2
 80014d0:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <reset_data+0x40>)
 80014d2:	2280      	movs	r2, #128	; 0x80
 80014d4:	709a      	strb	r2, [r3, #2]
		  RxData[3] = 128; //y2
 80014d6:	4b0a      	ldr	r3, [pc, #40]	; (8001500 <reset_data+0x40>)
 80014d8:	2280      	movs	r2, #128	; 0x80
 80014da:	70da      	strb	r2, [r3, #3]
		  RxData[4] = 128; //y2
 80014dc:	4b08      	ldr	r3, [pc, #32]	; (8001500 <reset_data+0x40>)
 80014de:	2280      	movs	r2, #128	; 0x80
 80014e0:	711a      	strb	r2, [r3, #4]
		  RxData[5] = 128; //y2
 80014e2:	4b07      	ldr	r3, [pc, #28]	; (8001500 <reset_data+0x40>)
 80014e4:	2280      	movs	r2, #128	; 0x80
 80014e6:	715a      	strb	r2, [r3, #5]
		  RxData[6] = 0; //y2
 80014e8:	4b05      	ldr	r3, [pc, #20]	; (8001500 <reset_data+0x40>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	719a      	strb	r2, [r3, #6]
		  RxData[7] = 0; //y2
 80014ee:	4b04      	ldr	r3, [pc, #16]	; (8001500 <reset_data+0x40>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	71da      	strb	r2, [r3, #7]
		}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	20000710 	.word	0x20000710
 8001504:	00000000 	.word	0x00000000

08001508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001508:	b5b0      	push	{r4, r5, r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800150c:	f001 f966 	bl	80027dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001510:	f000 fcee 	bl	8001ef0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001514:	f7ff fe60 	bl	80011d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001518:	f7ff fe3e 	bl	8001198 <MX_DMA_Init>
  MX_TIM1_Init();
 800151c:	f000 fe44 	bl	80021a8 <MX_TIM1_Init>
  MX_SPI1_Init();
 8001520:	f000 fd56 	bl	8001fd0 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001524:	f000 fee0 	bl	80022e8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001528:	f000 ff74 	bl	8002414 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

	 /* RGB */

		  Reset_LED();
 800152c:	f7ff ff54 	bl	80013d8 <Reset_LED>

	 /* nRF24L01 MODE */

			NRF24_Init();
 8001530:	f7ff fd2c 	bl	8000f8c <NRF24_Init>
			NRF24_RxMode(Rxaddr, 112, 8);//NRF24_TxMode(Address, channel, payload_size)
 8001534:	2208      	movs	r2, #8
 8001536:	2170      	movs	r1, #112	; 0x70
 8001538:	48cd      	ldr	r0, [pc, #820]	; (8001870 <main+0x368>)
 800153a:	f7ff fd8d 	bl	8001058 <NRF24_RxMode>
			RxData[0] = 128;//x1
 800153e:	4bcd      	ldr	r3, [pc, #820]	; (8001874 <main+0x36c>)
 8001540:	2280      	movs	r2, #128	; 0x80
 8001542:	701a      	strb	r2, [r3, #0]
			RxData[1] = 128;//y1
 8001544:	4bcb      	ldr	r3, [pc, #812]	; (8001874 <main+0x36c>)
 8001546:	2280      	movs	r2, #128	; 0x80
 8001548:	705a      	strb	r2, [r3, #1]
			RxData[2] = 128;//x2
 800154a:	4bca      	ldr	r3, [pc, #808]	; (8001874 <main+0x36c>)
 800154c:	2280      	movs	r2, #128	; 0x80
 800154e:	709a      	strb	r2, [r3, #2]
			RxData[3] = 128; //y2
 8001550:	4bc8      	ldr	r3, [pc, #800]	; (8001874 <main+0x36c>)
 8001552:	2280      	movs	r2, #128	; 0x80
 8001554:	70da      	strb	r2, [r3, #3]
			RxData[4] = 128; //y2
 8001556:	4bc7      	ldr	r3, [pc, #796]	; (8001874 <main+0x36c>)
 8001558:	2280      	movs	r2, #128	; 0x80
 800155a:	711a      	strb	r2, [r3, #4]
			RxData[5] = 128; //y2
 800155c:	4bc5      	ldr	r3, [pc, #788]	; (8001874 <main+0x36c>)
 800155e:	2280      	movs	r2, #128	; 0x80
 8001560:	715a      	strb	r2, [r3, #5]
			RxData[6] = 0; //y2
 8001562:	4bc4      	ldr	r3, [pc, #784]	; (8001874 <main+0x36c>)
 8001564:	2200      	movs	r2, #0
 8001566:	719a      	strb	r2, [r3, #6]
			RxData[7] = 0; //y2
 8001568:	4bc2      	ldr	r3, [pc, #776]	; (8001874 <main+0x36c>)
 800156a:	2200      	movs	r2, #0
 800156c:	71da      	strb	r2, [r3, #7]

	  /* MIMER MOTOR */

		  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800156e:	2100      	movs	r1, #0
 8001570:	48c1      	ldr	r0, [pc, #772]	; (8001878 <main+0x370>)
 8001572:	f003 fa6f 	bl	8004a54 <HAL_TIM_PWM_Start>
		  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001576:	2104      	movs	r1, #4
 8001578:	48bf      	ldr	r0, [pc, #764]	; (8001878 <main+0x370>)
 800157a:	f003 fa6b 	bl	8004a54 <HAL_TIM_PWM_Start>
		  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800157e:	2108      	movs	r1, #8
 8001580:	48bd      	ldr	r0, [pc, #756]	; (8001878 <main+0x370>)
 8001582:	f003 fa67 	bl	8004a54 <HAL_TIM_PWM_Start>
		  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001586:	210c      	movs	r1, #12
 8001588:	48bb      	ldr	r0, [pc, #748]	; (8001878 <main+0x370>)
 800158a:	f003 fa63 	bl	8004a54 <HAL_TIM_PWM_Start>

		  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800158e:	2100      	movs	r1, #0
 8001590:	48ba      	ldr	r0, [pc, #744]	; (800187c <main+0x374>)
 8001592:	f003 fa5f 	bl	8004a54 <HAL_TIM_PWM_Start>
		  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001596:	2104      	movs	r1, #4
 8001598:	48b8      	ldr	r0, [pc, #736]	; (800187c <main+0x374>)
 800159a:	f003 fa5b 	bl	8004a54 <HAL_TIM_PWM_Start>
		  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800159e:	2108      	movs	r1, #8
 80015a0:	48b6      	ldr	r0, [pc, #728]	; (800187c <main+0x374>)
 80015a2:	f003 fa57 	bl	8004a54 <HAL_TIM_PWM_Start>
		  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80015a6:	210c      	movs	r1, #12
 80015a8:	48b4      	ldr	r0, [pc, #720]	; (800187c <main+0x374>)
 80015aa:	f003 fa53 	bl	8004a54 <HAL_TIM_PWM_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	  /* nRF24L01 DATA */

			  if(DataReady(1)>0){
 80015ae:	2001      	movs	r0, #1
 80015b0:	f7ff fd90 	bl	80010d4 <DataReady>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d008      	beq.n	80015cc <main+0xc4>
					NRF24_Receive(RxData, 8);
 80015ba:	2108      	movs	r1, #8
 80015bc:	48ad      	ldr	r0, [pc, #692]	; (8001874 <main+0x36c>)
 80015be:	f7ff fdb9 	bl	8001134 <NRF24_Receive>
					lastTime = HAL_GetTick();
 80015c2:	f001 f971 	bl	80028a8 <HAL_GetTick>
 80015c6:	4603      	mov	r3, r0
 80015c8:	4aad      	ldr	r2, [pc, #692]	; (8001880 <main+0x378>)
 80015ca:	6013      	str	r3, [r2, #0]
			  	  }
				  if((HAL_GetTick() - lastTime > 10)){
 80015cc:	f001 f96c 	bl	80028a8 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	4bab      	ldr	r3, [pc, #684]	; (8001880 <main+0x378>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b0a      	cmp	r3, #10
 80015da:	d901      	bls.n	80015e0 <main+0xd8>
					reset_data();
 80015dc:	f7ff ff70 	bl	80014c0 <reset_data>

				  }
		   /* MAPING FROM JOYSTIKE REMOTE */

				  Vx 	= map(RxData[0],0 , 256, 999, -999);
 80015e0:	4ba4      	ldr	r3, [pc, #656]	; (8001874 <main+0x36c>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7fe ff39 	bl	800045c <__aeabi_ui2d>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	ed9f 4b96 	vldr	d4, [pc, #600]	; 8001848 <main+0x340>
 80015f2:	ed9f 3b97 	vldr	d3, [pc, #604]	; 8001850 <main+0x348>
 80015f6:	ed9f 2b98 	vldr	d2, [pc, #608]	; 8001858 <main+0x350>
 80015fa:	ed9f 1b99 	vldr	d1, [pc, #612]	; 8001860 <main+0x358>
 80015fe:	ec43 2b10 	vmov	d0, r2, r3
 8001602:	f7ff ff17 	bl	8001434 <map>
 8001606:	ec53 2b10 	vmov	r2, r3, d0
 800160a:	4610      	mov	r0, r2
 800160c:	4619      	mov	r1, r3
 800160e:	f7ff f9b1 	bl	8000974 <__aeabi_d2f>
 8001612:	4603      	mov	r3, r0
 8001614:	4a9b      	ldr	r2, [pc, #620]	; (8001884 <main+0x37c>)
 8001616:	6013      	str	r3, [r2, #0]
				  Vy 	= map(RxData[1],0 , 256, 999, -999);
 8001618:	4b96      	ldr	r3, [pc, #600]	; (8001874 <main+0x36c>)
 800161a:	785b      	ldrb	r3, [r3, #1]
 800161c:	4618      	mov	r0, r3
 800161e:	f7fe ff1d 	bl	800045c <__aeabi_ui2d>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	ed9f 4b88 	vldr	d4, [pc, #544]	; 8001848 <main+0x340>
 800162a:	ed9f 3b89 	vldr	d3, [pc, #548]	; 8001850 <main+0x348>
 800162e:	ed9f 2b8a 	vldr	d2, [pc, #552]	; 8001858 <main+0x350>
 8001632:	ed9f 1b8b 	vldr	d1, [pc, #556]	; 8001860 <main+0x358>
 8001636:	ec43 2b10 	vmov	d0, r2, r3
 800163a:	f7ff fefb 	bl	8001434 <map>
 800163e:	ec53 2b10 	vmov	r2, r3, d0
 8001642:	4610      	mov	r0, r2
 8001644:	4619      	mov	r1, r3
 8001646:	f7ff f995 	bl	8000974 <__aeabi_d2f>
 800164a:	4603      	mov	r3, r0
 800164c:	4a8e      	ldr	r2, [pc, #568]	; (8001888 <main+0x380>)
 800164e:	6013      	str	r3, [r2, #0]
				  Omega = map(RxData[2],0 , 256, 999, -999);
 8001650:	4b88      	ldr	r3, [pc, #544]	; (8001874 <main+0x36c>)
 8001652:	789b      	ldrb	r3, [r3, #2]
 8001654:	4618      	mov	r0, r3
 8001656:	f7fe ff01 	bl	800045c <__aeabi_ui2d>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8001848 <main+0x340>
 8001662:	ed9f 3b7b 	vldr	d3, [pc, #492]	; 8001850 <main+0x348>
 8001666:	ed9f 2b7c 	vldr	d2, [pc, #496]	; 8001858 <main+0x350>
 800166a:	ed9f 1b7d 	vldr	d1, [pc, #500]	; 8001860 <main+0x358>
 800166e:	ec43 2b10 	vmov	d0, r2, r3
 8001672:	f7ff fedf 	bl	8001434 <map>
 8001676:	ec53 2b10 	vmov	r2, r3, d0
 800167a:	4610      	mov	r0, r2
 800167c:	4619      	mov	r1, r3
 800167e:	f7ff f979 	bl	8000974 <__aeabi_d2f>
 8001682:	4603      	mov	r3, r0
 8001684:	4a81      	ldr	r2, [pc, #516]	; (800188c <main+0x384>)
 8001686:	6013      	str	r3, [r2, #0]

		   /* EQUATION MECANUM WHEELS */

				  W1 = -Vx - Vy + 0.9*Omega;
 8001688:	4b7e      	ldr	r3, [pc, #504]	; (8001884 <main+0x37c>)
 800168a:	edd3 7a00 	vldr	s15, [r3]
 800168e:	eeb1 7a67 	vneg.f32	s14, s15
 8001692:	4b7d      	ldr	r3, [pc, #500]	; (8001888 <main+0x380>)
 8001694:	edd3 7a00 	vldr	s15, [r3]
 8001698:	ee77 7a67 	vsub.f32	s15, s14, s15
 800169c:	ee17 0a90 	vmov	r0, s15
 80016a0:	f7fe fefe 	bl	80004a0 <__aeabi_f2d>
 80016a4:	4604      	mov	r4, r0
 80016a6:	460d      	mov	r5, r1
 80016a8:	4b78      	ldr	r3, [pc, #480]	; (800188c <main+0x384>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7fe fef7 	bl	80004a0 <__aeabi_f2d>
 80016b2:	a36d      	add	r3, pc, #436	; (adr r3, 8001868 <main+0x360>)
 80016b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b8:	f7fe ff4a 	bl	8000550 <__aeabi_dmul>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	4620      	mov	r0, r4
 80016c2:	4629      	mov	r1, r5
 80016c4:	f7fe fd8e 	bl	80001e4 <__adddf3>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4610      	mov	r0, r2
 80016ce:	4619      	mov	r1, r3
 80016d0:	f7ff f950 	bl	8000974 <__aeabi_d2f>
 80016d4:	4603      	mov	r3, r0
 80016d6:	4a6e      	ldr	r2, [pc, #440]	; (8001890 <main+0x388>)
 80016d8:	6013      	str	r3, [r2, #0]
				  W2 = -Vx + Vy - 0.9*Omega;
 80016da:	4b6b      	ldr	r3, [pc, #428]	; (8001888 <main+0x380>)
 80016dc:	ed93 7a00 	vldr	s14, [r3]
 80016e0:	4b68      	ldr	r3, [pc, #416]	; (8001884 <main+0x37c>)
 80016e2:	edd3 7a00 	vldr	s15, [r3]
 80016e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016ea:	ee17 0a90 	vmov	r0, s15
 80016ee:	f7fe fed7 	bl	80004a0 <__aeabi_f2d>
 80016f2:	4604      	mov	r4, r0
 80016f4:	460d      	mov	r5, r1
 80016f6:	4b65      	ldr	r3, [pc, #404]	; (800188c <main+0x384>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7fe fed0 	bl	80004a0 <__aeabi_f2d>
 8001700:	a359      	add	r3, pc, #356	; (adr r3, 8001868 <main+0x360>)
 8001702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001706:	f7fe ff23 	bl	8000550 <__aeabi_dmul>
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	4620      	mov	r0, r4
 8001710:	4629      	mov	r1, r5
 8001712:	f7fe fd65 	bl	80001e0 <__aeabi_dsub>
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	4610      	mov	r0, r2
 800171c:	4619      	mov	r1, r3
 800171e:	f7ff f929 	bl	8000974 <__aeabi_d2f>
 8001722:	4603      	mov	r3, r0
 8001724:	4a5b      	ldr	r2, [pc, #364]	; (8001894 <main+0x38c>)
 8001726:	6013      	str	r3, [r2, #0]
				  W3 = -Vx + Vy + 0.9*Omega;
 8001728:	4b57      	ldr	r3, [pc, #348]	; (8001888 <main+0x380>)
 800172a:	ed93 7a00 	vldr	s14, [r3]
 800172e:	4b55      	ldr	r3, [pc, #340]	; (8001884 <main+0x37c>)
 8001730:	edd3 7a00 	vldr	s15, [r3]
 8001734:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001738:	ee17 0a90 	vmov	r0, s15
 800173c:	f7fe feb0 	bl	80004a0 <__aeabi_f2d>
 8001740:	4604      	mov	r4, r0
 8001742:	460d      	mov	r5, r1
 8001744:	4b51      	ldr	r3, [pc, #324]	; (800188c <main+0x384>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4618      	mov	r0, r3
 800174a:	f7fe fea9 	bl	80004a0 <__aeabi_f2d>
 800174e:	a346      	add	r3, pc, #280	; (adr r3, 8001868 <main+0x360>)
 8001750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001754:	f7fe fefc 	bl	8000550 <__aeabi_dmul>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	4620      	mov	r0, r4
 800175e:	4629      	mov	r1, r5
 8001760:	f7fe fd40 	bl	80001e4 <__adddf3>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	4610      	mov	r0, r2
 800176a:	4619      	mov	r1, r3
 800176c:	f7ff f902 	bl	8000974 <__aeabi_d2f>
 8001770:	4603      	mov	r3, r0
 8001772:	4a49      	ldr	r2, [pc, #292]	; (8001898 <main+0x390>)
 8001774:	6013      	str	r3, [r2, #0]
				  W4 = -Vx - Vy - 0.9*Omega;
 8001776:	4b43      	ldr	r3, [pc, #268]	; (8001884 <main+0x37c>)
 8001778:	edd3 7a00 	vldr	s15, [r3]
 800177c:	eeb1 7a67 	vneg.f32	s14, s15
 8001780:	4b41      	ldr	r3, [pc, #260]	; (8001888 <main+0x380>)
 8001782:	edd3 7a00 	vldr	s15, [r3]
 8001786:	ee77 7a67 	vsub.f32	s15, s14, s15
 800178a:	ee17 0a90 	vmov	r0, s15
 800178e:	f7fe fe87 	bl	80004a0 <__aeabi_f2d>
 8001792:	4604      	mov	r4, r0
 8001794:	460d      	mov	r5, r1
 8001796:	4b3d      	ldr	r3, [pc, #244]	; (800188c <main+0x384>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4618      	mov	r0, r3
 800179c:	f7fe fe80 	bl	80004a0 <__aeabi_f2d>
 80017a0:	a331      	add	r3, pc, #196	; (adr r3, 8001868 <main+0x360>)
 80017a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a6:	f7fe fed3 	bl	8000550 <__aeabi_dmul>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	4620      	mov	r0, r4
 80017b0:	4629      	mov	r1, r5
 80017b2:	f7fe fd15 	bl	80001e0 <__aeabi_dsub>
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	4610      	mov	r0, r2
 80017bc:	4619      	mov	r1, r3
 80017be:	f7ff f8d9 	bl	8000974 <__aeabi_d2f>
 80017c2:	4603      	mov	r3, r0
 80017c4:	4a35      	ldr	r2, [pc, #212]	; (800189c <main+0x394>)
 80017c6:	6013      	str	r3, [r2, #0]

		   /* MAP SPEED MOTOR */

				  if(W1 < -999)  W1 = -999;
 80017c8:	4b31      	ldr	r3, [pc, #196]	; (8001890 <main+0x388>)
 80017ca:	edd3 7a00 	vldr	s15, [r3]
 80017ce:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80018a0 <main+0x398>
 80017d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017da:	d502      	bpl.n	80017e2 <main+0x2da>
 80017dc:	4b2c      	ldr	r3, [pc, #176]	; (8001890 <main+0x388>)
 80017de:	4a31      	ldr	r2, [pc, #196]	; (80018a4 <main+0x39c>)
 80017e0:	601a      	str	r2, [r3, #0]
				  if(W1 >  999)  W1 =  999;
 80017e2:	4b2b      	ldr	r3, [pc, #172]	; (8001890 <main+0x388>)
 80017e4:	edd3 7a00 	vldr	s15, [r3]
 80017e8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80018a8 <main+0x3a0>
 80017ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f4:	dd02      	ble.n	80017fc <main+0x2f4>
 80017f6:	4b26      	ldr	r3, [pc, #152]	; (8001890 <main+0x388>)
 80017f8:	4a2c      	ldr	r2, [pc, #176]	; (80018ac <main+0x3a4>)
 80017fa:	601a      	str	r2, [r3, #0]

				  if(W2 < -999)  W2 = -999;
 80017fc:	4b25      	ldr	r3, [pc, #148]	; (8001894 <main+0x38c>)
 80017fe:	edd3 7a00 	vldr	s15, [r3]
 8001802:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80018a0 <main+0x398>
 8001806:	eef4 7ac7 	vcmpe.f32	s15, s14
 800180a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800180e:	d502      	bpl.n	8001816 <main+0x30e>
 8001810:	4b20      	ldr	r3, [pc, #128]	; (8001894 <main+0x38c>)
 8001812:	4a24      	ldr	r2, [pc, #144]	; (80018a4 <main+0x39c>)
 8001814:	601a      	str	r2, [r3, #0]
				  if(W2 >  999)  W2 =  999;
 8001816:	4b1f      	ldr	r3, [pc, #124]	; (8001894 <main+0x38c>)
 8001818:	edd3 7a00 	vldr	s15, [r3]
 800181c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80018a8 <main+0x3a0>
 8001820:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001828:	dd02      	ble.n	8001830 <main+0x328>
 800182a:	4b1a      	ldr	r3, [pc, #104]	; (8001894 <main+0x38c>)
 800182c:	4a1f      	ldr	r2, [pc, #124]	; (80018ac <main+0x3a4>)
 800182e:	601a      	str	r2, [r3, #0]

				  if(W3 < -999)  W3 = -999;
 8001830:	4b19      	ldr	r3, [pc, #100]	; (8001898 <main+0x390>)
 8001832:	edd3 7a00 	vldr	s15, [r3]
 8001836:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80018a0 <main+0x398>
 800183a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800183e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001842:	e035      	b.n	80018b0 <main+0x3a8>
 8001844:	f3af 8000 	nop.w
 8001848:	00000000 	.word	0x00000000
 800184c:	c08f3800 	.word	0xc08f3800
 8001850:	00000000 	.word	0x00000000
 8001854:	408f3800 	.word	0x408f3800
 8001858:	00000000 	.word	0x00000000
 800185c:	40700000 	.word	0x40700000
	...
 8001868:	cccccccd 	.word	0xcccccccd
 800186c:	3feccccc 	.word	0x3feccccc
 8001870:	20000000 	.word	0x20000000
 8001874:	20000710 	.word	0x20000710
 8001878:	20000864 	.word	0x20000864
 800187c:	200007d4 	.word	0x200007d4
 8001880:	20000038 	.word	0x20000038
 8001884:	20000708 	.word	0x20000708
 8001888:	20000718 	.word	0x20000718
 800188c:	20000050 	.word	0x20000050
 8001890:	20000700 	.word	0x20000700
 8001894:	2000070c 	.word	0x2000070c
 8001898:	200001e4 	.word	0x200001e4
 800189c:	20000704 	.word	0x20000704
 80018a0:	c479c000 	.word	0xc479c000
 80018a4:	c479c000 	.word	0xc479c000
 80018a8:	4479c000 	.word	0x4479c000
 80018ac:	4479c000 	.word	0x4479c000
 80018b0:	d502      	bpl.n	80018b8 <main+0x3b0>
 80018b2:	4bb9      	ldr	r3, [pc, #740]	; (8001b98 <main+0x690>)
 80018b4:	4ab9      	ldr	r2, [pc, #740]	; (8001b9c <main+0x694>)
 80018b6:	601a      	str	r2, [r3, #0]
				  if(W3 >  999)  W3 =  999;
 80018b8:	4bb7      	ldr	r3, [pc, #732]	; (8001b98 <main+0x690>)
 80018ba:	edd3 7a00 	vldr	s15, [r3]
 80018be:	ed9f 7ab8 	vldr	s14, [pc, #736]	; 8001ba0 <main+0x698>
 80018c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ca:	dd02      	ble.n	80018d2 <main+0x3ca>
 80018cc:	4bb2      	ldr	r3, [pc, #712]	; (8001b98 <main+0x690>)
 80018ce:	4ab5      	ldr	r2, [pc, #724]	; (8001ba4 <main+0x69c>)
 80018d0:	601a      	str	r2, [r3, #0]

				  if(W4 < -999)  W4 = -999;
 80018d2:	4bb5      	ldr	r3, [pc, #724]	; (8001ba8 <main+0x6a0>)
 80018d4:	edd3 7a00 	vldr	s15, [r3]
 80018d8:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 8001bac <main+0x6a4>
 80018dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e4:	d502      	bpl.n	80018ec <main+0x3e4>
 80018e6:	4bb0      	ldr	r3, [pc, #704]	; (8001ba8 <main+0x6a0>)
 80018e8:	4aac      	ldr	r2, [pc, #688]	; (8001b9c <main+0x694>)
 80018ea:	601a      	str	r2, [r3, #0]
				  if(W4 >  999)  W4 =  999;
 80018ec:	4bae      	ldr	r3, [pc, #696]	; (8001ba8 <main+0x6a0>)
 80018ee:	edd3 7a00 	vldr	s15, [r3]
 80018f2:	ed9f 7aab 	vldr	s14, [pc, #684]	; 8001ba0 <main+0x698>
 80018f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018fe:	dd02      	ble.n	8001906 <main+0x3fe>
 8001900:	4ba9      	ldr	r3, [pc, #676]	; (8001ba8 <main+0x6a0>)
 8001902:	4aa8      	ldr	r2, [pc, #672]	; (8001ba4 <main+0x69c>)
 8001904:	601a      	str	r2, [r3, #0]

			/* MOTOR 1 */

				  /* FORWARD */

					  if(W1 > 0 && W1 <= 999){
 8001906:	4baa      	ldr	r3, [pc, #680]	; (8001bb0 <main+0x6a8>)
 8001908:	edd3 7a00 	vldr	s15, [r3]
 800190c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001914:	dd17      	ble.n	8001946 <main+0x43e>
 8001916:	4ba6      	ldr	r3, [pc, #664]	; (8001bb0 <main+0x6a8>)
 8001918:	edd3 7a00 	vldr	s15, [r3]
 800191c:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 8001ba0 <main+0x698>
 8001920:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001928:	d80d      	bhi.n	8001946 <main+0x43e>
						  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, W1);
 800192a:	4ba1      	ldr	r3, [pc, #644]	; (8001bb0 <main+0x6a8>)
 800192c:	edd3 7a00 	vldr	s15, [r3]
 8001930:	4ba0      	ldr	r3, [pc, #640]	; (8001bb4 <main+0x6ac>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001938:	ee17 2a90 	vmov	r2, s15
 800193c:	635a      	str	r2, [r3, #52]	; 0x34
						  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 800193e:	4b9d      	ldr	r3, [pc, #628]	; (8001bb4 <main+0x6ac>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2200      	movs	r2, #0
 8001944:	639a      	str	r2, [r3, #56]	; 0x38
					  }

				  /* STOP */

					  if(W1 == 0){
 8001946:	4b9a      	ldr	r3, [pc, #616]	; (8001bb0 <main+0x6a8>)
 8001948:	edd3 7a00 	vldr	s15, [r3]
 800194c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001954:	d107      	bne.n	8001966 <main+0x45e>
						  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001956:	4b97      	ldr	r3, [pc, #604]	; (8001bb4 <main+0x6ac>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2200      	movs	r2, #0
 800195c:	635a      	str	r2, [r3, #52]	; 0x34
						  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 800195e:	4b95      	ldr	r3, [pc, #596]	; (8001bb4 <main+0x6ac>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2200      	movs	r2, #0
 8001964:	639a      	str	r2, [r3, #56]	; 0x38
					  }

				  /* BACKWARD */

					  if(W1 < 0 && W1 >= -999){
 8001966:	4b92      	ldr	r3, [pc, #584]	; (8001bb0 <main+0x6a8>)
 8001968:	edd3 7a00 	vldr	s15, [r3]
 800196c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001974:	d519      	bpl.n	80019aa <main+0x4a2>
 8001976:	4b8e      	ldr	r3, [pc, #568]	; (8001bb0 <main+0x6a8>)
 8001978:	edd3 7a00 	vldr	s15, [r3]
 800197c:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8001bac <main+0x6a4>
 8001980:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001988:	db0f      	blt.n	80019aa <main+0x4a2>
						  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 800198a:	4b8a      	ldr	r3, [pc, #552]	; (8001bb4 <main+0x6ac>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2200      	movs	r2, #0
 8001990:	635a      	str	r2, [r3, #52]	; 0x34
						  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, (-1)*W1);
 8001992:	4b87      	ldr	r3, [pc, #540]	; (8001bb0 <main+0x6a8>)
 8001994:	edd3 7a00 	vldr	s15, [r3]
 8001998:	eef1 7a67 	vneg.f32	s15, s15
 800199c:	4b85      	ldr	r3, [pc, #532]	; (8001bb4 <main+0x6ac>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019a4:	ee17 2a90 	vmov	r2, s15
 80019a8:	639a      	str	r2, [r3, #56]	; 0x38

			/* MOTOR 2 */

				  /* FORWARD */

					  if(W2> 0 && W2<= 999){
 80019aa:	4b83      	ldr	r3, [pc, #524]	; (8001bb8 <main+0x6b0>)
 80019ac:	edd3 7a00 	vldr	s15, [r3]
 80019b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b8:	dd17      	ble.n	80019ea <main+0x4e2>
 80019ba:	4b7f      	ldr	r3, [pc, #508]	; (8001bb8 <main+0x6b0>)
 80019bc:	edd3 7a00 	vldr	s15, [r3]
 80019c0:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8001ba0 <main+0x698>
 80019c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019cc:	d80d      	bhi.n	80019ea <main+0x4e2>
						  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 80019ce:	4b79      	ldr	r3, [pc, #484]	; (8001bb4 <main+0x6ac>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2200      	movs	r2, #0
 80019d4:	63da      	str	r2, [r3, #60]	; 0x3c
						  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, W2);
 80019d6:	4b78      	ldr	r3, [pc, #480]	; (8001bb8 <main+0x6b0>)
 80019d8:	edd3 7a00 	vldr	s15, [r3]
 80019dc:	4b75      	ldr	r3, [pc, #468]	; (8001bb4 <main+0x6ac>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019e4:	ee17 2a90 	vmov	r2, s15
 80019e8:	641a      	str	r2, [r3, #64]	; 0x40
					  }

				  /* STOP */

					  if(W2 == 0){
 80019ea:	4b73      	ldr	r3, [pc, #460]	; (8001bb8 <main+0x6b0>)
 80019ec:	edd3 7a00 	vldr	s15, [r3]
 80019f0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80019f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f8:	d107      	bne.n	8001a0a <main+0x502>
						  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 80019fa:	4b6e      	ldr	r3, [pc, #440]	; (8001bb4 <main+0x6ac>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2200      	movs	r2, #0
 8001a00:	63da      	str	r2, [r3, #60]	; 0x3c
						  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 8001a02:	4b6c      	ldr	r3, [pc, #432]	; (8001bb4 <main+0x6ac>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2200      	movs	r2, #0
 8001a08:	641a      	str	r2, [r3, #64]	; 0x40
					  }

				  /* BACKWARD */

					  if(W2 < 0 && W2 >= -999){
 8001a0a:	4b6b      	ldr	r3, [pc, #428]	; (8001bb8 <main+0x6b0>)
 8001a0c:	edd3 7a00 	vldr	s15, [r3]
 8001a10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a18:	d519      	bpl.n	8001a4e <main+0x546>
 8001a1a:	4b67      	ldr	r3, [pc, #412]	; (8001bb8 <main+0x6b0>)
 8001a1c:	edd3 7a00 	vldr	s15, [r3]
 8001a20:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8001bac <main+0x6a4>
 8001a24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a2c:	db0f      	blt.n	8001a4e <main+0x546>
						  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, (-1)*W2);
 8001a2e:	4b62      	ldr	r3, [pc, #392]	; (8001bb8 <main+0x6b0>)
 8001a30:	edd3 7a00 	vldr	s15, [r3]
 8001a34:	eef1 7a67 	vneg.f32	s15, s15
 8001a38:	4b5e      	ldr	r3, [pc, #376]	; (8001bb4 <main+0x6ac>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a40:	ee17 2a90 	vmov	r2, s15
 8001a44:	63da      	str	r2, [r3, #60]	; 0x3c
						  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 8001a46:	4b5b      	ldr	r3, [pc, #364]	; (8001bb4 <main+0x6ac>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	641a      	str	r2, [r3, #64]	; 0x40

			/* MOTOR 3 */

				  /* FORWARD */

					  if(W3> 0 && W3<= 999){
 8001a4e:	4b52      	ldr	r3, [pc, #328]	; (8001b98 <main+0x690>)
 8001a50:	edd3 7a00 	vldr	s15, [r3]
 8001a54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a5c:	dd17      	ble.n	8001a8e <main+0x586>
 8001a5e:	4b4e      	ldr	r3, [pc, #312]	; (8001b98 <main+0x690>)
 8001a60:	edd3 7a00 	vldr	s15, [r3]
 8001a64:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8001ba0 <main+0x698>
 8001a68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a70:	d80d      	bhi.n	8001a8e <main+0x586>
						  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, W3);
 8001a72:	4b49      	ldr	r3, [pc, #292]	; (8001b98 <main+0x690>)
 8001a74:	edd3 7a00 	vldr	s15, [r3]
 8001a78:	4b50      	ldr	r3, [pc, #320]	; (8001bbc <main+0x6b4>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a80:	ee17 2a90 	vmov	r2, s15
 8001a84:	635a      	str	r2, [r3, #52]	; 0x34
						  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8001a86:	4b4d      	ldr	r3, [pc, #308]	; (8001bbc <main+0x6b4>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	639a      	str	r2, [r3, #56]	; 0x38
					  }

				  /* STOP */

					  if(W3 == 0){
 8001a8e:	4b42      	ldr	r3, [pc, #264]	; (8001b98 <main+0x690>)
 8001a90:	edd3 7a00 	vldr	s15, [r3]
 8001a94:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a9c:	d107      	bne.n	8001aae <main+0x5a6>
						  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001a9e:	4b47      	ldr	r3, [pc, #284]	; (8001bbc <main+0x6b4>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	635a      	str	r2, [r3, #52]	; 0x34
						  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8001aa6:	4b45      	ldr	r3, [pc, #276]	; (8001bbc <main+0x6b4>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	639a      	str	r2, [r3, #56]	; 0x38
					  }

				  /* BACKWARD */

					  if(W3 < 0 && W3 >= -999){
 8001aae:	4b3a      	ldr	r3, [pc, #232]	; (8001b98 <main+0x690>)
 8001ab0:	edd3 7a00 	vldr	s15, [r3]
 8001ab4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001abc:	d519      	bpl.n	8001af2 <main+0x5ea>
 8001abe:	4b36      	ldr	r3, [pc, #216]	; (8001b98 <main+0x690>)
 8001ac0:	edd3 7a00 	vldr	s15, [r3]
 8001ac4:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8001bac <main+0x6a4>
 8001ac8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad0:	db0f      	blt.n	8001af2 <main+0x5ea>
						  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001ad2:	4b3a      	ldr	r3, [pc, #232]	; (8001bbc <main+0x6b4>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	635a      	str	r2, [r3, #52]	; 0x34
						  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, (-1)*W3);
 8001ada:	4b2f      	ldr	r3, [pc, #188]	; (8001b98 <main+0x690>)
 8001adc:	edd3 7a00 	vldr	s15, [r3]
 8001ae0:	eef1 7a67 	vneg.f32	s15, s15
 8001ae4:	4b35      	ldr	r3, [pc, #212]	; (8001bbc <main+0x6b4>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001aec:	ee17 2a90 	vmov	r2, s15
 8001af0:	639a      	str	r2, [r3, #56]	; 0x38

			 /* MOTOR 4 */

				  /* FORWARD */

					  if(W4> 0 && W4<= 999){
 8001af2:	4b2d      	ldr	r3, [pc, #180]	; (8001ba8 <main+0x6a0>)
 8001af4:	edd3 7a00 	vldr	s15, [r3]
 8001af8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b00:	dd17      	ble.n	8001b32 <main+0x62a>
 8001b02:	4b29      	ldr	r3, [pc, #164]	; (8001ba8 <main+0x6a0>)
 8001b04:	edd3 7a00 	vldr	s15, [r3]
 8001b08:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001ba0 <main+0x698>
 8001b0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b14:	d80d      	bhi.n	8001b32 <main+0x62a>
						  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, W4);
 8001b16:	4b24      	ldr	r3, [pc, #144]	; (8001ba8 <main+0x6a0>)
 8001b18:	edd3 7a00 	vldr	s15, [r3]
 8001b1c:	4b27      	ldr	r3, [pc, #156]	; (8001bbc <main+0x6b4>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b24:	ee17 2a90 	vmov	r2, s15
 8001b28:	63da      	str	r2, [r3, #60]	; 0x3c
						  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 8001b2a:	4b24      	ldr	r3, [pc, #144]	; (8001bbc <main+0x6b4>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	641a      	str	r2, [r3, #64]	; 0x40
					  }

				  /* STOP */

					  if(W4 == 0){
 8001b32:	4b1d      	ldr	r3, [pc, #116]	; (8001ba8 <main+0x6a0>)
 8001b34:	edd3 7a00 	vldr	s15, [r3]
 8001b38:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b40:	d107      	bne.n	8001b52 <main+0x64a>
						  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8001b42:	4b1e      	ldr	r3, [pc, #120]	; (8001bbc <main+0x6b4>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2200      	movs	r2, #0
 8001b48:	63da      	str	r2, [r3, #60]	; 0x3c
						  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 8001b4a:	4b1c      	ldr	r3, [pc, #112]	; (8001bbc <main+0x6b4>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	641a      	str	r2, [r3, #64]	; 0x40
					  }

				  /* BACKWARD */

					  if(W4 < 0 && W4 >= -999){
 8001b52:	4b15      	ldr	r3, [pc, #84]	; (8001ba8 <main+0x6a0>)
 8001b54:	edd3 7a00 	vldr	s15, [r3]
 8001b58:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b60:	d52f      	bpl.n	8001bc2 <main+0x6ba>
 8001b62:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <main+0x6a0>)
 8001b64:	edd3 7a00 	vldr	s15, [r3]
 8001b68:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001bac <main+0x6a4>
 8001b6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b74:	db25      	blt.n	8001bc2 <main+0x6ba>
						  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8001b76:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <main+0x6b4>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	63da      	str	r2, [r3, #60]	; 0x3c
						  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, (-1)*W4);
 8001b7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ba8 <main+0x6a0>)
 8001b80:	edd3 7a00 	vldr	s15, [r3]
 8001b84:	eef1 7a67 	vneg.f32	s15, s15
 8001b88:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <main+0x6b4>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b90:	ee17 2a90 	vmov	r2, s15
 8001b94:	e014      	b.n	8001bc0 <main+0x6b8>
 8001b96:	bf00      	nop
 8001b98:	200001e4 	.word	0x200001e4
 8001b9c:	c479c000 	.word	0xc479c000
 8001ba0:	4479c000 	.word	0x4479c000
 8001ba4:	4479c000 	.word	0x4479c000
 8001ba8:	20000704 	.word	0x20000704
 8001bac:	c479c000 	.word	0xc479c000
 8001bb0:	20000700 	.word	0x20000700
 8001bb4:	20000864 	.word	0x20000864
 8001bb8:	2000070c 	.word	0x2000070c
 8001bbc:	200007d4 	.word	0x200007d4
 8001bc0:	641a      	str	r2, [r3, #64]	; 0x40
					  }

		    /* RGB */

			  if(HAL_GetTick() - last_time >= 30 ){
 8001bc2:	f000 fe71 	bl	80028a8 <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	4b44      	ldr	r3, [pc, #272]	; (8001cdc <main+0x7d4>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b1d      	cmp	r3, #29
 8001bd0:	f240 80a7 	bls.w	8001d22 <main+0x81a>
				last_time = HAL_GetTick();
 8001bd4:	f000 fe68 	bl	80028a8 <HAL_GetTick>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	4a40      	ldr	r2, [pc, #256]	; (8001cdc <main+0x7d4>)
 8001bdc:	6013      	str	r3, [r2, #0]

				if (RGB_state == 0){
 8001bde:	4b40      	ldr	r3, [pc, #256]	; (8001ce0 <main+0x7d8>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d116      	bne.n	8001c14 <main+0x70c>
					RGB_Red = RGB_Brightness;
 8001be6:	4b3f      	ldr	r3, [pc, #252]	; (8001ce4 <main+0x7dc>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a3f      	ldr	r2, [pc, #252]	; (8001ce8 <main+0x7e0>)
 8001bec:	6013      	str	r3, [r2, #0]
					RGB_Green ++;
 8001bee:	4b3f      	ldr	r3, [pc, #252]	; (8001cec <main+0x7e4>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	4a3d      	ldr	r2, [pc, #244]	; (8001cec <main+0x7e4>)
 8001bf6:	6013      	str	r3, [r2, #0]
					RGB_Blue = 0;
 8001bf8:	4b3d      	ldr	r3, [pc, #244]	; (8001cf0 <main+0x7e8>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
					if(RGB_Green >= RGB_Brightness){
 8001bfe:	4b3b      	ldr	r3, [pc, #236]	; (8001cec <main+0x7e4>)
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	4b38      	ldr	r3, [pc, #224]	; (8001ce4 <main+0x7dc>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	f2c0 808b 	blt.w	8001d22 <main+0x81a>
						RGB_state = 1;
 8001c0c:	4b34      	ldr	r3, [pc, #208]	; (8001ce0 <main+0x7d8>)
 8001c0e:	2201      	movs	r2, #1
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	e086      	b.n	8001d22 <main+0x81a>
					}
				}
				else if (RGB_state == 1){
 8001c14:	4b32      	ldr	r3, [pc, #200]	; (8001ce0 <main+0x7d8>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d113      	bne.n	8001c44 <main+0x73c>
					RGB_Red --;
 8001c1c:	4b32      	ldr	r3, [pc, #200]	; (8001ce8 <main+0x7e0>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	3b01      	subs	r3, #1
 8001c22:	4a31      	ldr	r2, [pc, #196]	; (8001ce8 <main+0x7e0>)
 8001c24:	6013      	str	r3, [r2, #0]
					RGB_Green = RGB_Brightness;
 8001c26:	4b2f      	ldr	r3, [pc, #188]	; (8001ce4 <main+0x7dc>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a30      	ldr	r2, [pc, #192]	; (8001cec <main+0x7e4>)
 8001c2c:	6013      	str	r3, [r2, #0]
					RGB_Blue = 0;
 8001c2e:	4b30      	ldr	r3, [pc, #192]	; (8001cf0 <main+0x7e8>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
					if(RGB_Red <= 0){
 8001c34:	4b2c      	ldr	r3, [pc, #176]	; (8001ce8 <main+0x7e0>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	dc72      	bgt.n	8001d22 <main+0x81a>
						RGB_state = 2;
 8001c3c:	4b28      	ldr	r3, [pc, #160]	; (8001ce0 <main+0x7d8>)
 8001c3e:	2202      	movs	r2, #2
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	e06e      	b.n	8001d22 <main+0x81a>
					}
				}
				else if (RGB_state == 2){
 8001c44:	4b26      	ldr	r3, [pc, #152]	; (8001ce0 <main+0x7d8>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d115      	bne.n	8001c78 <main+0x770>
					RGB_Red = 0;
 8001c4c:	4b26      	ldr	r3, [pc, #152]	; (8001ce8 <main+0x7e0>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
					RGB_Green = RGB_Brightness;
 8001c52:	4b24      	ldr	r3, [pc, #144]	; (8001ce4 <main+0x7dc>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a25      	ldr	r2, [pc, #148]	; (8001cec <main+0x7e4>)
 8001c58:	6013      	str	r3, [r2, #0]
					RGB_Blue ++;
 8001c5a:	4b25      	ldr	r3, [pc, #148]	; (8001cf0 <main+0x7e8>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	4a23      	ldr	r2, [pc, #140]	; (8001cf0 <main+0x7e8>)
 8001c62:	6013      	str	r3, [r2, #0]
					if(RGB_Blue >= RGB_Brightness){
 8001c64:	4b22      	ldr	r3, [pc, #136]	; (8001cf0 <main+0x7e8>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	4b1e      	ldr	r3, [pc, #120]	; (8001ce4 <main+0x7dc>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	db58      	blt.n	8001d22 <main+0x81a>
						RGB_state = 3;
 8001c70:	4b1b      	ldr	r3, [pc, #108]	; (8001ce0 <main+0x7d8>)
 8001c72:	2203      	movs	r2, #3
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	e054      	b.n	8001d22 <main+0x81a>
					}
				}
				else if (RGB_state == 3){
 8001c78:	4b19      	ldr	r3, [pc, #100]	; (8001ce0 <main+0x7d8>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2b03      	cmp	r3, #3
 8001c7e:	d113      	bne.n	8001ca8 <main+0x7a0>
					RGB_Red = 0;
 8001c80:	4b19      	ldr	r3, [pc, #100]	; (8001ce8 <main+0x7e0>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
					RGB_Green --;
 8001c86:	4b19      	ldr	r3, [pc, #100]	; (8001cec <main+0x7e4>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	4a17      	ldr	r2, [pc, #92]	; (8001cec <main+0x7e4>)
 8001c8e:	6013      	str	r3, [r2, #0]
					RGB_Blue = RGB_Brightness;
 8001c90:	4b14      	ldr	r3, [pc, #80]	; (8001ce4 <main+0x7dc>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a16      	ldr	r2, [pc, #88]	; (8001cf0 <main+0x7e8>)
 8001c96:	6013      	str	r3, [r2, #0]
					if(RGB_Green <= 0){
 8001c98:	4b14      	ldr	r3, [pc, #80]	; (8001cec <main+0x7e4>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	dc40      	bgt.n	8001d22 <main+0x81a>
						RGB_state = 4;
 8001ca0:	4b0f      	ldr	r3, [pc, #60]	; (8001ce0 <main+0x7d8>)
 8001ca2:	2204      	movs	r2, #4
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	e03c      	b.n	8001d22 <main+0x81a>
					}
				}
				else if (RGB_state == 4){
 8001ca8:	4b0d      	ldr	r3, [pc, #52]	; (8001ce0 <main+0x7d8>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2b04      	cmp	r3, #4
 8001cae:	d121      	bne.n	8001cf4 <main+0x7ec>
					RGB_Red ++;
 8001cb0:	4b0d      	ldr	r3, [pc, #52]	; (8001ce8 <main+0x7e0>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	4a0c      	ldr	r2, [pc, #48]	; (8001ce8 <main+0x7e0>)
 8001cb8:	6013      	str	r3, [r2, #0]
					RGB_Green = 0;
 8001cba:	4b0c      	ldr	r3, [pc, #48]	; (8001cec <main+0x7e4>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
					RGB_Blue = RGB_Brightness;
 8001cc0:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <main+0x7dc>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a0a      	ldr	r2, [pc, #40]	; (8001cf0 <main+0x7e8>)
 8001cc6:	6013      	str	r3, [r2, #0]
					if(RGB_Red >= RGB_Brightness){
 8001cc8:	4b07      	ldr	r3, [pc, #28]	; (8001ce8 <main+0x7e0>)
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	4b05      	ldr	r3, [pc, #20]	; (8001ce4 <main+0x7dc>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	db26      	blt.n	8001d22 <main+0x81a>
						RGB_state = 5;
 8001cd4:	4b02      	ldr	r3, [pc, #8]	; (8001ce0 <main+0x7d8>)
 8001cd6:	2205      	movs	r2, #5
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	e022      	b.n	8001d22 <main+0x81a>
 8001cdc:	2000003c 	.word	0x2000003c
 8001ce0:	2000004c 	.word	0x2000004c
 8001ce4:	2000000c 	.word	0x2000000c
 8001ce8:	20000008 	.word	0x20000008
 8001cec:	20000048 	.word	0x20000048
 8001cf0:	20000044 	.word	0x20000044
					}	  	}
				else if (RGB_state == 5){
 8001cf4:	4b79      	ldr	r3, [pc, #484]	; (8001edc <main+0x9d4>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2b05      	cmp	r3, #5
 8001cfa:	d112      	bne.n	8001d22 <main+0x81a>
					RGB_Red = RGB_Brightness;
 8001cfc:	4b78      	ldr	r3, [pc, #480]	; (8001ee0 <main+0x9d8>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a78      	ldr	r2, [pc, #480]	; (8001ee4 <main+0x9dc>)
 8001d02:	6013      	str	r3, [r2, #0]
					RGB_Green = 0;
 8001d04:	4b78      	ldr	r3, [pc, #480]	; (8001ee8 <main+0x9e0>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
					RGB_Blue --;
 8001d0a:	4b78      	ldr	r3, [pc, #480]	; (8001eec <main+0x9e4>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	4a76      	ldr	r2, [pc, #472]	; (8001eec <main+0x9e4>)
 8001d12:	6013      	str	r3, [r2, #0]
					if(RGB_Blue <= 0){
 8001d14:	4b75      	ldr	r3, [pc, #468]	; (8001eec <main+0x9e4>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	dc02      	bgt.n	8001d22 <main+0x81a>
						RGB_state = 0;
 8001d1c:	4b6f      	ldr	r3, [pc, #444]	; (8001edc <main+0x9d4>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]
				}

		/* RGB */

			  }
				Set_LED(0,   RGB_Red, RGB_Green, RGB_Blue);
 8001d22:	4b70      	ldr	r3, [pc, #448]	; (8001ee4 <main+0x9dc>)
 8001d24:	6819      	ldr	r1, [r3, #0]
 8001d26:	4b70      	ldr	r3, [pc, #448]	; (8001ee8 <main+0x9e0>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	4b70      	ldr	r3, [pc, #448]	; (8001eec <main+0x9e4>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2000      	movs	r0, #0
 8001d30:	f7ff fab6 	bl	80012a0 <Set_LED>
				Set_LED(1,   RGB_Red, RGB_Green, RGB_Blue);
 8001d34:	4b6b      	ldr	r3, [pc, #428]	; (8001ee4 <main+0x9dc>)
 8001d36:	6819      	ldr	r1, [r3, #0]
 8001d38:	4b6b      	ldr	r3, [pc, #428]	; (8001ee8 <main+0x9e0>)
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	4b6b      	ldr	r3, [pc, #428]	; (8001eec <main+0x9e4>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2001      	movs	r0, #1
 8001d42:	f7ff faad 	bl	80012a0 <Set_LED>
				Set_LED(2,   RGB_Red, RGB_Green, RGB_Blue);
 8001d46:	4b67      	ldr	r3, [pc, #412]	; (8001ee4 <main+0x9dc>)
 8001d48:	6819      	ldr	r1, [r3, #0]
 8001d4a:	4b67      	ldr	r3, [pc, #412]	; (8001ee8 <main+0x9e0>)
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	4b67      	ldr	r3, [pc, #412]	; (8001eec <main+0x9e4>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2002      	movs	r0, #2
 8001d54:	f7ff faa4 	bl	80012a0 <Set_LED>
				Set_LED(3,   RGB_Red, RGB_Green, RGB_Blue);
 8001d58:	4b62      	ldr	r3, [pc, #392]	; (8001ee4 <main+0x9dc>)
 8001d5a:	6819      	ldr	r1, [r3, #0]
 8001d5c:	4b62      	ldr	r3, [pc, #392]	; (8001ee8 <main+0x9e0>)
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	4b62      	ldr	r3, [pc, #392]	; (8001eec <main+0x9e4>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2003      	movs	r0, #3
 8001d66:	f7ff fa9b 	bl	80012a0 <Set_LED>
				Set_LED(4,   RGB_Red, RGB_Green, RGB_Blue);
 8001d6a:	4b5e      	ldr	r3, [pc, #376]	; (8001ee4 <main+0x9dc>)
 8001d6c:	6819      	ldr	r1, [r3, #0]
 8001d6e:	4b5e      	ldr	r3, [pc, #376]	; (8001ee8 <main+0x9e0>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	4b5e      	ldr	r3, [pc, #376]	; (8001eec <main+0x9e4>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2004      	movs	r0, #4
 8001d78:	f7ff fa92 	bl	80012a0 <Set_LED>
				Set_LED(5,   RGB_Red, RGB_Green, RGB_Blue);
 8001d7c:	4b59      	ldr	r3, [pc, #356]	; (8001ee4 <main+0x9dc>)
 8001d7e:	6819      	ldr	r1, [r3, #0]
 8001d80:	4b59      	ldr	r3, [pc, #356]	; (8001ee8 <main+0x9e0>)
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	4b59      	ldr	r3, [pc, #356]	; (8001eec <main+0x9e4>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2005      	movs	r0, #5
 8001d8a:	f7ff fa89 	bl	80012a0 <Set_LED>
				Set_LED(6,   RGB_Red, RGB_Green, RGB_Blue);
 8001d8e:	4b55      	ldr	r3, [pc, #340]	; (8001ee4 <main+0x9dc>)
 8001d90:	6819      	ldr	r1, [r3, #0]
 8001d92:	4b55      	ldr	r3, [pc, #340]	; (8001ee8 <main+0x9e0>)
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	4b55      	ldr	r3, [pc, #340]	; (8001eec <main+0x9e4>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2006      	movs	r0, #6
 8001d9c:	f7ff fa80 	bl	80012a0 <Set_LED>
				Set_LED(7,   RGB_Red, RGB_Green, RGB_Blue);
 8001da0:	4b50      	ldr	r3, [pc, #320]	; (8001ee4 <main+0x9dc>)
 8001da2:	6819      	ldr	r1, [r3, #0]
 8001da4:	4b50      	ldr	r3, [pc, #320]	; (8001ee8 <main+0x9e0>)
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	4b50      	ldr	r3, [pc, #320]	; (8001eec <main+0x9e4>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2007      	movs	r0, #7
 8001dae:	f7ff fa77 	bl	80012a0 <Set_LED>
				Set_LED(8,   RGB_Red, RGB_Green, RGB_Blue);
 8001db2:	4b4c      	ldr	r3, [pc, #304]	; (8001ee4 <main+0x9dc>)
 8001db4:	6819      	ldr	r1, [r3, #0]
 8001db6:	4b4c      	ldr	r3, [pc, #304]	; (8001ee8 <main+0x9e0>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	4b4c      	ldr	r3, [pc, #304]	; (8001eec <main+0x9e4>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2008      	movs	r0, #8
 8001dc0:	f7ff fa6e 	bl	80012a0 <Set_LED>
				Set_LED(9,   RGB_Red, RGB_Green, RGB_Blue);
 8001dc4:	4b47      	ldr	r3, [pc, #284]	; (8001ee4 <main+0x9dc>)
 8001dc6:	6819      	ldr	r1, [r3, #0]
 8001dc8:	4b47      	ldr	r3, [pc, #284]	; (8001ee8 <main+0x9e0>)
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	4b47      	ldr	r3, [pc, #284]	; (8001eec <main+0x9e4>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2009      	movs	r0, #9
 8001dd2:	f7ff fa65 	bl	80012a0 <Set_LED>
				Set_LED(10,  RGB_Red, RGB_Green, RGB_Blue);
 8001dd6:	4b43      	ldr	r3, [pc, #268]	; (8001ee4 <main+0x9dc>)
 8001dd8:	6819      	ldr	r1, [r3, #0]
 8001dda:	4b43      	ldr	r3, [pc, #268]	; (8001ee8 <main+0x9e0>)
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	4b43      	ldr	r3, [pc, #268]	; (8001eec <main+0x9e4>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	200a      	movs	r0, #10
 8001de4:	f7ff fa5c 	bl	80012a0 <Set_LED>
				Set_LED(11,  RGB_Red, RGB_Green, RGB_Blue);
 8001de8:	4b3e      	ldr	r3, [pc, #248]	; (8001ee4 <main+0x9dc>)
 8001dea:	6819      	ldr	r1, [r3, #0]
 8001dec:	4b3e      	ldr	r3, [pc, #248]	; (8001ee8 <main+0x9e0>)
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	4b3e      	ldr	r3, [pc, #248]	; (8001eec <main+0x9e4>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	200b      	movs	r0, #11
 8001df6:	f7ff fa53 	bl	80012a0 <Set_LED>
				Set_LED(12,  RGB_Red, RGB_Green, RGB_Blue);
 8001dfa:	4b3a      	ldr	r3, [pc, #232]	; (8001ee4 <main+0x9dc>)
 8001dfc:	6819      	ldr	r1, [r3, #0]
 8001dfe:	4b3a      	ldr	r3, [pc, #232]	; (8001ee8 <main+0x9e0>)
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	4b3a      	ldr	r3, [pc, #232]	; (8001eec <main+0x9e4>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	200c      	movs	r0, #12
 8001e08:	f7ff fa4a 	bl	80012a0 <Set_LED>
				Set_LED(13,  RGB_Red, RGB_Green, RGB_Blue);
 8001e0c:	4b35      	ldr	r3, [pc, #212]	; (8001ee4 <main+0x9dc>)
 8001e0e:	6819      	ldr	r1, [r3, #0]
 8001e10:	4b35      	ldr	r3, [pc, #212]	; (8001ee8 <main+0x9e0>)
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	4b35      	ldr	r3, [pc, #212]	; (8001eec <main+0x9e4>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	200d      	movs	r0, #13
 8001e1a:	f7ff fa41 	bl	80012a0 <Set_LED>
				Set_LED(14,  RGB_Red, RGB_Green, RGB_Blue);
 8001e1e:	4b31      	ldr	r3, [pc, #196]	; (8001ee4 <main+0x9dc>)
 8001e20:	6819      	ldr	r1, [r3, #0]
 8001e22:	4b31      	ldr	r3, [pc, #196]	; (8001ee8 <main+0x9e0>)
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	4b31      	ldr	r3, [pc, #196]	; (8001eec <main+0x9e4>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	200e      	movs	r0, #14
 8001e2c:	f7ff fa38 	bl	80012a0 <Set_LED>
				Set_LED(15,  RGB_Red, RGB_Green, RGB_Blue);
 8001e30:	4b2c      	ldr	r3, [pc, #176]	; (8001ee4 <main+0x9dc>)
 8001e32:	6819      	ldr	r1, [r3, #0]
 8001e34:	4b2c      	ldr	r3, [pc, #176]	; (8001ee8 <main+0x9e0>)
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	4b2c      	ldr	r3, [pc, #176]	; (8001eec <main+0x9e4>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	200f      	movs	r0, #15
 8001e3e:	f7ff fa2f 	bl	80012a0 <Set_LED>
				Set_LED(16,  RGB_Red, RGB_Green, RGB_Blue);
 8001e42:	4b28      	ldr	r3, [pc, #160]	; (8001ee4 <main+0x9dc>)
 8001e44:	6819      	ldr	r1, [r3, #0]
 8001e46:	4b28      	ldr	r3, [pc, #160]	; (8001ee8 <main+0x9e0>)
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	4b28      	ldr	r3, [pc, #160]	; (8001eec <main+0x9e4>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2010      	movs	r0, #16
 8001e50:	f7ff fa26 	bl	80012a0 <Set_LED>
				Set_LED(17,  RGB_Red, RGB_Green, RGB_Blue);
 8001e54:	4b23      	ldr	r3, [pc, #140]	; (8001ee4 <main+0x9dc>)
 8001e56:	6819      	ldr	r1, [r3, #0]
 8001e58:	4b23      	ldr	r3, [pc, #140]	; (8001ee8 <main+0x9e0>)
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	4b23      	ldr	r3, [pc, #140]	; (8001eec <main+0x9e4>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2011      	movs	r0, #17
 8001e62:	f7ff fa1d 	bl	80012a0 <Set_LED>
				Set_LED(18,  RGB_Red, RGB_Green, RGB_Blue);
 8001e66:	4b1f      	ldr	r3, [pc, #124]	; (8001ee4 <main+0x9dc>)
 8001e68:	6819      	ldr	r1, [r3, #0]
 8001e6a:	4b1f      	ldr	r3, [pc, #124]	; (8001ee8 <main+0x9e0>)
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	4b1f      	ldr	r3, [pc, #124]	; (8001eec <main+0x9e4>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2012      	movs	r0, #18
 8001e74:	f7ff fa14 	bl	80012a0 <Set_LED>
				Set_LED(20,  RGB_Red, RGB_Green, RGB_Blue);
 8001e78:	4b1a      	ldr	r3, [pc, #104]	; (8001ee4 <main+0x9dc>)
 8001e7a:	6819      	ldr	r1, [r3, #0]
 8001e7c:	4b1a      	ldr	r3, [pc, #104]	; (8001ee8 <main+0x9e0>)
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	4b1a      	ldr	r3, [pc, #104]	; (8001eec <main+0x9e4>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2014      	movs	r0, #20
 8001e86:	f7ff fa0b 	bl	80012a0 <Set_LED>
				Set_LED(21,  RGB_Red, RGB_Green, RGB_Blue);
 8001e8a:	4b16      	ldr	r3, [pc, #88]	; (8001ee4 <main+0x9dc>)
 8001e8c:	6819      	ldr	r1, [r3, #0]
 8001e8e:	4b16      	ldr	r3, [pc, #88]	; (8001ee8 <main+0x9e0>)
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	4b16      	ldr	r3, [pc, #88]	; (8001eec <main+0x9e4>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2015      	movs	r0, #21
 8001e98:	f7ff fa02 	bl	80012a0 <Set_LED>
				Set_LED(22,  RGB_Red, RGB_Green, RGB_Blue);
 8001e9c:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <main+0x9dc>)
 8001e9e:	6819      	ldr	r1, [r3, #0]
 8001ea0:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <main+0x9e0>)
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	4b11      	ldr	r3, [pc, #68]	; (8001eec <main+0x9e4>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2016      	movs	r0, #22
 8001eaa:	f7ff f9f9 	bl	80012a0 <Set_LED>
				Set_LED(23,  RGB_Red, RGB_Green, RGB_Blue);
 8001eae:	4b0d      	ldr	r3, [pc, #52]	; (8001ee4 <main+0x9dc>)
 8001eb0:	6819      	ldr	r1, [r3, #0]
 8001eb2:	4b0d      	ldr	r3, [pc, #52]	; (8001ee8 <main+0x9e0>)
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	4b0d      	ldr	r3, [pc, #52]	; (8001eec <main+0x9e4>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2017      	movs	r0, #23
 8001ebc:	f7ff f9f0 	bl	80012a0 <Set_LED>
				Set_LED(25,  RGB_Red, RGB_Green, RGB_Blue);
 8001ec0:	4b08      	ldr	r3, [pc, #32]	; (8001ee4 <main+0x9dc>)
 8001ec2:	6819      	ldr	r1, [r3, #0]
 8001ec4:	4b08      	ldr	r3, [pc, #32]	; (8001ee8 <main+0x9e0>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	4b08      	ldr	r3, [pc, #32]	; (8001eec <main+0x9e4>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2019      	movs	r0, #25
 8001ece:	f7ff f9e7 	bl	80012a0 <Set_LED>

				WS2812_Send();
 8001ed2:	f7ff fa13 	bl	80012fc <WS2812_Send>
			  if(DataReady(1)>0){
 8001ed6:	f7ff bb6a 	b.w	80015ae <main+0xa6>
 8001eda:	bf00      	nop
 8001edc:	2000004c 	.word	0x2000004c
 8001ee0:	2000000c 	.word	0x2000000c
 8001ee4:	20000008 	.word	0x20000008
 8001ee8:	20000048 	.word	0x20000048
 8001eec:	20000044 	.word	0x20000044

08001ef0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b094      	sub	sp, #80	; 0x50
 8001ef4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ef6:	f107 0320 	add.w	r3, r7, #32
 8001efa:	2230      	movs	r2, #48	; 0x30
 8001efc:	2100      	movs	r1, #0
 8001efe:	4618      	mov	r0, r3
 8001f00:	f003 feec 	bl	8005cdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f04:	f107 030c 	add.w	r3, r7, #12
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	605a      	str	r2, [r3, #4]
 8001f0e:	609a      	str	r2, [r3, #8]
 8001f10:	60da      	str	r2, [r3, #12]
 8001f12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f14:	2300      	movs	r3, #0
 8001f16:	60bb      	str	r3, [r7, #8]
 8001f18:	4b28      	ldr	r3, [pc, #160]	; (8001fbc <SystemClock_Config+0xcc>)
 8001f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1c:	4a27      	ldr	r2, [pc, #156]	; (8001fbc <SystemClock_Config+0xcc>)
 8001f1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f22:	6413      	str	r3, [r2, #64]	; 0x40
 8001f24:	4b25      	ldr	r3, [pc, #148]	; (8001fbc <SystemClock_Config+0xcc>)
 8001f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2c:	60bb      	str	r3, [r7, #8]
 8001f2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f30:	2300      	movs	r3, #0
 8001f32:	607b      	str	r3, [r7, #4]
 8001f34:	4b22      	ldr	r3, [pc, #136]	; (8001fc0 <SystemClock_Config+0xd0>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001f3c:	4a20      	ldr	r2, [pc, #128]	; (8001fc0 <SystemClock_Config+0xd0>)
 8001f3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f42:	6013      	str	r3, [r2, #0]
 8001f44:	4b1e      	ldr	r3, [pc, #120]	; (8001fc0 <SystemClock_Config+0xd0>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f4c:	607b      	str	r3, [r7, #4]
 8001f4e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f50:	2302      	movs	r3, #2
 8001f52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f54:	2301      	movs	r3, #1
 8001f56:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f58:	2310      	movs	r3, #16
 8001f5a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f60:	2300      	movs	r3, #0
 8001f62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001f64:	2308      	movs	r3, #8
 8001f66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001f68:	2354      	movs	r3, #84	; 0x54
 8001f6a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f70:	2304      	movs	r3, #4
 8001f72:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f74:	f107 0320 	add.w	r3, r7, #32
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f001 fb07 	bl	800358c <HAL_RCC_OscConfig>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001f84:	f000 f81e 	bl	8001fc4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f88:	230f      	movs	r3, #15
 8001f8a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f98:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f9e:	f107 030c 	add.w	r3, r7, #12
 8001fa2:	2102      	movs	r1, #2
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f001 fd69 	bl	8003a7c <HAL_RCC_ClockConfig>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001fb0:	f000 f808 	bl	8001fc4 <Error_Handler>
  }
}
 8001fb4:	bf00      	nop
 8001fb6:	3750      	adds	r7, #80	; 0x50
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	40007000 	.word	0x40007000

08001fc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fc8:	b672      	cpsid	i
}
 8001fca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fcc:	e7fe      	b.n	8001fcc <Error_Handler+0x8>
	...

08001fd0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001fd4:	4b17      	ldr	r3, [pc, #92]	; (8002034 <MX_SPI1_Init+0x64>)
 8001fd6:	4a18      	ldr	r2, [pc, #96]	; (8002038 <MX_SPI1_Init+0x68>)
 8001fd8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001fda:	4b16      	ldr	r3, [pc, #88]	; (8002034 <MX_SPI1_Init+0x64>)
 8001fdc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001fe0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001fe2:	4b14      	ldr	r3, [pc, #80]	; (8002034 <MX_SPI1_Init+0x64>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fe8:	4b12      	ldr	r3, [pc, #72]	; (8002034 <MX_SPI1_Init+0x64>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fee:	4b11      	ldr	r3, [pc, #68]	; (8002034 <MX_SPI1_Init+0x64>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ff4:	4b0f      	ldr	r3, [pc, #60]	; (8002034 <MX_SPI1_Init+0x64>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ffa:	4b0e      	ldr	r3, [pc, #56]	; (8002034 <MX_SPI1_Init+0x64>)
 8001ffc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002000:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002002:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <MX_SPI1_Init+0x64>)
 8002004:	2220      	movs	r2, #32
 8002006:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002008:	4b0a      	ldr	r3, [pc, #40]	; (8002034 <MX_SPI1_Init+0x64>)
 800200a:	2200      	movs	r2, #0
 800200c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800200e:	4b09      	ldr	r3, [pc, #36]	; (8002034 <MX_SPI1_Init+0x64>)
 8002010:	2200      	movs	r2, #0
 8002012:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002014:	4b07      	ldr	r3, [pc, #28]	; (8002034 <MX_SPI1_Init+0x64>)
 8002016:	2200      	movs	r2, #0
 8002018:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800201a:	4b06      	ldr	r3, [pc, #24]	; (8002034 <MX_SPI1_Init+0x64>)
 800201c:	220a      	movs	r2, #10
 800201e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002020:	4804      	ldr	r0, [pc, #16]	; (8002034 <MX_SPI1_Init+0x64>)
 8002022:	f001 fec7 	bl	8003db4 <HAL_SPI_Init>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800202c:	f7ff ffca 	bl	8001fc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002030:	bf00      	nop
 8002032:	bd80      	pop	{r7, pc}
 8002034:	2000071c 	.word	0x2000071c
 8002038:	40013000 	.word	0x40013000

0800203c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b08a      	sub	sp, #40	; 0x28
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002044:	f107 0314 	add.w	r3, r7, #20
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	605a      	str	r2, [r3, #4]
 800204e:	609a      	str	r2, [r3, #8]
 8002050:	60da      	str	r2, [r3, #12]
 8002052:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a19      	ldr	r2, [pc, #100]	; (80020c0 <HAL_SPI_MspInit+0x84>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d12b      	bne.n	80020b6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	613b      	str	r3, [r7, #16]
 8002062:	4b18      	ldr	r3, [pc, #96]	; (80020c4 <HAL_SPI_MspInit+0x88>)
 8002064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002066:	4a17      	ldr	r2, [pc, #92]	; (80020c4 <HAL_SPI_MspInit+0x88>)
 8002068:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800206c:	6453      	str	r3, [r2, #68]	; 0x44
 800206e:	4b15      	ldr	r3, [pc, #84]	; (80020c4 <HAL_SPI_MspInit+0x88>)
 8002070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002072:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002076:	613b      	str	r3, [r7, #16]
 8002078:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	60fb      	str	r3, [r7, #12]
 800207e:	4b11      	ldr	r3, [pc, #68]	; (80020c4 <HAL_SPI_MspInit+0x88>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	4a10      	ldr	r2, [pc, #64]	; (80020c4 <HAL_SPI_MspInit+0x88>)
 8002084:	f043 0302 	orr.w	r3, r3, #2
 8002088:	6313      	str	r3, [r2, #48]	; 0x30
 800208a:	4b0e      	ldr	r3, [pc, #56]	; (80020c4 <HAL_SPI_MspInit+0x88>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	60fb      	str	r3, [r7, #12]
 8002094:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002096:	2338      	movs	r3, #56	; 0x38
 8002098:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209a:	2302      	movs	r3, #2
 800209c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a2:	2303      	movs	r3, #3
 80020a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020a6:	2305      	movs	r3, #5
 80020a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020aa:	f107 0314 	add.w	r3, r7, #20
 80020ae:	4619      	mov	r1, r3
 80020b0:	4805      	ldr	r0, [pc, #20]	; (80020c8 <HAL_SPI_MspInit+0x8c>)
 80020b2:	f001 f8cd 	bl	8003250 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80020b6:	bf00      	nop
 80020b8:	3728      	adds	r7, #40	; 0x28
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	40013000 	.word	0x40013000
 80020c4:	40023800 	.word	0x40023800
 80020c8:	40020400 	.word	0x40020400

080020cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	607b      	str	r3, [r7, #4]
 80020d6:	4b10      	ldr	r3, [pc, #64]	; (8002118 <HAL_MspInit+0x4c>)
 80020d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020da:	4a0f      	ldr	r2, [pc, #60]	; (8002118 <HAL_MspInit+0x4c>)
 80020dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020e0:	6453      	str	r3, [r2, #68]	; 0x44
 80020e2:	4b0d      	ldr	r3, [pc, #52]	; (8002118 <HAL_MspInit+0x4c>)
 80020e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020ea:	607b      	str	r3, [r7, #4]
 80020ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	603b      	str	r3, [r7, #0]
 80020f2:	4b09      	ldr	r3, [pc, #36]	; (8002118 <HAL_MspInit+0x4c>)
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	4a08      	ldr	r2, [pc, #32]	; (8002118 <HAL_MspInit+0x4c>)
 80020f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020fc:	6413      	str	r3, [r2, #64]	; 0x40
 80020fe:	4b06      	ldr	r3, [pc, #24]	; (8002118 <HAL_MspInit+0x4c>)
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002106:	603b      	str	r3, [r7, #0]
 8002108:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800210a:	bf00      	nop
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	40023800 	.word	0x40023800

0800211c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002120:	e7fe      	b.n	8002120 <NMI_Handler+0x4>

08002122 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002122:	b480      	push	{r7}
 8002124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002126:	e7fe      	b.n	8002126 <HardFault_Handler+0x4>

08002128 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800212c:	e7fe      	b.n	800212c <MemManage_Handler+0x4>

0800212e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800212e:	b480      	push	{r7}
 8002130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002132:	e7fe      	b.n	8002132 <BusFault_Handler+0x4>

08002134 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002138:	e7fe      	b.n	8002138 <UsageFault_Handler+0x4>

0800213a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800213a:	b480      	push	{r7}
 800213c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800213e:	bf00      	nop
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800214c:	bf00      	nop
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr

08002156 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002156:	b480      	push	{r7}
 8002158:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800215a:	bf00      	nop
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002168:	f000 fb8a 	bl	8002880 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800216c:	bf00      	nop
 800216e:	bd80      	pop	{r7, pc}

08002170 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8002174:	4802      	ldr	r0, [pc, #8]	; (8002180 <DMA2_Stream1_IRQHandler+0x10>)
 8002176:	f000 fe01 	bl	8002d7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800217a:	bf00      	nop
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	20000774 	.word	0x20000774

08002184 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002188:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <SystemInit+0x20>)
 800218a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800218e:	4a05      	ldr	r2, [pc, #20]	; (80021a4 <SystemInit+0x20>)
 8002190:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002194:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002198:	bf00      	nop
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	e000ed00 	.word	0xe000ed00

080021a8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b096      	sub	sp, #88	; 0x58
 80021ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80021b2:	2200      	movs	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]
 80021b6:	605a      	str	r2, [r3, #4]
 80021b8:	609a      	str	r2, [r3, #8]
 80021ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]
 80021ce:	605a      	str	r2, [r3, #4]
 80021d0:	609a      	str	r2, [r3, #8]
 80021d2:	60da      	str	r2, [r3, #12]
 80021d4:	611a      	str	r2, [r3, #16]
 80021d6:	615a      	str	r2, [r3, #20]
 80021d8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80021da:	1d3b      	adds	r3, r7, #4
 80021dc:	2220      	movs	r2, #32
 80021de:	2100      	movs	r1, #0
 80021e0:	4618      	mov	r0, r3
 80021e2:	f003 fd7b 	bl	8005cdc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80021e6:	4b3e      	ldr	r3, [pc, #248]	; (80022e0 <MX_TIM1_Init+0x138>)
 80021e8:	4a3e      	ldr	r2, [pc, #248]	; (80022e4 <MX_TIM1_Init+0x13c>)
 80021ea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80021ec:	4b3c      	ldr	r3, [pc, #240]	; (80022e0 <MX_TIM1_Init+0x138>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021f2:	4b3b      	ldr	r3, [pc, #236]	; (80022e0 <MX_TIM1_Init+0x138>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 104;
 80021f8:	4b39      	ldr	r3, [pc, #228]	; (80022e0 <MX_TIM1_Init+0x138>)
 80021fa:	2268      	movs	r2, #104	; 0x68
 80021fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021fe:	4b38      	ldr	r3, [pc, #224]	; (80022e0 <MX_TIM1_Init+0x138>)
 8002200:	2200      	movs	r2, #0
 8002202:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002204:	4b36      	ldr	r3, [pc, #216]	; (80022e0 <MX_TIM1_Init+0x138>)
 8002206:	2200      	movs	r2, #0
 8002208:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800220a:	4b35      	ldr	r3, [pc, #212]	; (80022e0 <MX_TIM1_Init+0x138>)
 800220c:	2280      	movs	r2, #128	; 0x80
 800220e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002210:	4833      	ldr	r0, [pc, #204]	; (80022e0 <MX_TIM1_Init+0x138>)
 8002212:	f002 fb77 	bl	8004904 <HAL_TIM_Base_Init>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800221c:	f7ff fed2 	bl	8001fc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002220:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002224:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002226:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800222a:	4619      	mov	r1, r3
 800222c:	482c      	ldr	r0, [pc, #176]	; (80022e0 <MX_TIM1_Init+0x138>)
 800222e:	f002 fff9 	bl	8005224 <HAL_TIM_ConfigClockSource>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8002238:	f7ff fec4 	bl	8001fc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800223c:	4828      	ldr	r0, [pc, #160]	; (80022e0 <MX_TIM1_Init+0x138>)
 800223e:	f002 fbb0 	bl	80049a2 <HAL_TIM_PWM_Init>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002248:	f7ff febc 	bl	8001fc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800224c:	2300      	movs	r3, #0
 800224e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002250:	2300      	movs	r3, #0
 8002252:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002254:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002258:	4619      	mov	r1, r3
 800225a:	4821      	ldr	r0, [pc, #132]	; (80022e0 <MX_TIM1_Init+0x138>)
 800225c:	f003 fc5a 	bl	8005b14 <HAL_TIMEx_MasterConfigSynchronization>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8002266:	f7ff fead 	bl	8001fc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800226a:	2360      	movs	r3, #96	; 0x60
 800226c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800226e:	2300      	movs	r3, #0
 8002270:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002272:	2300      	movs	r3, #0
 8002274:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002276:	2300      	movs	r3, #0
 8002278:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800227a:	2300      	movs	r3, #0
 800227c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800227e:	2300      	movs	r3, #0
 8002280:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002282:	2300      	movs	r3, #0
 8002284:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002286:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800228a:	2200      	movs	r2, #0
 800228c:	4619      	mov	r1, r3
 800228e:	4814      	ldr	r0, [pc, #80]	; (80022e0 <MX_TIM1_Init+0x138>)
 8002290:	f002 ff06 	bl	80050a0 <HAL_TIM_PWM_ConfigChannel>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800229a:	f7ff fe93 	bl	8001fc4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800229e:	2300      	movs	r3, #0
 80022a0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80022a2:	2300      	movs	r3, #0
 80022a4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80022a6:	2300      	movs	r3, #0
 80022a8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80022aa:	2300      	movs	r3, #0
 80022ac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80022ae:	2300      	movs	r3, #0
 80022b0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80022b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022b6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80022b8:	2300      	movs	r3, #0
 80022ba:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80022bc:	1d3b      	adds	r3, r7, #4
 80022be:	4619      	mov	r1, r3
 80022c0:	4807      	ldr	r0, [pc, #28]	; (80022e0 <MX_TIM1_Init+0x138>)
 80022c2:	f003 fc95 	bl	8005bf0 <HAL_TIMEx_ConfigBreakDeadTime>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80022cc:	f7ff fe7a 	bl	8001fc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80022d0:	4803      	ldr	r0, [pc, #12]	; (80022e0 <MX_TIM1_Init+0x138>)
 80022d2:	f000 f9b5 	bl	8002640 <HAL_TIM_MspPostInit>

}
 80022d6:	bf00      	nop
 80022d8:	3758      	adds	r7, #88	; 0x58
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	2000081c 	.word	0x2000081c
 80022e4:	40010000 	.word	0x40010000

080022e8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b08e      	sub	sp, #56	; 0x38
 80022ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]
 80022f6:	605a      	str	r2, [r3, #4]
 80022f8:	609a      	str	r2, [r3, #8]
 80022fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022fc:	f107 0320 	add.w	r3, r7, #32
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002306:	1d3b      	adds	r3, r7, #4
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	605a      	str	r2, [r3, #4]
 800230e:	609a      	str	r2, [r3, #8]
 8002310:	60da      	str	r2, [r3, #12]
 8002312:	611a      	str	r2, [r3, #16]
 8002314:	615a      	str	r2, [r3, #20]
 8002316:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002318:	4b3d      	ldr	r3, [pc, #244]	; (8002410 <MX_TIM2_Init+0x128>)
 800231a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800231e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8002320:	4b3b      	ldr	r3, [pc, #236]	; (8002410 <MX_TIM2_Init+0x128>)
 8002322:	2253      	movs	r2, #83	; 0x53
 8002324:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002326:	4b3a      	ldr	r3, [pc, #232]	; (8002410 <MX_TIM2_Init+0x128>)
 8002328:	2200      	movs	r2, #0
 800232a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800232c:	4b38      	ldr	r3, [pc, #224]	; (8002410 <MX_TIM2_Init+0x128>)
 800232e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002332:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002334:	4b36      	ldr	r3, [pc, #216]	; (8002410 <MX_TIM2_Init+0x128>)
 8002336:	2200      	movs	r2, #0
 8002338:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800233a:	4b35      	ldr	r3, [pc, #212]	; (8002410 <MX_TIM2_Init+0x128>)
 800233c:	2200      	movs	r2, #0
 800233e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002340:	4833      	ldr	r0, [pc, #204]	; (8002410 <MX_TIM2_Init+0x128>)
 8002342:	f002 fadf 	bl	8004904 <HAL_TIM_Base_Init>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800234c:	f7ff fe3a 	bl	8001fc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002350:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002354:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002356:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800235a:	4619      	mov	r1, r3
 800235c:	482c      	ldr	r0, [pc, #176]	; (8002410 <MX_TIM2_Init+0x128>)
 800235e:	f002 ff61 	bl	8005224 <HAL_TIM_ConfigClockSource>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002368:	f7ff fe2c 	bl	8001fc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800236c:	4828      	ldr	r0, [pc, #160]	; (8002410 <MX_TIM2_Init+0x128>)
 800236e:	f002 fb18 	bl	80049a2 <HAL_TIM_PWM_Init>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002378:	f7ff fe24 	bl	8001fc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800237c:	2300      	movs	r3, #0
 800237e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002380:	2300      	movs	r3, #0
 8002382:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002384:	f107 0320 	add.w	r3, r7, #32
 8002388:	4619      	mov	r1, r3
 800238a:	4821      	ldr	r0, [pc, #132]	; (8002410 <MX_TIM2_Init+0x128>)
 800238c:	f003 fbc2 	bl	8005b14 <HAL_TIMEx_MasterConfigSynchronization>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002396:	f7ff fe15 	bl	8001fc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800239a:	2360      	movs	r3, #96	; 0x60
 800239c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800239e:	2300      	movs	r3, #0
 80023a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023a2:	2300      	movs	r3, #0
 80023a4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023a6:	2300      	movs	r3, #0
 80023a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023aa:	1d3b      	adds	r3, r7, #4
 80023ac:	2200      	movs	r2, #0
 80023ae:	4619      	mov	r1, r3
 80023b0:	4817      	ldr	r0, [pc, #92]	; (8002410 <MX_TIM2_Init+0x128>)
 80023b2:	f002 fe75 	bl	80050a0 <HAL_TIM_PWM_ConfigChannel>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80023bc:	f7ff fe02 	bl	8001fc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80023c0:	1d3b      	adds	r3, r7, #4
 80023c2:	2204      	movs	r2, #4
 80023c4:	4619      	mov	r1, r3
 80023c6:	4812      	ldr	r0, [pc, #72]	; (8002410 <MX_TIM2_Init+0x128>)
 80023c8:	f002 fe6a 	bl	80050a0 <HAL_TIM_PWM_ConfigChannel>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80023d2:	f7ff fdf7 	bl	8001fc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80023d6:	1d3b      	adds	r3, r7, #4
 80023d8:	2208      	movs	r2, #8
 80023da:	4619      	mov	r1, r3
 80023dc:	480c      	ldr	r0, [pc, #48]	; (8002410 <MX_TIM2_Init+0x128>)
 80023de:	f002 fe5f 	bl	80050a0 <HAL_TIM_PWM_ConfigChannel>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 80023e8:	f7ff fdec 	bl	8001fc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80023ec:	1d3b      	adds	r3, r7, #4
 80023ee:	220c      	movs	r2, #12
 80023f0:	4619      	mov	r1, r3
 80023f2:	4807      	ldr	r0, [pc, #28]	; (8002410 <MX_TIM2_Init+0x128>)
 80023f4:	f002 fe54 	bl	80050a0 <HAL_TIM_PWM_ConfigChannel>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 80023fe:	f7ff fde1 	bl	8001fc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002402:	4803      	ldr	r0, [pc, #12]	; (8002410 <MX_TIM2_Init+0x128>)
 8002404:	f000 f91c 	bl	8002640 <HAL_TIM_MspPostInit>

}
 8002408:	bf00      	nop
 800240a:	3738      	adds	r7, #56	; 0x38
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	20000864 	.word	0x20000864

08002414 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b08e      	sub	sp, #56	; 0x38
 8002418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800241a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800241e:	2200      	movs	r2, #0
 8002420:	601a      	str	r2, [r3, #0]
 8002422:	605a      	str	r2, [r3, #4]
 8002424:	609a      	str	r2, [r3, #8]
 8002426:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002428:	f107 0320 	add.w	r3, r7, #32
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002432:	1d3b      	adds	r3, r7, #4
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	605a      	str	r2, [r3, #4]
 800243a:	609a      	str	r2, [r3, #8]
 800243c:	60da      	str	r2, [r3, #12]
 800243e:	611a      	str	r2, [r3, #16]
 8002440:	615a      	str	r2, [r3, #20]
 8002442:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002444:	4b3d      	ldr	r3, [pc, #244]	; (800253c <MX_TIM3_Init+0x128>)
 8002446:	4a3e      	ldr	r2, [pc, #248]	; (8002540 <MX_TIM3_Init+0x12c>)
 8002448:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 800244a:	4b3c      	ldr	r3, [pc, #240]	; (800253c <MX_TIM3_Init+0x128>)
 800244c:	2253      	movs	r2, #83	; 0x53
 800244e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002450:	4b3a      	ldr	r3, [pc, #232]	; (800253c <MX_TIM3_Init+0x128>)
 8002452:	2200      	movs	r2, #0
 8002454:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002456:	4b39      	ldr	r3, [pc, #228]	; (800253c <MX_TIM3_Init+0x128>)
 8002458:	f240 32e7 	movw	r2, #999	; 0x3e7
 800245c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800245e:	4b37      	ldr	r3, [pc, #220]	; (800253c <MX_TIM3_Init+0x128>)
 8002460:	2200      	movs	r2, #0
 8002462:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002464:	4b35      	ldr	r3, [pc, #212]	; (800253c <MX_TIM3_Init+0x128>)
 8002466:	2200      	movs	r2, #0
 8002468:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800246a:	4834      	ldr	r0, [pc, #208]	; (800253c <MX_TIM3_Init+0x128>)
 800246c:	f002 fa4a 	bl	8004904 <HAL_TIM_Base_Init>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002476:	f7ff fda5 	bl	8001fc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800247a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800247e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002480:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002484:	4619      	mov	r1, r3
 8002486:	482d      	ldr	r0, [pc, #180]	; (800253c <MX_TIM3_Init+0x128>)
 8002488:	f002 fecc 	bl	8005224 <HAL_TIM_ConfigClockSource>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002492:	f7ff fd97 	bl	8001fc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002496:	4829      	ldr	r0, [pc, #164]	; (800253c <MX_TIM3_Init+0x128>)
 8002498:	f002 fa83 	bl	80049a2 <HAL_TIM_PWM_Init>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80024a2:	f7ff fd8f 	bl	8001fc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024a6:	2300      	movs	r3, #0
 80024a8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024aa:	2300      	movs	r3, #0
 80024ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80024ae:	f107 0320 	add.w	r3, r7, #32
 80024b2:	4619      	mov	r1, r3
 80024b4:	4821      	ldr	r0, [pc, #132]	; (800253c <MX_TIM3_Init+0x128>)
 80024b6:	f003 fb2d 	bl	8005b14 <HAL_TIMEx_MasterConfigSynchronization>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80024c0:	f7ff fd80 	bl	8001fc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024c4:	2360      	movs	r3, #96	; 0x60
 80024c6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80024c8:	2300      	movs	r3, #0
 80024ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024cc:	2300      	movs	r3, #0
 80024ce:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024d0:	2300      	movs	r3, #0
 80024d2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024d4:	1d3b      	adds	r3, r7, #4
 80024d6:	2200      	movs	r2, #0
 80024d8:	4619      	mov	r1, r3
 80024da:	4818      	ldr	r0, [pc, #96]	; (800253c <MX_TIM3_Init+0x128>)
 80024dc:	f002 fde0 	bl	80050a0 <HAL_TIM_PWM_ConfigChannel>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80024e6:	f7ff fd6d 	bl	8001fc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80024ea:	1d3b      	adds	r3, r7, #4
 80024ec:	2204      	movs	r2, #4
 80024ee:	4619      	mov	r1, r3
 80024f0:	4812      	ldr	r0, [pc, #72]	; (800253c <MX_TIM3_Init+0x128>)
 80024f2:	f002 fdd5 	bl	80050a0 <HAL_TIM_PWM_ConfigChannel>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80024fc:	f7ff fd62 	bl	8001fc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002500:	1d3b      	adds	r3, r7, #4
 8002502:	2208      	movs	r2, #8
 8002504:	4619      	mov	r1, r3
 8002506:	480d      	ldr	r0, [pc, #52]	; (800253c <MX_TIM3_Init+0x128>)
 8002508:	f002 fdca 	bl	80050a0 <HAL_TIM_PWM_ConfigChannel>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8002512:	f7ff fd57 	bl	8001fc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002516:	1d3b      	adds	r3, r7, #4
 8002518:	220c      	movs	r2, #12
 800251a:	4619      	mov	r1, r3
 800251c:	4807      	ldr	r0, [pc, #28]	; (800253c <MX_TIM3_Init+0x128>)
 800251e:	f002 fdbf 	bl	80050a0 <HAL_TIM_PWM_ConfigChannel>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8002528:	f7ff fd4c 	bl	8001fc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800252c:	4803      	ldr	r0, [pc, #12]	; (800253c <MX_TIM3_Init+0x128>)
 800252e:	f000 f887 	bl	8002640 <HAL_TIM_MspPostInit>

}
 8002532:	bf00      	nop
 8002534:	3738      	adds	r7, #56	; 0x38
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	200007d4 	.word	0x200007d4
 8002540:	40000400 	.word	0x40000400

08002544 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a36      	ldr	r2, [pc, #216]	; (800262c <HAL_TIM_Base_MspInit+0xe8>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d13e      	bne.n	80025d4 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002556:	2300      	movs	r3, #0
 8002558:	617b      	str	r3, [r7, #20]
 800255a:	4b35      	ldr	r3, [pc, #212]	; (8002630 <HAL_TIM_Base_MspInit+0xec>)
 800255c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255e:	4a34      	ldr	r2, [pc, #208]	; (8002630 <HAL_TIM_Base_MspInit+0xec>)
 8002560:	f043 0301 	orr.w	r3, r3, #1
 8002564:	6453      	str	r3, [r2, #68]	; 0x44
 8002566:	4b32      	ldr	r3, [pc, #200]	; (8002630 <HAL_TIM_Base_MspInit+0xec>)
 8002568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	617b      	str	r3, [r7, #20]
 8002570:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8002572:	4b30      	ldr	r3, [pc, #192]	; (8002634 <HAL_TIM_Base_MspInit+0xf0>)
 8002574:	4a30      	ldr	r2, [pc, #192]	; (8002638 <HAL_TIM_Base_MspInit+0xf4>)
 8002576:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8002578:	4b2e      	ldr	r3, [pc, #184]	; (8002634 <HAL_TIM_Base_MspInit+0xf0>)
 800257a:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800257e:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002580:	4b2c      	ldr	r3, [pc, #176]	; (8002634 <HAL_TIM_Base_MspInit+0xf0>)
 8002582:	2240      	movs	r2, #64	; 0x40
 8002584:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002586:	4b2b      	ldr	r3, [pc, #172]	; (8002634 <HAL_TIM_Base_MspInit+0xf0>)
 8002588:	2200      	movs	r2, #0
 800258a:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800258c:	4b29      	ldr	r3, [pc, #164]	; (8002634 <HAL_TIM_Base_MspInit+0xf0>)
 800258e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002592:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002594:	4b27      	ldr	r3, [pc, #156]	; (8002634 <HAL_TIM_Base_MspInit+0xf0>)
 8002596:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800259a:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800259c:	4b25      	ldr	r3, [pc, #148]	; (8002634 <HAL_TIM_Base_MspInit+0xf0>)
 800259e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025a2:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80025a4:	4b23      	ldr	r3, [pc, #140]	; (8002634 <HAL_TIM_Base_MspInit+0xf0>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80025aa:	4b22      	ldr	r3, [pc, #136]	; (8002634 <HAL_TIM_Base_MspInit+0xf0>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025b0:	4b20      	ldr	r3, [pc, #128]	; (8002634 <HAL_TIM_Base_MspInit+0xf0>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80025b6:	481f      	ldr	r0, [pc, #124]	; (8002634 <HAL_TIM_Base_MspInit+0xf0>)
 80025b8:	f000 fab8 	bl	8002b2c <HAL_DMA_Init>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 80025c2:	f7ff fcff 	bl	8001fc4 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a1a      	ldr	r2, [pc, #104]	; (8002634 <HAL_TIM_Base_MspInit+0xf0>)
 80025ca:	625a      	str	r2, [r3, #36]	; 0x24
 80025cc:	4a19      	ldr	r2, [pc, #100]	; (8002634 <HAL_TIM_Base_MspInit+0xf0>)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80025d2:	e026      	b.n	8002622 <HAL_TIM_Base_MspInit+0xde>
  else if(tim_baseHandle->Instance==TIM2)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025dc:	d10e      	bne.n	80025fc <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	613b      	str	r3, [r7, #16]
 80025e2:	4b13      	ldr	r3, [pc, #76]	; (8002630 <HAL_TIM_Base_MspInit+0xec>)
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	4a12      	ldr	r2, [pc, #72]	; (8002630 <HAL_TIM_Base_MspInit+0xec>)
 80025e8:	f043 0301 	orr.w	r3, r3, #1
 80025ec:	6413      	str	r3, [r2, #64]	; 0x40
 80025ee:	4b10      	ldr	r3, [pc, #64]	; (8002630 <HAL_TIM_Base_MspInit+0xec>)
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	613b      	str	r3, [r7, #16]
 80025f8:	693b      	ldr	r3, [r7, #16]
}
 80025fa:	e012      	b.n	8002622 <HAL_TIM_Base_MspInit+0xde>
  else if(tim_baseHandle->Instance==TIM3)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a0e      	ldr	r2, [pc, #56]	; (800263c <HAL_TIM_Base_MspInit+0xf8>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d10d      	bne.n	8002622 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002606:	2300      	movs	r3, #0
 8002608:	60fb      	str	r3, [r7, #12]
 800260a:	4b09      	ldr	r3, [pc, #36]	; (8002630 <HAL_TIM_Base_MspInit+0xec>)
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	4a08      	ldr	r2, [pc, #32]	; (8002630 <HAL_TIM_Base_MspInit+0xec>)
 8002610:	f043 0302 	orr.w	r3, r3, #2
 8002614:	6413      	str	r3, [r2, #64]	; 0x40
 8002616:	4b06      	ldr	r3, [pc, #24]	; (8002630 <HAL_TIM_Base_MspInit+0xec>)
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	68fb      	ldr	r3, [r7, #12]
}
 8002622:	bf00      	nop
 8002624:	3718      	adds	r7, #24
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40010000 	.word	0x40010000
 8002630:	40023800 	.word	0x40023800
 8002634:	20000774 	.word	0x20000774
 8002638:	40026428 	.word	0x40026428
 800263c:	40000400 	.word	0x40000400

08002640 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b08c      	sub	sp, #48	; 0x30
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002648:	f107 031c 	add.w	r3, r7, #28
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	605a      	str	r2, [r3, #4]
 8002652:	609a      	str	r2, [r3, #8]
 8002654:	60da      	str	r2, [r3, #12]
 8002656:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a45      	ldr	r2, [pc, #276]	; (8002774 <HAL_TIM_MspPostInit+0x134>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d11f      	bne.n	80026a2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	61bb      	str	r3, [r7, #24]
 8002666:	4b44      	ldr	r3, [pc, #272]	; (8002778 <HAL_TIM_MspPostInit+0x138>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266a:	4a43      	ldr	r2, [pc, #268]	; (8002778 <HAL_TIM_MspPostInit+0x138>)
 800266c:	f043 0301 	orr.w	r3, r3, #1
 8002670:	6313      	str	r3, [r2, #48]	; 0x30
 8002672:	4b41      	ldr	r3, [pc, #260]	; (8002778 <HAL_TIM_MspPostInit+0x138>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	61bb      	str	r3, [r7, #24]
 800267c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = TIM1_CH1_LED_Pin;
 800267e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002682:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002684:	2302      	movs	r3, #2
 8002686:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002688:	2300      	movs	r3, #0
 800268a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800268c:	2300      	movs	r3, #0
 800268e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002690:	2301      	movs	r3, #1
 8002692:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM1_CH1_LED_GPIO_Port, &GPIO_InitStruct);
 8002694:	f107 031c 	add.w	r3, r7, #28
 8002698:	4619      	mov	r1, r3
 800269a:	4838      	ldr	r0, [pc, #224]	; (800277c <HAL_TIM_MspPostInit+0x13c>)
 800269c:	f000 fdd8 	bl	8003250 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80026a0:	e064      	b.n	800276c <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM2)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026aa:	d11e      	bne.n	80026ea <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ac:	2300      	movs	r3, #0
 80026ae:	617b      	str	r3, [r7, #20]
 80026b0:	4b31      	ldr	r3, [pc, #196]	; (8002778 <HAL_TIM_MspPostInit+0x138>)
 80026b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b4:	4a30      	ldr	r2, [pc, #192]	; (8002778 <HAL_TIM_MspPostInit+0x138>)
 80026b6:	f043 0301 	orr.w	r3, r3, #1
 80026ba:	6313      	str	r3, [r2, #48]	; 0x30
 80026bc:	4b2e      	ldr	r3, [pc, #184]	; (8002778 <HAL_TIM_MspPostInit+0x138>)
 80026be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	617b      	str	r3, [r7, #20]
 80026c6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80026c8:	230f      	movs	r3, #15
 80026ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026cc:	2302      	movs	r3, #2
 80026ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d0:	2300      	movs	r3, #0
 80026d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d4:	2300      	movs	r3, #0
 80026d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026d8:	2301      	movs	r3, #1
 80026da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026dc:	f107 031c 	add.w	r3, r7, #28
 80026e0:	4619      	mov	r1, r3
 80026e2:	4826      	ldr	r0, [pc, #152]	; (800277c <HAL_TIM_MspPostInit+0x13c>)
 80026e4:	f000 fdb4 	bl	8003250 <HAL_GPIO_Init>
}
 80026e8:	e040      	b.n	800276c <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM3)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a24      	ldr	r2, [pc, #144]	; (8002780 <HAL_TIM_MspPostInit+0x140>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d13b      	bne.n	800276c <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f4:	2300      	movs	r3, #0
 80026f6:	613b      	str	r3, [r7, #16]
 80026f8:	4b1f      	ldr	r3, [pc, #124]	; (8002778 <HAL_TIM_MspPostInit+0x138>)
 80026fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fc:	4a1e      	ldr	r2, [pc, #120]	; (8002778 <HAL_TIM_MspPostInit+0x138>)
 80026fe:	f043 0301 	orr.w	r3, r3, #1
 8002702:	6313      	str	r3, [r2, #48]	; 0x30
 8002704:	4b1c      	ldr	r3, [pc, #112]	; (8002778 <HAL_TIM_MspPostInit+0x138>)
 8002706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	613b      	str	r3, [r7, #16]
 800270e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002710:	2300      	movs	r3, #0
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	4b18      	ldr	r3, [pc, #96]	; (8002778 <HAL_TIM_MspPostInit+0x138>)
 8002716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002718:	4a17      	ldr	r2, [pc, #92]	; (8002778 <HAL_TIM_MspPostInit+0x138>)
 800271a:	f043 0302 	orr.w	r3, r3, #2
 800271e:	6313      	str	r3, [r2, #48]	; 0x30
 8002720:	4b15      	ldr	r3, [pc, #84]	; (8002778 <HAL_TIM_MspPostInit+0x138>)
 8002722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	60fb      	str	r3, [r7, #12]
 800272a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800272c:	23c0      	movs	r3, #192	; 0xc0
 800272e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002730:	2302      	movs	r3, #2
 8002732:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002734:	2300      	movs	r3, #0
 8002736:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002738:	2300      	movs	r3, #0
 800273a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800273c:	2302      	movs	r3, #2
 800273e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002740:	f107 031c 	add.w	r3, r7, #28
 8002744:	4619      	mov	r1, r3
 8002746:	480d      	ldr	r0, [pc, #52]	; (800277c <HAL_TIM_MspPostInit+0x13c>)
 8002748:	f000 fd82 	bl	8003250 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800274c:	2303      	movs	r3, #3
 800274e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002750:	2302      	movs	r3, #2
 8002752:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002754:	2300      	movs	r3, #0
 8002756:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002758:	2300      	movs	r3, #0
 800275a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800275c:	2302      	movs	r3, #2
 800275e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002760:	f107 031c 	add.w	r3, r7, #28
 8002764:	4619      	mov	r1, r3
 8002766:	4807      	ldr	r0, [pc, #28]	; (8002784 <HAL_TIM_MspPostInit+0x144>)
 8002768:	f000 fd72 	bl	8003250 <HAL_GPIO_Init>
}
 800276c:	bf00      	nop
 800276e:	3730      	adds	r7, #48	; 0x30
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40010000 	.word	0x40010000
 8002778:	40023800 	.word	0x40023800
 800277c:	40020000 	.word	0x40020000
 8002780:	40000400 	.word	0x40000400
 8002784:	40020400 	.word	0x40020400

08002788 <Reset_Handler>:
 8002788:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027c0 <LoopFillZerobss+0x12>
 800278c:	480d      	ldr	r0, [pc, #52]	; (80027c4 <LoopFillZerobss+0x16>)
 800278e:	490e      	ldr	r1, [pc, #56]	; (80027c8 <LoopFillZerobss+0x1a>)
 8002790:	4a0e      	ldr	r2, [pc, #56]	; (80027cc <LoopFillZerobss+0x1e>)
 8002792:	2300      	movs	r3, #0
 8002794:	e002      	b.n	800279c <LoopCopyDataInit>

08002796 <CopyDataInit>:
 8002796:	58d4      	ldr	r4, [r2, r3]
 8002798:	50c4      	str	r4, [r0, r3]
 800279a:	3304      	adds	r3, #4

0800279c <LoopCopyDataInit>:
 800279c:	18c4      	adds	r4, r0, r3
 800279e:	428c      	cmp	r4, r1
 80027a0:	d3f9      	bcc.n	8002796 <CopyDataInit>
 80027a2:	4a0b      	ldr	r2, [pc, #44]	; (80027d0 <LoopFillZerobss+0x22>)
 80027a4:	4c0b      	ldr	r4, [pc, #44]	; (80027d4 <LoopFillZerobss+0x26>)
 80027a6:	2300      	movs	r3, #0
 80027a8:	e001      	b.n	80027ae <LoopFillZerobss>

080027aa <FillZerobss>:
 80027aa:	6013      	str	r3, [r2, #0]
 80027ac:	3204      	adds	r2, #4

080027ae <LoopFillZerobss>:
 80027ae:	42a2      	cmp	r2, r4
 80027b0:	d3fb      	bcc.n	80027aa <FillZerobss>
 80027b2:	f7ff fce7 	bl	8002184 <SystemInit>
 80027b6:	f003 fa6d 	bl	8005c94 <__libc_init_array>
 80027ba:	f7fe fea5 	bl	8001508 <main>
 80027be:	4770      	bx	lr
 80027c0:	20010000 	.word	0x20010000
 80027c4:	20000000 	.word	0x20000000
 80027c8:	2000001c 	.word	0x2000001c
 80027cc:	08005d44 	.word	0x08005d44
 80027d0:	2000001c 	.word	0x2000001c
 80027d4:	200008b0 	.word	0x200008b0

080027d8 <ADC_IRQHandler>:
 80027d8:	e7fe      	b.n	80027d8 <ADC_IRQHandler>
	...

080027dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027e0:	4b0e      	ldr	r3, [pc, #56]	; (800281c <HAL_Init+0x40>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a0d      	ldr	r2, [pc, #52]	; (800281c <HAL_Init+0x40>)
 80027e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027ec:	4b0b      	ldr	r3, [pc, #44]	; (800281c <HAL_Init+0x40>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a0a      	ldr	r2, [pc, #40]	; (800281c <HAL_Init+0x40>)
 80027f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027f8:	4b08      	ldr	r3, [pc, #32]	; (800281c <HAL_Init+0x40>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a07      	ldr	r2, [pc, #28]	; (800281c <HAL_Init+0x40>)
 80027fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002802:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002804:	2003      	movs	r0, #3
 8002806:	f000 f94f 	bl	8002aa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800280a:	2000      	movs	r0, #0
 800280c:	f000 f808 	bl	8002820 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002810:	f7ff fc5c 	bl	80020cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	40023c00 	.word	0x40023c00

08002820 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002828:	4b12      	ldr	r3, [pc, #72]	; (8002874 <HAL_InitTick+0x54>)
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	4b12      	ldr	r3, [pc, #72]	; (8002878 <HAL_InitTick+0x58>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	4619      	mov	r1, r3
 8002832:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002836:	fbb3 f3f1 	udiv	r3, r3, r1
 800283a:	fbb2 f3f3 	udiv	r3, r2, r3
 800283e:	4618      	mov	r0, r3
 8002840:	f000 f967 	bl	8002b12 <HAL_SYSTICK_Config>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e00e      	b.n	800286c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b0f      	cmp	r3, #15
 8002852:	d80a      	bhi.n	800286a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002854:	2200      	movs	r2, #0
 8002856:	6879      	ldr	r1, [r7, #4]
 8002858:	f04f 30ff 	mov.w	r0, #4294967295
 800285c:	f000 f92f 	bl	8002abe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002860:	4a06      	ldr	r2, [pc, #24]	; (800287c <HAL_InitTick+0x5c>)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002866:	2300      	movs	r3, #0
 8002868:	e000      	b.n	800286c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
}
 800286c:	4618      	mov	r0, r3
 800286e:	3708      	adds	r7, #8
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	20000010 	.word	0x20000010
 8002878:	20000018 	.word	0x20000018
 800287c:	20000014 	.word	0x20000014

08002880 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002884:	4b06      	ldr	r3, [pc, #24]	; (80028a0 <HAL_IncTick+0x20>)
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	461a      	mov	r2, r3
 800288a:	4b06      	ldr	r3, [pc, #24]	; (80028a4 <HAL_IncTick+0x24>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4413      	add	r3, r2
 8002890:	4a04      	ldr	r2, [pc, #16]	; (80028a4 <HAL_IncTick+0x24>)
 8002892:	6013      	str	r3, [r2, #0]
}
 8002894:	bf00      	nop
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	20000018 	.word	0x20000018
 80028a4:	200008ac 	.word	0x200008ac

080028a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  return uwTick;
 80028ac:	4b03      	ldr	r3, [pc, #12]	; (80028bc <HAL_GetTick+0x14>)
 80028ae:	681b      	ldr	r3, [r3, #0]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	200008ac 	.word	0x200008ac

080028c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028c8:	f7ff ffee 	bl	80028a8 <HAL_GetTick>
 80028cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d8:	d005      	beq.n	80028e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028da:	4b0a      	ldr	r3, [pc, #40]	; (8002904 <HAL_Delay+0x44>)
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	461a      	mov	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	4413      	add	r3, r2
 80028e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028e6:	bf00      	nop
 80028e8:	f7ff ffde 	bl	80028a8 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d8f7      	bhi.n	80028e8 <HAL_Delay+0x28>
  {
  }
}
 80028f8:	bf00      	nop
 80028fa:	bf00      	nop
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	20000018 	.word	0x20000018

08002908 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f003 0307 	and.w	r3, r3, #7
 8002916:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002918:	4b0c      	ldr	r3, [pc, #48]	; (800294c <__NVIC_SetPriorityGrouping+0x44>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800291e:	68ba      	ldr	r2, [r7, #8]
 8002920:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002924:	4013      	ands	r3, r2
 8002926:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002930:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002938:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800293a:	4a04      	ldr	r2, [pc, #16]	; (800294c <__NVIC_SetPriorityGrouping+0x44>)
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	60d3      	str	r3, [r2, #12]
}
 8002940:	bf00      	nop
 8002942:	3714      	adds	r7, #20
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr
 800294c:	e000ed00 	.word	0xe000ed00

08002950 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002954:	4b04      	ldr	r3, [pc, #16]	; (8002968 <__NVIC_GetPriorityGrouping+0x18>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	0a1b      	lsrs	r3, r3, #8
 800295a:	f003 0307 	and.w	r3, r3, #7
}
 800295e:	4618      	mov	r0, r3
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr
 8002968:	e000ed00 	.word	0xe000ed00

0800296c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	4603      	mov	r3, r0
 8002974:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297a:	2b00      	cmp	r3, #0
 800297c:	db0b      	blt.n	8002996 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800297e:	79fb      	ldrb	r3, [r7, #7]
 8002980:	f003 021f 	and.w	r2, r3, #31
 8002984:	4907      	ldr	r1, [pc, #28]	; (80029a4 <__NVIC_EnableIRQ+0x38>)
 8002986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298a:	095b      	lsrs	r3, r3, #5
 800298c:	2001      	movs	r0, #1
 800298e:	fa00 f202 	lsl.w	r2, r0, r2
 8002992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002996:	bf00      	nop
 8002998:	370c      	adds	r7, #12
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	e000e100 	.word	0xe000e100

080029a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	4603      	mov	r3, r0
 80029b0:	6039      	str	r1, [r7, #0]
 80029b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	db0a      	blt.n	80029d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	b2da      	uxtb	r2, r3
 80029c0:	490c      	ldr	r1, [pc, #48]	; (80029f4 <__NVIC_SetPriority+0x4c>)
 80029c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c6:	0112      	lsls	r2, r2, #4
 80029c8:	b2d2      	uxtb	r2, r2
 80029ca:	440b      	add	r3, r1
 80029cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029d0:	e00a      	b.n	80029e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	b2da      	uxtb	r2, r3
 80029d6:	4908      	ldr	r1, [pc, #32]	; (80029f8 <__NVIC_SetPriority+0x50>)
 80029d8:	79fb      	ldrb	r3, [r7, #7]
 80029da:	f003 030f 	and.w	r3, r3, #15
 80029de:	3b04      	subs	r3, #4
 80029e0:	0112      	lsls	r2, r2, #4
 80029e2:	b2d2      	uxtb	r2, r2
 80029e4:	440b      	add	r3, r1
 80029e6:	761a      	strb	r2, [r3, #24]
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr
 80029f4:	e000e100 	.word	0xe000e100
 80029f8:	e000ed00 	.word	0xe000ed00

080029fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b089      	sub	sp, #36	; 0x24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	f1c3 0307 	rsb	r3, r3, #7
 8002a16:	2b04      	cmp	r3, #4
 8002a18:	bf28      	it	cs
 8002a1a:	2304      	movcs	r3, #4
 8002a1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	3304      	adds	r3, #4
 8002a22:	2b06      	cmp	r3, #6
 8002a24:	d902      	bls.n	8002a2c <NVIC_EncodePriority+0x30>
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	3b03      	subs	r3, #3
 8002a2a:	e000      	b.n	8002a2e <NVIC_EncodePriority+0x32>
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a30:	f04f 32ff 	mov.w	r2, #4294967295
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3a:	43da      	mvns	r2, r3
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	401a      	ands	r2, r3
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a44:	f04f 31ff 	mov.w	r1, #4294967295
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a4e:	43d9      	mvns	r1, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a54:	4313      	orrs	r3, r2
         );
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3724      	adds	r7, #36	; 0x24
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
	...

08002a64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a74:	d301      	bcc.n	8002a7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a76:	2301      	movs	r3, #1
 8002a78:	e00f      	b.n	8002a9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a7a:	4a0a      	ldr	r2, [pc, #40]	; (8002aa4 <SysTick_Config+0x40>)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a82:	210f      	movs	r1, #15
 8002a84:	f04f 30ff 	mov.w	r0, #4294967295
 8002a88:	f7ff ff8e 	bl	80029a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a8c:	4b05      	ldr	r3, [pc, #20]	; (8002aa4 <SysTick_Config+0x40>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a92:	4b04      	ldr	r3, [pc, #16]	; (8002aa4 <SysTick_Config+0x40>)
 8002a94:	2207      	movs	r2, #7
 8002a96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	e000e010 	.word	0xe000e010

08002aa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f7ff ff29 	bl	8002908 <__NVIC_SetPriorityGrouping>
}
 8002ab6:	bf00      	nop
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b086      	sub	sp, #24
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	60b9      	str	r1, [r7, #8]
 8002ac8:	607a      	str	r2, [r7, #4]
 8002aca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002acc:	2300      	movs	r3, #0
 8002ace:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ad0:	f7ff ff3e 	bl	8002950 <__NVIC_GetPriorityGrouping>
 8002ad4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	68b9      	ldr	r1, [r7, #8]
 8002ada:	6978      	ldr	r0, [r7, #20]
 8002adc:	f7ff ff8e 	bl	80029fc <NVIC_EncodePriority>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ae6:	4611      	mov	r1, r2
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff ff5d 	bl	80029a8 <__NVIC_SetPriority>
}
 8002aee:	bf00      	nop
 8002af0:	3718      	adds	r7, #24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b082      	sub	sp, #8
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	4603      	mov	r3, r0
 8002afe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7ff ff31 	bl	800296c <__NVIC_EnableIRQ>
}
 8002b0a:	bf00      	nop
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b082      	sub	sp, #8
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f7ff ffa2 	bl	8002a64 <SysTick_Config>
 8002b20:	4603      	mov	r3, r0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3708      	adds	r7, #8
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
	...

08002b2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b086      	sub	sp, #24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b34:	2300      	movs	r3, #0
 8002b36:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b38:	f7ff feb6 	bl	80028a8 <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d101      	bne.n	8002b48 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e099      	b.n	8002c7c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f022 0201 	bic.w	r2, r2, #1
 8002b66:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b68:	e00f      	b.n	8002b8a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b6a:	f7ff fe9d 	bl	80028a8 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	2b05      	cmp	r3, #5
 8002b76:	d908      	bls.n	8002b8a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2220      	movs	r2, #32
 8002b7c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2203      	movs	r2, #3
 8002b82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e078      	b.n	8002c7c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d1e8      	bne.n	8002b6a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ba0:	697a      	ldr	r2, [r7, #20]
 8002ba2:	4b38      	ldr	r3, [pc, #224]	; (8002c84 <HAL_DMA_Init+0x158>)
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685a      	ldr	r2, [r3, #4]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a1b      	ldr	r3, [r3, #32]
 8002bd4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be0:	2b04      	cmp	r3, #4
 8002be2:	d107      	bne.n	8002bf4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bec:	4313      	orrs	r3, r2
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	f023 0307 	bic.w	r3, r3, #7
 8002c0a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1a:	2b04      	cmp	r3, #4
 8002c1c:	d117      	bne.n	8002c4e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c22:	697a      	ldr	r2, [r7, #20]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00e      	beq.n	8002c4e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f000 fa91 	bl	8003158 <DMA_CheckFifoParam>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d008      	beq.n	8002c4e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2240      	movs	r2, #64	; 0x40
 8002c40:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e016      	b.n	8002c7c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 fa48 	bl	80030ec <DMA_CalcBaseAndBitshift>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c64:	223f      	movs	r2, #63	; 0x3f
 8002c66:	409a      	lsls	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2201      	movs	r2, #1
 8002c76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3718      	adds	r7, #24
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	f010803f 	.word	0xf010803f

08002c88 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
 8002c94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c96:	2300      	movs	r3, #0
 8002c98:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c9e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d101      	bne.n	8002cae <HAL_DMA_Start_IT+0x26>
 8002caa:	2302      	movs	r3, #2
 8002cac:	e040      	b.n	8002d30 <HAL_DMA_Start_IT+0xa8>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d12f      	bne.n	8002d22 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2202      	movs	r2, #2
 8002cc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	68b9      	ldr	r1, [r7, #8]
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f000 f9da 	bl	8003090 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce0:	223f      	movs	r2, #63	; 0x3f
 8002ce2:	409a      	lsls	r2, r3
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f042 0216 	orr.w	r2, r2, #22
 8002cf6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d007      	beq.n	8002d10 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f042 0208 	orr.w	r2, r2, #8
 8002d0e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f042 0201 	orr.w	r2, r2, #1
 8002d1e:	601a      	str	r2, [r3, #0]
 8002d20:	e005      	b.n	8002d2e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002d2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3718      	adds	r7, #24
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d004      	beq.n	8002d56 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2280      	movs	r2, #128	; 0x80
 8002d50:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e00c      	b.n	8002d70 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2205      	movs	r2, #5
 8002d5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f022 0201 	bic.w	r2, r2, #1
 8002d6c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d88:	4b92      	ldr	r3, [pc, #584]	; (8002fd4 <HAL_DMA_IRQHandler+0x258>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a92      	ldr	r2, [pc, #584]	; (8002fd8 <HAL_DMA_IRQHandler+0x25c>)
 8002d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d92:	0a9b      	lsrs	r3, r3, #10
 8002d94:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da6:	2208      	movs	r2, #8
 8002da8:	409a      	lsls	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	4013      	ands	r3, r2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d01a      	beq.n	8002de8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0304 	and.w	r3, r3, #4
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d013      	beq.n	8002de8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f022 0204 	bic.w	r2, r2, #4
 8002dce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd4:	2208      	movs	r2, #8
 8002dd6:	409a      	lsls	r2, r3
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de0:	f043 0201 	orr.w	r2, r3, #1
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dec:	2201      	movs	r2, #1
 8002dee:	409a      	lsls	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	4013      	ands	r3, r2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d012      	beq.n	8002e1e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00b      	beq.n	8002e1e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	409a      	lsls	r2, r3
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e16:	f043 0202 	orr.w	r2, r3, #2
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e22:	2204      	movs	r2, #4
 8002e24:	409a      	lsls	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d012      	beq.n	8002e54 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00b      	beq.n	8002e54 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e40:	2204      	movs	r2, #4
 8002e42:	409a      	lsls	r2, r3
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e4c:	f043 0204 	orr.w	r2, r3, #4
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e58:	2210      	movs	r2, #16
 8002e5a:	409a      	lsls	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	4013      	ands	r3, r2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d043      	beq.n	8002eec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0308 	and.w	r3, r3, #8
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d03c      	beq.n	8002eec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e76:	2210      	movs	r2, #16
 8002e78:	409a      	lsls	r2, r3
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d018      	beq.n	8002ebe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d108      	bne.n	8002eac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d024      	beq.n	8002eec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	4798      	blx	r3
 8002eaa:	e01f      	b.n	8002eec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d01b      	beq.n	8002eec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	4798      	blx	r3
 8002ebc:	e016      	b.n	8002eec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d107      	bne.n	8002edc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f022 0208 	bic.w	r2, r2, #8
 8002eda:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d003      	beq.n	8002eec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef0:	2220      	movs	r2, #32
 8002ef2:	409a      	lsls	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f000 808e 	beq.w	800301a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0310 	and.w	r3, r3, #16
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f000 8086 	beq.w	800301a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f12:	2220      	movs	r2, #32
 8002f14:	409a      	lsls	r2, r3
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b05      	cmp	r3, #5
 8002f24:	d136      	bne.n	8002f94 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f022 0216 	bic.w	r2, r2, #22
 8002f34:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	695a      	ldr	r2, [r3, #20]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f44:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d103      	bne.n	8002f56 <HAL_DMA_IRQHandler+0x1da>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d007      	beq.n	8002f66 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f022 0208 	bic.w	r2, r2, #8
 8002f64:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f6a:	223f      	movs	r2, #63	; 0x3f
 8002f6c:	409a      	lsls	r2, r3
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d07d      	beq.n	8003086 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	4798      	blx	r3
        }
        return;
 8002f92:	e078      	b.n	8003086 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d01c      	beq.n	8002fdc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d108      	bne.n	8002fc2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d030      	beq.n	800301a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	4798      	blx	r3
 8002fc0:	e02b      	b.n	800301a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d027      	beq.n	800301a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	4798      	blx	r3
 8002fd2:	e022      	b.n	800301a <HAL_DMA_IRQHandler+0x29e>
 8002fd4:	20000010 	.word	0x20000010
 8002fd8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d10f      	bne.n	800300a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f022 0210 	bic.w	r2, r2, #16
 8002ff8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800300e:	2b00      	cmp	r3, #0
 8003010:	d003      	beq.n	800301a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800301e:	2b00      	cmp	r3, #0
 8003020:	d032      	beq.n	8003088 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b00      	cmp	r3, #0
 800302c:	d022      	beq.n	8003074 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2205      	movs	r2, #5
 8003032:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f022 0201 	bic.w	r2, r2, #1
 8003044:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	3301      	adds	r3, #1
 800304a:	60bb      	str	r3, [r7, #8]
 800304c:	697a      	ldr	r2, [r7, #20]
 800304e:	429a      	cmp	r2, r3
 8003050:	d307      	bcc.n	8003062 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0301 	and.w	r3, r3, #1
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1f2      	bne.n	8003046 <HAL_DMA_IRQHandler+0x2ca>
 8003060:	e000      	b.n	8003064 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003062:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003078:	2b00      	cmp	r3, #0
 800307a:	d005      	beq.n	8003088 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	4798      	blx	r3
 8003084:	e000      	b.n	8003088 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003086:	bf00      	nop
    }
  }
}
 8003088:	3718      	adds	r7, #24
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop

08003090 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003090:	b480      	push	{r7}
 8003092:	b085      	sub	sp, #20
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
 800309c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80030ac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	683a      	ldr	r2, [r7, #0]
 80030b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	2b40      	cmp	r3, #64	; 0x40
 80030bc:	d108      	bne.n	80030d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68ba      	ldr	r2, [r7, #8]
 80030cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80030ce:	e007      	b.n	80030e0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68ba      	ldr	r2, [r7, #8]
 80030d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	60da      	str	r2, [r3, #12]
}
 80030e0:	bf00      	nop
 80030e2:	3714      	adds	r7, #20
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	3b10      	subs	r3, #16
 80030fc:	4a14      	ldr	r2, [pc, #80]	; (8003150 <DMA_CalcBaseAndBitshift+0x64>)
 80030fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003102:	091b      	lsrs	r3, r3, #4
 8003104:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003106:	4a13      	ldr	r2, [pc, #76]	; (8003154 <DMA_CalcBaseAndBitshift+0x68>)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	4413      	add	r3, r2
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	461a      	mov	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2b03      	cmp	r3, #3
 8003118:	d909      	bls.n	800312e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003122:	f023 0303 	bic.w	r3, r3, #3
 8003126:	1d1a      	adds	r2, r3, #4
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	659a      	str	r2, [r3, #88]	; 0x58
 800312c:	e007      	b.n	800313e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003136:	f023 0303 	bic.w	r3, r3, #3
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003142:	4618      	mov	r0, r3
 8003144:	3714      	adds	r7, #20
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	aaaaaaab 	.word	0xaaaaaaab
 8003154:	08005d2c 	.word	0x08005d2c

08003158 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003158:	b480      	push	{r7}
 800315a:	b085      	sub	sp, #20
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003160:	2300      	movs	r3, #0
 8003162:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003168:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d11f      	bne.n	80031b2 <DMA_CheckFifoParam+0x5a>
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	2b03      	cmp	r3, #3
 8003176:	d856      	bhi.n	8003226 <DMA_CheckFifoParam+0xce>
 8003178:	a201      	add	r2, pc, #4	; (adr r2, 8003180 <DMA_CheckFifoParam+0x28>)
 800317a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800317e:	bf00      	nop
 8003180:	08003191 	.word	0x08003191
 8003184:	080031a3 	.word	0x080031a3
 8003188:	08003191 	.word	0x08003191
 800318c:	08003227 	.word	0x08003227
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003194:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d046      	beq.n	800322a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031a0:	e043      	b.n	800322a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031aa:	d140      	bne.n	800322e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031b0:	e03d      	b.n	800322e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031ba:	d121      	bne.n	8003200 <DMA_CheckFifoParam+0xa8>
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	2b03      	cmp	r3, #3
 80031c0:	d837      	bhi.n	8003232 <DMA_CheckFifoParam+0xda>
 80031c2:	a201      	add	r2, pc, #4	; (adr r2, 80031c8 <DMA_CheckFifoParam+0x70>)
 80031c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c8:	080031d9 	.word	0x080031d9
 80031cc:	080031df 	.word	0x080031df
 80031d0:	080031d9 	.word	0x080031d9
 80031d4:	080031f1 	.word	0x080031f1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	73fb      	strb	r3, [r7, #15]
      break;
 80031dc:	e030      	b.n	8003240 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d025      	beq.n	8003236 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031ee:	e022      	b.n	8003236 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031f8:	d11f      	bne.n	800323a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80031fe:	e01c      	b.n	800323a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	2b02      	cmp	r3, #2
 8003204:	d903      	bls.n	800320e <DMA_CheckFifoParam+0xb6>
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	2b03      	cmp	r3, #3
 800320a:	d003      	beq.n	8003214 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800320c:	e018      	b.n	8003240 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	73fb      	strb	r3, [r7, #15]
      break;
 8003212:	e015      	b.n	8003240 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003218:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00e      	beq.n	800323e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	73fb      	strb	r3, [r7, #15]
      break;
 8003224:	e00b      	b.n	800323e <DMA_CheckFifoParam+0xe6>
      break;
 8003226:	bf00      	nop
 8003228:	e00a      	b.n	8003240 <DMA_CheckFifoParam+0xe8>
      break;
 800322a:	bf00      	nop
 800322c:	e008      	b.n	8003240 <DMA_CheckFifoParam+0xe8>
      break;
 800322e:	bf00      	nop
 8003230:	e006      	b.n	8003240 <DMA_CheckFifoParam+0xe8>
      break;
 8003232:	bf00      	nop
 8003234:	e004      	b.n	8003240 <DMA_CheckFifoParam+0xe8>
      break;
 8003236:	bf00      	nop
 8003238:	e002      	b.n	8003240 <DMA_CheckFifoParam+0xe8>
      break;   
 800323a:	bf00      	nop
 800323c:	e000      	b.n	8003240 <DMA_CheckFifoParam+0xe8>
      break;
 800323e:	bf00      	nop
    }
  } 
  
  return status; 
 8003240:	7bfb      	ldrb	r3, [r7, #15]
}
 8003242:	4618      	mov	r0, r3
 8003244:	3714      	adds	r7, #20
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop

08003250 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003250:	b480      	push	{r7}
 8003252:	b089      	sub	sp, #36	; 0x24
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800325a:	2300      	movs	r3, #0
 800325c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800325e:	2300      	movs	r3, #0
 8003260:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003262:	2300      	movs	r3, #0
 8003264:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003266:	2300      	movs	r3, #0
 8003268:	61fb      	str	r3, [r7, #28]
 800326a:	e159      	b.n	8003520 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800326c:	2201      	movs	r2, #1
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	697a      	ldr	r2, [r7, #20]
 800327c:	4013      	ands	r3, r2
 800327e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003280:	693a      	ldr	r2, [r7, #16]
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	429a      	cmp	r2, r3
 8003286:	f040 8148 	bne.w	800351a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f003 0303 	and.w	r3, r3, #3
 8003292:	2b01      	cmp	r3, #1
 8003294:	d005      	beq.n	80032a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d130      	bne.n	8003304 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	2203      	movs	r2, #3
 80032ae:	fa02 f303 	lsl.w	r3, r2, r3
 80032b2:	43db      	mvns	r3, r3
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	4013      	ands	r3, r2
 80032b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	68da      	ldr	r2, [r3, #12]
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	fa02 f303 	lsl.w	r3, r2, r3
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032d8:	2201      	movs	r2, #1
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	43db      	mvns	r3, r3
 80032e2:	69ba      	ldr	r2, [r7, #24]
 80032e4:	4013      	ands	r3, r2
 80032e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	091b      	lsrs	r3, r3, #4
 80032ee:	f003 0201 	and.w	r2, r3, #1
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	fa02 f303 	lsl.w	r3, r2, r3
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f003 0303 	and.w	r3, r3, #3
 800330c:	2b03      	cmp	r3, #3
 800330e:	d017      	beq.n	8003340 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	005b      	lsls	r3, r3, #1
 800331a:	2203      	movs	r2, #3
 800331c:	fa02 f303 	lsl.w	r3, r2, r3
 8003320:	43db      	mvns	r3, r3
 8003322:	69ba      	ldr	r2, [r7, #24]
 8003324:	4013      	ands	r3, r2
 8003326:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	689a      	ldr	r2, [r3, #8]
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	005b      	lsls	r3, r3, #1
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	4313      	orrs	r3, r2
 8003338:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f003 0303 	and.w	r3, r3, #3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d123      	bne.n	8003394 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	08da      	lsrs	r2, r3, #3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	3208      	adds	r2, #8
 8003354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003358:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	f003 0307 	and.w	r3, r3, #7
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	220f      	movs	r2, #15
 8003364:	fa02 f303 	lsl.w	r3, r2, r3
 8003368:	43db      	mvns	r3, r3
 800336a:	69ba      	ldr	r2, [r7, #24]
 800336c:	4013      	ands	r3, r2
 800336e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	691a      	ldr	r2, [r3, #16]
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	f003 0307 	and.w	r3, r3, #7
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	fa02 f303 	lsl.w	r3, r2, r3
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	4313      	orrs	r3, r2
 8003384:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	08da      	lsrs	r2, r3, #3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	3208      	adds	r2, #8
 800338e:	69b9      	ldr	r1, [r7, #24]
 8003390:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	2203      	movs	r2, #3
 80033a0:	fa02 f303 	lsl.w	r3, r2, r3
 80033a4:	43db      	mvns	r3, r3
 80033a6:	69ba      	ldr	r2, [r7, #24]
 80033a8:	4013      	ands	r3, r2
 80033aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f003 0203 	and.w	r2, r3, #3
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	4313      	orrs	r3, r2
 80033c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f000 80a2 	beq.w	800351a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033d6:	2300      	movs	r3, #0
 80033d8:	60fb      	str	r3, [r7, #12]
 80033da:	4b57      	ldr	r3, [pc, #348]	; (8003538 <HAL_GPIO_Init+0x2e8>)
 80033dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033de:	4a56      	ldr	r2, [pc, #344]	; (8003538 <HAL_GPIO_Init+0x2e8>)
 80033e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033e4:	6453      	str	r3, [r2, #68]	; 0x44
 80033e6:	4b54      	ldr	r3, [pc, #336]	; (8003538 <HAL_GPIO_Init+0x2e8>)
 80033e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033ee:	60fb      	str	r3, [r7, #12]
 80033f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033f2:	4a52      	ldr	r2, [pc, #328]	; (800353c <HAL_GPIO_Init+0x2ec>)
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	089b      	lsrs	r3, r3, #2
 80033f8:	3302      	adds	r3, #2
 80033fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	f003 0303 	and.w	r3, r3, #3
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	220f      	movs	r2, #15
 800340a:	fa02 f303 	lsl.w	r3, r2, r3
 800340e:	43db      	mvns	r3, r3
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	4013      	ands	r3, r2
 8003414:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a49      	ldr	r2, [pc, #292]	; (8003540 <HAL_GPIO_Init+0x2f0>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d019      	beq.n	8003452 <HAL_GPIO_Init+0x202>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a48      	ldr	r2, [pc, #288]	; (8003544 <HAL_GPIO_Init+0x2f4>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d013      	beq.n	800344e <HAL_GPIO_Init+0x1fe>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a47      	ldr	r2, [pc, #284]	; (8003548 <HAL_GPIO_Init+0x2f8>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d00d      	beq.n	800344a <HAL_GPIO_Init+0x1fa>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a46      	ldr	r2, [pc, #280]	; (800354c <HAL_GPIO_Init+0x2fc>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d007      	beq.n	8003446 <HAL_GPIO_Init+0x1f6>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a45      	ldr	r2, [pc, #276]	; (8003550 <HAL_GPIO_Init+0x300>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d101      	bne.n	8003442 <HAL_GPIO_Init+0x1f2>
 800343e:	2304      	movs	r3, #4
 8003440:	e008      	b.n	8003454 <HAL_GPIO_Init+0x204>
 8003442:	2307      	movs	r3, #7
 8003444:	e006      	b.n	8003454 <HAL_GPIO_Init+0x204>
 8003446:	2303      	movs	r3, #3
 8003448:	e004      	b.n	8003454 <HAL_GPIO_Init+0x204>
 800344a:	2302      	movs	r3, #2
 800344c:	e002      	b.n	8003454 <HAL_GPIO_Init+0x204>
 800344e:	2301      	movs	r3, #1
 8003450:	e000      	b.n	8003454 <HAL_GPIO_Init+0x204>
 8003452:	2300      	movs	r3, #0
 8003454:	69fa      	ldr	r2, [r7, #28]
 8003456:	f002 0203 	and.w	r2, r2, #3
 800345a:	0092      	lsls	r2, r2, #2
 800345c:	4093      	lsls	r3, r2
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	4313      	orrs	r3, r2
 8003462:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003464:	4935      	ldr	r1, [pc, #212]	; (800353c <HAL_GPIO_Init+0x2ec>)
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	089b      	lsrs	r3, r3, #2
 800346a:	3302      	adds	r3, #2
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003472:	4b38      	ldr	r3, [pc, #224]	; (8003554 <HAL_GPIO_Init+0x304>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	43db      	mvns	r3, r3
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	4013      	ands	r3, r2
 8003480:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d003      	beq.n	8003496 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800348e:	69ba      	ldr	r2, [r7, #24]
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	4313      	orrs	r3, r2
 8003494:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003496:	4a2f      	ldr	r2, [pc, #188]	; (8003554 <HAL_GPIO_Init+0x304>)
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800349c:	4b2d      	ldr	r3, [pc, #180]	; (8003554 <HAL_GPIO_Init+0x304>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	43db      	mvns	r3, r3
 80034a6:	69ba      	ldr	r2, [r7, #24]
 80034a8:	4013      	ands	r3, r2
 80034aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d003      	beq.n	80034c0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	4313      	orrs	r3, r2
 80034be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034c0:	4a24      	ldr	r2, [pc, #144]	; (8003554 <HAL_GPIO_Init+0x304>)
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034c6:	4b23      	ldr	r3, [pc, #140]	; (8003554 <HAL_GPIO_Init+0x304>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	43db      	mvns	r3, r3
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	4013      	ands	r3, r2
 80034d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d003      	beq.n	80034ea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034ea:	4a1a      	ldr	r2, [pc, #104]	; (8003554 <HAL_GPIO_Init+0x304>)
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034f0:	4b18      	ldr	r3, [pc, #96]	; (8003554 <HAL_GPIO_Init+0x304>)
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	43db      	mvns	r3, r3
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	4013      	ands	r3, r2
 80034fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d003      	beq.n	8003514 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	4313      	orrs	r3, r2
 8003512:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003514:	4a0f      	ldr	r2, [pc, #60]	; (8003554 <HAL_GPIO_Init+0x304>)
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	3301      	adds	r3, #1
 800351e:	61fb      	str	r3, [r7, #28]
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	2b0f      	cmp	r3, #15
 8003524:	f67f aea2 	bls.w	800326c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003528:	bf00      	nop
 800352a:	bf00      	nop
 800352c:	3724      	adds	r7, #36	; 0x24
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	40023800 	.word	0x40023800
 800353c:	40013800 	.word	0x40013800
 8003540:	40020000 	.word	0x40020000
 8003544:	40020400 	.word	0x40020400
 8003548:	40020800 	.word	0x40020800
 800354c:	40020c00 	.word	0x40020c00
 8003550:	40021000 	.word	0x40021000
 8003554:	40013c00 	.word	0x40013c00

08003558 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	460b      	mov	r3, r1
 8003562:	807b      	strh	r3, [r7, #2]
 8003564:	4613      	mov	r3, r2
 8003566:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003568:	787b      	ldrb	r3, [r7, #1]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d003      	beq.n	8003576 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800356e:	887a      	ldrh	r2, [r7, #2]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003574:	e003      	b.n	800357e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003576:	887b      	ldrh	r3, [r7, #2]
 8003578:	041a      	lsls	r2, r3, #16
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	619a      	str	r2, [r3, #24]
}
 800357e:	bf00      	nop
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
	...

0800358c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b086      	sub	sp, #24
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e264      	b.n	8003a68 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d075      	beq.n	8003696 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035aa:	4ba3      	ldr	r3, [pc, #652]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f003 030c 	and.w	r3, r3, #12
 80035b2:	2b04      	cmp	r3, #4
 80035b4:	d00c      	beq.n	80035d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035b6:	4ba0      	ldr	r3, [pc, #640]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035be:	2b08      	cmp	r3, #8
 80035c0:	d112      	bne.n	80035e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035c2:	4b9d      	ldr	r3, [pc, #628]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035ce:	d10b      	bne.n	80035e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035d0:	4b99      	ldr	r3, [pc, #612]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d05b      	beq.n	8003694 <HAL_RCC_OscConfig+0x108>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d157      	bne.n	8003694 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e23f      	b.n	8003a68 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035f0:	d106      	bne.n	8003600 <HAL_RCC_OscConfig+0x74>
 80035f2:	4b91      	ldr	r3, [pc, #580]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a90      	ldr	r2, [pc, #576]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 80035f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035fc:	6013      	str	r3, [r2, #0]
 80035fe:	e01d      	b.n	800363c <HAL_RCC_OscConfig+0xb0>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003608:	d10c      	bne.n	8003624 <HAL_RCC_OscConfig+0x98>
 800360a:	4b8b      	ldr	r3, [pc, #556]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a8a      	ldr	r2, [pc, #552]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 8003610:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003614:	6013      	str	r3, [r2, #0]
 8003616:	4b88      	ldr	r3, [pc, #544]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a87      	ldr	r2, [pc, #540]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 800361c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003620:	6013      	str	r3, [r2, #0]
 8003622:	e00b      	b.n	800363c <HAL_RCC_OscConfig+0xb0>
 8003624:	4b84      	ldr	r3, [pc, #528]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a83      	ldr	r2, [pc, #524]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 800362a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800362e:	6013      	str	r3, [r2, #0]
 8003630:	4b81      	ldr	r3, [pc, #516]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a80      	ldr	r2, [pc, #512]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 8003636:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800363a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d013      	beq.n	800366c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003644:	f7ff f930 	bl	80028a8 <HAL_GetTick>
 8003648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800364a:	e008      	b.n	800365e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800364c:	f7ff f92c 	bl	80028a8 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b64      	cmp	r3, #100	; 0x64
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e204      	b.n	8003a68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800365e:	4b76      	ldr	r3, [pc, #472]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d0f0      	beq.n	800364c <HAL_RCC_OscConfig+0xc0>
 800366a:	e014      	b.n	8003696 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800366c:	f7ff f91c 	bl	80028a8 <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003674:	f7ff f918 	bl	80028a8 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b64      	cmp	r3, #100	; 0x64
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e1f0      	b.n	8003a68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003686:	4b6c      	ldr	r3, [pc, #432]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1f0      	bne.n	8003674 <HAL_RCC_OscConfig+0xe8>
 8003692:	e000      	b.n	8003696 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003694:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d063      	beq.n	800376a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036a2:	4b65      	ldr	r3, [pc, #404]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f003 030c 	and.w	r3, r3, #12
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00b      	beq.n	80036c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036ae:	4b62      	ldr	r3, [pc, #392]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036b6:	2b08      	cmp	r3, #8
 80036b8:	d11c      	bne.n	80036f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036ba:	4b5f      	ldr	r3, [pc, #380]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d116      	bne.n	80036f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036c6:	4b5c      	ldr	r3, [pc, #368]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d005      	beq.n	80036de <HAL_RCC_OscConfig+0x152>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d001      	beq.n	80036de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e1c4      	b.n	8003a68 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036de:	4b56      	ldr	r3, [pc, #344]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	00db      	lsls	r3, r3, #3
 80036ec:	4952      	ldr	r1, [pc, #328]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036f2:	e03a      	b.n	800376a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d020      	beq.n	800373e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036fc:	4b4f      	ldr	r3, [pc, #316]	; (800383c <HAL_RCC_OscConfig+0x2b0>)
 80036fe:	2201      	movs	r2, #1
 8003700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003702:	f7ff f8d1 	bl	80028a8 <HAL_GetTick>
 8003706:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003708:	e008      	b.n	800371c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800370a:	f7ff f8cd 	bl	80028a8 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	2b02      	cmp	r3, #2
 8003716:	d901      	bls.n	800371c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e1a5      	b.n	8003a68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800371c:	4b46      	ldr	r3, [pc, #280]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d0f0      	beq.n	800370a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003728:	4b43      	ldr	r3, [pc, #268]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	00db      	lsls	r3, r3, #3
 8003736:	4940      	ldr	r1, [pc, #256]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 8003738:	4313      	orrs	r3, r2
 800373a:	600b      	str	r3, [r1, #0]
 800373c:	e015      	b.n	800376a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800373e:	4b3f      	ldr	r3, [pc, #252]	; (800383c <HAL_RCC_OscConfig+0x2b0>)
 8003740:	2200      	movs	r2, #0
 8003742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003744:	f7ff f8b0 	bl	80028a8 <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800374c:	f7ff f8ac 	bl	80028a8 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e184      	b.n	8003a68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800375e:	4b36      	ldr	r3, [pc, #216]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1f0      	bne.n	800374c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0308 	and.w	r3, r3, #8
 8003772:	2b00      	cmp	r3, #0
 8003774:	d030      	beq.n	80037d8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d016      	beq.n	80037ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800377e:	4b30      	ldr	r3, [pc, #192]	; (8003840 <HAL_RCC_OscConfig+0x2b4>)
 8003780:	2201      	movs	r2, #1
 8003782:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003784:	f7ff f890 	bl	80028a8 <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800378c:	f7ff f88c 	bl	80028a8 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e164      	b.n	8003a68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800379e:	4b26      	ldr	r3, [pc, #152]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 80037a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d0f0      	beq.n	800378c <HAL_RCC_OscConfig+0x200>
 80037aa:	e015      	b.n	80037d8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037ac:	4b24      	ldr	r3, [pc, #144]	; (8003840 <HAL_RCC_OscConfig+0x2b4>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037b2:	f7ff f879 	bl	80028a8 <HAL_GetTick>
 80037b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037b8:	e008      	b.n	80037cc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037ba:	f7ff f875 	bl	80028a8 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d901      	bls.n	80037cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e14d      	b.n	8003a68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037cc:	4b1a      	ldr	r3, [pc, #104]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 80037ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1f0      	bne.n	80037ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 80a0 	beq.w	8003926 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037e6:	2300      	movs	r3, #0
 80037e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037ea:	4b13      	ldr	r3, [pc, #76]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10f      	bne.n	8003816 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037f6:	2300      	movs	r3, #0
 80037f8:	60bb      	str	r3, [r7, #8]
 80037fa:	4b0f      	ldr	r3, [pc, #60]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	4a0e      	ldr	r2, [pc, #56]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 8003800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003804:	6413      	str	r3, [r2, #64]	; 0x40
 8003806:	4b0c      	ldr	r3, [pc, #48]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800380e:	60bb      	str	r3, [r7, #8]
 8003810:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003812:	2301      	movs	r3, #1
 8003814:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003816:	4b0b      	ldr	r3, [pc, #44]	; (8003844 <HAL_RCC_OscConfig+0x2b8>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800381e:	2b00      	cmp	r3, #0
 8003820:	d121      	bne.n	8003866 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003822:	4b08      	ldr	r3, [pc, #32]	; (8003844 <HAL_RCC_OscConfig+0x2b8>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a07      	ldr	r2, [pc, #28]	; (8003844 <HAL_RCC_OscConfig+0x2b8>)
 8003828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800382c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800382e:	f7ff f83b 	bl	80028a8 <HAL_GetTick>
 8003832:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003834:	e011      	b.n	800385a <HAL_RCC_OscConfig+0x2ce>
 8003836:	bf00      	nop
 8003838:	40023800 	.word	0x40023800
 800383c:	42470000 	.word	0x42470000
 8003840:	42470e80 	.word	0x42470e80
 8003844:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003848:	f7ff f82e 	bl	80028a8 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b02      	cmp	r3, #2
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e106      	b.n	8003a68 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800385a:	4b85      	ldr	r3, [pc, #532]	; (8003a70 <HAL_RCC_OscConfig+0x4e4>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003862:	2b00      	cmp	r3, #0
 8003864:	d0f0      	beq.n	8003848 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d106      	bne.n	800387c <HAL_RCC_OscConfig+0x2f0>
 800386e:	4b81      	ldr	r3, [pc, #516]	; (8003a74 <HAL_RCC_OscConfig+0x4e8>)
 8003870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003872:	4a80      	ldr	r2, [pc, #512]	; (8003a74 <HAL_RCC_OscConfig+0x4e8>)
 8003874:	f043 0301 	orr.w	r3, r3, #1
 8003878:	6713      	str	r3, [r2, #112]	; 0x70
 800387a:	e01c      	b.n	80038b6 <HAL_RCC_OscConfig+0x32a>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	2b05      	cmp	r3, #5
 8003882:	d10c      	bne.n	800389e <HAL_RCC_OscConfig+0x312>
 8003884:	4b7b      	ldr	r3, [pc, #492]	; (8003a74 <HAL_RCC_OscConfig+0x4e8>)
 8003886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003888:	4a7a      	ldr	r2, [pc, #488]	; (8003a74 <HAL_RCC_OscConfig+0x4e8>)
 800388a:	f043 0304 	orr.w	r3, r3, #4
 800388e:	6713      	str	r3, [r2, #112]	; 0x70
 8003890:	4b78      	ldr	r3, [pc, #480]	; (8003a74 <HAL_RCC_OscConfig+0x4e8>)
 8003892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003894:	4a77      	ldr	r2, [pc, #476]	; (8003a74 <HAL_RCC_OscConfig+0x4e8>)
 8003896:	f043 0301 	orr.w	r3, r3, #1
 800389a:	6713      	str	r3, [r2, #112]	; 0x70
 800389c:	e00b      	b.n	80038b6 <HAL_RCC_OscConfig+0x32a>
 800389e:	4b75      	ldr	r3, [pc, #468]	; (8003a74 <HAL_RCC_OscConfig+0x4e8>)
 80038a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a2:	4a74      	ldr	r2, [pc, #464]	; (8003a74 <HAL_RCC_OscConfig+0x4e8>)
 80038a4:	f023 0301 	bic.w	r3, r3, #1
 80038a8:	6713      	str	r3, [r2, #112]	; 0x70
 80038aa:	4b72      	ldr	r3, [pc, #456]	; (8003a74 <HAL_RCC_OscConfig+0x4e8>)
 80038ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ae:	4a71      	ldr	r2, [pc, #452]	; (8003a74 <HAL_RCC_OscConfig+0x4e8>)
 80038b0:	f023 0304 	bic.w	r3, r3, #4
 80038b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d015      	beq.n	80038ea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038be:	f7fe fff3 	bl	80028a8 <HAL_GetTick>
 80038c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038c4:	e00a      	b.n	80038dc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038c6:	f7fe ffef 	bl	80028a8 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d901      	bls.n	80038dc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e0c5      	b.n	8003a68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038dc:	4b65      	ldr	r3, [pc, #404]	; (8003a74 <HAL_RCC_OscConfig+0x4e8>)
 80038de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d0ee      	beq.n	80038c6 <HAL_RCC_OscConfig+0x33a>
 80038e8:	e014      	b.n	8003914 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ea:	f7fe ffdd 	bl	80028a8 <HAL_GetTick>
 80038ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038f0:	e00a      	b.n	8003908 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038f2:	f7fe ffd9 	bl	80028a8 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003900:	4293      	cmp	r3, r2
 8003902:	d901      	bls.n	8003908 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e0af      	b.n	8003a68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003908:	4b5a      	ldr	r3, [pc, #360]	; (8003a74 <HAL_RCC_OscConfig+0x4e8>)
 800390a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800390c:	f003 0302 	and.w	r3, r3, #2
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1ee      	bne.n	80038f2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003914:	7dfb      	ldrb	r3, [r7, #23]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d105      	bne.n	8003926 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800391a:	4b56      	ldr	r3, [pc, #344]	; (8003a74 <HAL_RCC_OscConfig+0x4e8>)
 800391c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391e:	4a55      	ldr	r2, [pc, #340]	; (8003a74 <HAL_RCC_OscConfig+0x4e8>)
 8003920:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003924:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	2b00      	cmp	r3, #0
 800392c:	f000 809b 	beq.w	8003a66 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003930:	4b50      	ldr	r3, [pc, #320]	; (8003a74 <HAL_RCC_OscConfig+0x4e8>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f003 030c 	and.w	r3, r3, #12
 8003938:	2b08      	cmp	r3, #8
 800393a:	d05c      	beq.n	80039f6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	2b02      	cmp	r3, #2
 8003942:	d141      	bne.n	80039c8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003944:	4b4c      	ldr	r3, [pc, #304]	; (8003a78 <HAL_RCC_OscConfig+0x4ec>)
 8003946:	2200      	movs	r2, #0
 8003948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800394a:	f7fe ffad 	bl	80028a8 <HAL_GetTick>
 800394e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003950:	e008      	b.n	8003964 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003952:	f7fe ffa9 	bl	80028a8 <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	2b02      	cmp	r3, #2
 800395e:	d901      	bls.n	8003964 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e081      	b.n	8003a68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003964:	4b43      	ldr	r3, [pc, #268]	; (8003a74 <HAL_RCC_OscConfig+0x4e8>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1f0      	bne.n	8003952 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	69da      	ldr	r2, [r3, #28]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	431a      	orrs	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397e:	019b      	lsls	r3, r3, #6
 8003980:	431a      	orrs	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003986:	085b      	lsrs	r3, r3, #1
 8003988:	3b01      	subs	r3, #1
 800398a:	041b      	lsls	r3, r3, #16
 800398c:	431a      	orrs	r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003992:	061b      	lsls	r3, r3, #24
 8003994:	4937      	ldr	r1, [pc, #220]	; (8003a74 <HAL_RCC_OscConfig+0x4e8>)
 8003996:	4313      	orrs	r3, r2
 8003998:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800399a:	4b37      	ldr	r3, [pc, #220]	; (8003a78 <HAL_RCC_OscConfig+0x4ec>)
 800399c:	2201      	movs	r2, #1
 800399e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a0:	f7fe ff82 	bl	80028a8 <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039a6:	e008      	b.n	80039ba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039a8:	f7fe ff7e 	bl	80028a8 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e056      	b.n	8003a68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ba:	4b2e      	ldr	r3, [pc, #184]	; (8003a74 <HAL_RCC_OscConfig+0x4e8>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d0f0      	beq.n	80039a8 <HAL_RCC_OscConfig+0x41c>
 80039c6:	e04e      	b.n	8003a66 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039c8:	4b2b      	ldr	r3, [pc, #172]	; (8003a78 <HAL_RCC_OscConfig+0x4ec>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ce:	f7fe ff6b 	bl	80028a8 <HAL_GetTick>
 80039d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039d4:	e008      	b.n	80039e8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039d6:	f7fe ff67 	bl	80028a8 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d901      	bls.n	80039e8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e03f      	b.n	8003a68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039e8:	4b22      	ldr	r3, [pc, #136]	; (8003a74 <HAL_RCC_OscConfig+0x4e8>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1f0      	bne.n	80039d6 <HAL_RCC_OscConfig+0x44a>
 80039f4:	e037      	b.n	8003a66 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d101      	bne.n	8003a02 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e032      	b.n	8003a68 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a02:	4b1c      	ldr	r3, [pc, #112]	; (8003a74 <HAL_RCC_OscConfig+0x4e8>)
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d028      	beq.n	8003a62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d121      	bne.n	8003a62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d11a      	bne.n	8003a62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a32:	4013      	ands	r3, r2
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a38:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d111      	bne.n	8003a62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a48:	085b      	lsrs	r3, r3, #1
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d107      	bne.n	8003a62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d001      	beq.n	8003a66 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e000      	b.n	8003a68 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3718      	adds	r7, #24
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	40007000 	.word	0x40007000
 8003a74:	40023800 	.word	0x40023800
 8003a78:	42470060 	.word	0x42470060

08003a7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d101      	bne.n	8003a90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e0cc      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a90:	4b68      	ldr	r3, [pc, #416]	; (8003c34 <HAL_RCC_ClockConfig+0x1b8>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0307 	and.w	r3, r3, #7
 8003a98:	683a      	ldr	r2, [r7, #0]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d90c      	bls.n	8003ab8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a9e:	4b65      	ldr	r3, [pc, #404]	; (8003c34 <HAL_RCC_ClockConfig+0x1b8>)
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	b2d2      	uxtb	r2, r2
 8003aa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aa6:	4b63      	ldr	r3, [pc, #396]	; (8003c34 <HAL_RCC_ClockConfig+0x1b8>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0307 	and.w	r3, r3, #7
 8003aae:	683a      	ldr	r2, [r7, #0]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d001      	beq.n	8003ab8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e0b8      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d020      	beq.n	8003b06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0304 	and.w	r3, r3, #4
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d005      	beq.n	8003adc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ad0:	4b59      	ldr	r3, [pc, #356]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	4a58      	ldr	r2, [pc, #352]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ada:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0308 	and.w	r3, r3, #8
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d005      	beq.n	8003af4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ae8:	4b53      	ldr	r3, [pc, #332]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	4a52      	ldr	r2, [pc, #328]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003aee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003af2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003af4:	4b50      	ldr	r3, [pc, #320]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	494d      	ldr	r1, [pc, #308]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d044      	beq.n	8003b9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d107      	bne.n	8003b2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b1a:	4b47      	ldr	r3, [pc, #284]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d119      	bne.n	8003b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e07f      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d003      	beq.n	8003b3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b36:	2b03      	cmp	r3, #3
 8003b38:	d107      	bne.n	8003b4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b3a:	4b3f      	ldr	r3, [pc, #252]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d109      	bne.n	8003b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e06f      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b4a:	4b3b      	ldr	r3, [pc, #236]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e067      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b5a:	4b37      	ldr	r3, [pc, #220]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f023 0203 	bic.w	r2, r3, #3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	4934      	ldr	r1, [pc, #208]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b6c:	f7fe fe9c 	bl	80028a8 <HAL_GetTick>
 8003b70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b72:	e00a      	b.n	8003b8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b74:	f7fe fe98 	bl	80028a8 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e04f      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b8a:	4b2b      	ldr	r3, [pc, #172]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f003 020c 	and.w	r2, r3, #12
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d1eb      	bne.n	8003b74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b9c:	4b25      	ldr	r3, [pc, #148]	; (8003c34 <HAL_RCC_ClockConfig+0x1b8>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0307 	and.w	r3, r3, #7
 8003ba4:	683a      	ldr	r2, [r7, #0]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d20c      	bcs.n	8003bc4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003baa:	4b22      	ldr	r3, [pc, #136]	; (8003c34 <HAL_RCC_ClockConfig+0x1b8>)
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	b2d2      	uxtb	r2, r2
 8003bb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bb2:	4b20      	ldr	r3, [pc, #128]	; (8003c34 <HAL_RCC_ClockConfig+0x1b8>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0307 	and.w	r3, r3, #7
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d001      	beq.n	8003bc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e032      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0304 	and.w	r3, r3, #4
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d008      	beq.n	8003be2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bd0:	4b19      	ldr	r3, [pc, #100]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	4916      	ldr	r1, [pc, #88]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0308 	and.w	r3, r3, #8
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d009      	beq.n	8003c02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bee:	4b12      	ldr	r3, [pc, #72]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	00db      	lsls	r3, r3, #3
 8003bfc:	490e      	ldr	r1, [pc, #56]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c02:	f000 f821 	bl	8003c48 <HAL_RCC_GetSysClockFreq>
 8003c06:	4602      	mov	r2, r0
 8003c08:	4b0b      	ldr	r3, [pc, #44]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	091b      	lsrs	r3, r3, #4
 8003c0e:	f003 030f 	and.w	r3, r3, #15
 8003c12:	490a      	ldr	r1, [pc, #40]	; (8003c3c <HAL_RCC_ClockConfig+0x1c0>)
 8003c14:	5ccb      	ldrb	r3, [r1, r3]
 8003c16:	fa22 f303 	lsr.w	r3, r2, r3
 8003c1a:	4a09      	ldr	r2, [pc, #36]	; (8003c40 <HAL_RCC_ClockConfig+0x1c4>)
 8003c1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c1e:	4b09      	ldr	r3, [pc, #36]	; (8003c44 <HAL_RCC_ClockConfig+0x1c8>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7fe fdfc 	bl	8002820 <HAL_InitTick>

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	40023c00 	.word	0x40023c00
 8003c38:	40023800 	.word	0x40023800
 8003c3c:	08005d1c 	.word	0x08005d1c
 8003c40:	20000010 	.word	0x20000010
 8003c44:	20000014 	.word	0x20000014

08003c48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c48:	b5b0      	push	{r4, r5, r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c4e:	2100      	movs	r1, #0
 8003c50:	6079      	str	r1, [r7, #4]
 8003c52:	2100      	movs	r1, #0
 8003c54:	60f9      	str	r1, [r7, #12]
 8003c56:	2100      	movs	r1, #0
 8003c58:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003c5a:	2100      	movs	r1, #0
 8003c5c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c5e:	4952      	ldr	r1, [pc, #328]	; (8003da8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003c60:	6889      	ldr	r1, [r1, #8]
 8003c62:	f001 010c 	and.w	r1, r1, #12
 8003c66:	2908      	cmp	r1, #8
 8003c68:	d00d      	beq.n	8003c86 <HAL_RCC_GetSysClockFreq+0x3e>
 8003c6a:	2908      	cmp	r1, #8
 8003c6c:	f200 8094 	bhi.w	8003d98 <HAL_RCC_GetSysClockFreq+0x150>
 8003c70:	2900      	cmp	r1, #0
 8003c72:	d002      	beq.n	8003c7a <HAL_RCC_GetSysClockFreq+0x32>
 8003c74:	2904      	cmp	r1, #4
 8003c76:	d003      	beq.n	8003c80 <HAL_RCC_GetSysClockFreq+0x38>
 8003c78:	e08e      	b.n	8003d98 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c7a:	4b4c      	ldr	r3, [pc, #304]	; (8003dac <HAL_RCC_GetSysClockFreq+0x164>)
 8003c7c:	60bb      	str	r3, [r7, #8]
       break;
 8003c7e:	e08e      	b.n	8003d9e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c80:	4b4b      	ldr	r3, [pc, #300]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x168>)
 8003c82:	60bb      	str	r3, [r7, #8]
      break;
 8003c84:	e08b      	b.n	8003d9e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c86:	4948      	ldr	r1, [pc, #288]	; (8003da8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003c88:	6849      	ldr	r1, [r1, #4]
 8003c8a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003c8e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c90:	4945      	ldr	r1, [pc, #276]	; (8003da8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003c92:	6849      	ldr	r1, [r1, #4]
 8003c94:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003c98:	2900      	cmp	r1, #0
 8003c9a:	d024      	beq.n	8003ce6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c9c:	4942      	ldr	r1, [pc, #264]	; (8003da8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003c9e:	6849      	ldr	r1, [r1, #4]
 8003ca0:	0989      	lsrs	r1, r1, #6
 8003ca2:	4608      	mov	r0, r1
 8003ca4:	f04f 0100 	mov.w	r1, #0
 8003ca8:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003cac:	f04f 0500 	mov.w	r5, #0
 8003cb0:	ea00 0204 	and.w	r2, r0, r4
 8003cb4:	ea01 0305 	and.w	r3, r1, r5
 8003cb8:	493d      	ldr	r1, [pc, #244]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x168>)
 8003cba:	fb01 f003 	mul.w	r0, r1, r3
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	fb01 f102 	mul.w	r1, r1, r2
 8003cc4:	1844      	adds	r4, r0, r1
 8003cc6:	493a      	ldr	r1, [pc, #232]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x168>)
 8003cc8:	fba2 0101 	umull	r0, r1, r2, r1
 8003ccc:	1863      	adds	r3, r4, r1
 8003cce:	4619      	mov	r1, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	f04f 0300 	mov.w	r3, #0
 8003cd8:	f7fc fe9c 	bl	8000a14 <__aeabi_uldivmod>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	460b      	mov	r3, r1
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	60fb      	str	r3, [r7, #12]
 8003ce4:	e04a      	b.n	8003d7c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ce6:	4b30      	ldr	r3, [pc, #192]	; (8003da8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	099b      	lsrs	r3, r3, #6
 8003cec:	461a      	mov	r2, r3
 8003cee:	f04f 0300 	mov.w	r3, #0
 8003cf2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003cf6:	f04f 0100 	mov.w	r1, #0
 8003cfa:	ea02 0400 	and.w	r4, r2, r0
 8003cfe:	ea03 0501 	and.w	r5, r3, r1
 8003d02:	4620      	mov	r0, r4
 8003d04:	4629      	mov	r1, r5
 8003d06:	f04f 0200 	mov.w	r2, #0
 8003d0a:	f04f 0300 	mov.w	r3, #0
 8003d0e:	014b      	lsls	r3, r1, #5
 8003d10:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003d14:	0142      	lsls	r2, r0, #5
 8003d16:	4610      	mov	r0, r2
 8003d18:	4619      	mov	r1, r3
 8003d1a:	1b00      	subs	r0, r0, r4
 8003d1c:	eb61 0105 	sbc.w	r1, r1, r5
 8003d20:	f04f 0200 	mov.w	r2, #0
 8003d24:	f04f 0300 	mov.w	r3, #0
 8003d28:	018b      	lsls	r3, r1, #6
 8003d2a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003d2e:	0182      	lsls	r2, r0, #6
 8003d30:	1a12      	subs	r2, r2, r0
 8003d32:	eb63 0301 	sbc.w	r3, r3, r1
 8003d36:	f04f 0000 	mov.w	r0, #0
 8003d3a:	f04f 0100 	mov.w	r1, #0
 8003d3e:	00d9      	lsls	r1, r3, #3
 8003d40:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d44:	00d0      	lsls	r0, r2, #3
 8003d46:	4602      	mov	r2, r0
 8003d48:	460b      	mov	r3, r1
 8003d4a:	1912      	adds	r2, r2, r4
 8003d4c:	eb45 0303 	adc.w	r3, r5, r3
 8003d50:	f04f 0000 	mov.w	r0, #0
 8003d54:	f04f 0100 	mov.w	r1, #0
 8003d58:	0299      	lsls	r1, r3, #10
 8003d5a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003d5e:	0290      	lsls	r0, r2, #10
 8003d60:	4602      	mov	r2, r0
 8003d62:	460b      	mov	r3, r1
 8003d64:	4610      	mov	r0, r2
 8003d66:	4619      	mov	r1, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	f04f 0300 	mov.w	r3, #0
 8003d70:	f7fc fe50 	bl	8000a14 <__aeabi_uldivmod>
 8003d74:	4602      	mov	r2, r0
 8003d76:	460b      	mov	r3, r1
 8003d78:	4613      	mov	r3, r2
 8003d7a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d7c:	4b0a      	ldr	r3, [pc, #40]	; (8003da8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	0c1b      	lsrs	r3, r3, #16
 8003d82:	f003 0303 	and.w	r3, r3, #3
 8003d86:	3301      	adds	r3, #1
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d94:	60bb      	str	r3, [r7, #8]
      break;
 8003d96:	e002      	b.n	8003d9e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d98:	4b04      	ldr	r3, [pc, #16]	; (8003dac <HAL_RCC_GetSysClockFreq+0x164>)
 8003d9a:	60bb      	str	r3, [r7, #8]
      break;
 8003d9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d9e:	68bb      	ldr	r3, [r7, #8]
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bdb0      	pop	{r4, r5, r7, pc}
 8003da8:	40023800 	.word	0x40023800
 8003dac:	00f42400 	.word	0x00f42400
 8003db0:	017d7840 	.word	0x017d7840

08003db4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e07b      	b.n	8003ebe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d108      	bne.n	8003de0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dd6:	d009      	beq.n	8003dec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	61da      	str	r2, [r3, #28]
 8003dde:	e005      	b.n	8003dec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d106      	bne.n	8003e0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f7fe f918 	bl	800203c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2202      	movs	r2, #2
 8003e10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e22:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003e34:	431a      	orrs	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	431a      	orrs	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	431a      	orrs	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e5c:	431a      	orrs	r2, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	69db      	ldr	r3, [r3, #28]
 8003e62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e66:	431a      	orrs	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a1b      	ldr	r3, [r3, #32]
 8003e6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e70:	ea42 0103 	orr.w	r1, r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e78:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	430a      	orrs	r2, r1
 8003e82:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	0c1b      	lsrs	r3, r3, #16
 8003e8a:	f003 0104 	and.w	r1, r3, #4
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e92:	f003 0210 	and.w	r2, r3, #16
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	69da      	ldr	r2, [r3, #28]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003eac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3708      	adds	r7, #8
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b088      	sub	sp, #32
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	60f8      	str	r0, [r7, #12]
 8003ece:	60b9      	str	r1, [r7, #8]
 8003ed0:	603b      	str	r3, [r7, #0]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d101      	bne.n	8003ee8 <HAL_SPI_Transmit+0x22>
 8003ee4:	2302      	movs	r3, #2
 8003ee6:	e126      	b.n	8004136 <HAL_SPI_Transmit+0x270>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ef0:	f7fe fcda 	bl	80028a8 <HAL_GetTick>
 8003ef4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003ef6:	88fb      	ldrh	r3, [r7, #6]
 8003ef8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d002      	beq.n	8003f0c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003f06:	2302      	movs	r3, #2
 8003f08:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f0a:	e10b      	b.n	8004124 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d002      	beq.n	8003f18 <HAL_SPI_Transmit+0x52>
 8003f12:	88fb      	ldrh	r3, [r7, #6]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d102      	bne.n	8003f1e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f1c:	e102      	b.n	8004124 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2203      	movs	r2, #3
 8003f22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	68ba      	ldr	r2, [r7, #8]
 8003f30:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	88fa      	ldrh	r2, [r7, #6]
 8003f36:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	88fa      	ldrh	r2, [r7, #6]
 8003f3c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2200      	movs	r2, #0
 8003f42:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2200      	movs	r2, #0
 8003f48:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f64:	d10f      	bne.n	8003f86 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f74:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f84:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f90:	2b40      	cmp	r3, #64	; 0x40
 8003f92:	d007      	beq.n	8003fa4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fa2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fac:	d14b      	bne.n	8004046 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d002      	beq.n	8003fbc <HAL_SPI_Transmit+0xf6>
 8003fb6:	8afb      	ldrh	r3, [r7, #22]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d13e      	bne.n	800403a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc0:	881a      	ldrh	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fcc:	1c9a      	adds	r2, r3, #2
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	b29a      	uxth	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003fe0:	e02b      	b.n	800403a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f003 0302 	and.w	r3, r3, #2
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d112      	bne.n	8004016 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff4:	881a      	ldrh	r2, [r3, #0]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004000:	1c9a      	adds	r2, r3, #2
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800400a:	b29b      	uxth	r3, r3
 800400c:	3b01      	subs	r3, #1
 800400e:	b29a      	uxth	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	86da      	strh	r2, [r3, #54]	; 0x36
 8004014:	e011      	b.n	800403a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004016:	f7fe fc47 	bl	80028a8 <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	683a      	ldr	r2, [r7, #0]
 8004022:	429a      	cmp	r2, r3
 8004024:	d803      	bhi.n	800402e <HAL_SPI_Transmit+0x168>
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800402c:	d102      	bne.n	8004034 <HAL_SPI_Transmit+0x16e>
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d102      	bne.n	800403a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004038:	e074      	b.n	8004124 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800403e:	b29b      	uxth	r3, r3
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1ce      	bne.n	8003fe2 <HAL_SPI_Transmit+0x11c>
 8004044:	e04c      	b.n	80040e0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d002      	beq.n	8004054 <HAL_SPI_Transmit+0x18e>
 800404e:	8afb      	ldrh	r3, [r7, #22]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d140      	bne.n	80040d6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	330c      	adds	r3, #12
 800405e:	7812      	ldrb	r2, [r2, #0]
 8004060:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004066:	1c5a      	adds	r2, r3, #1
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004070:	b29b      	uxth	r3, r3
 8004072:	3b01      	subs	r3, #1
 8004074:	b29a      	uxth	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800407a:	e02c      	b.n	80040d6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	2b02      	cmp	r3, #2
 8004088:	d113      	bne.n	80040b2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	330c      	adds	r3, #12
 8004094:	7812      	ldrb	r2, [r2, #0]
 8004096:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409c:	1c5a      	adds	r2, r3, #1
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	3b01      	subs	r3, #1
 80040aa:	b29a      	uxth	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	86da      	strh	r2, [r3, #54]	; 0x36
 80040b0:	e011      	b.n	80040d6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040b2:	f7fe fbf9 	bl	80028a8 <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	683a      	ldr	r2, [r7, #0]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d803      	bhi.n	80040ca <HAL_SPI_Transmit+0x204>
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c8:	d102      	bne.n	80040d0 <HAL_SPI_Transmit+0x20a>
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d102      	bne.n	80040d6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80040d4:	e026      	b.n	8004124 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040da:	b29b      	uxth	r3, r3
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1cd      	bne.n	800407c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	6839      	ldr	r1, [r7, #0]
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f000 fbcb 	bl	8004880 <SPI_EndRxTxTransaction>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d002      	beq.n	80040f6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2220      	movs	r2, #32
 80040f4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d10a      	bne.n	8004114 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040fe:	2300      	movs	r3, #0
 8004100:	613b      	str	r3, [r7, #16]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	613b      	str	r3, [r7, #16]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	613b      	str	r3, [r7, #16]
 8004112:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004118:	2b00      	cmp	r3, #0
 800411a:	d002      	beq.n	8004122 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	77fb      	strb	r3, [r7, #31]
 8004120:	e000      	b.n	8004124 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004122:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004134:	7ffb      	ldrb	r3, [r7, #31]
}
 8004136:	4618      	mov	r0, r3
 8004138:	3720      	adds	r7, #32
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b088      	sub	sp, #32
 8004142:	af02      	add	r7, sp, #8
 8004144:	60f8      	str	r0, [r7, #12]
 8004146:	60b9      	str	r1, [r7, #8]
 8004148:	603b      	str	r3, [r7, #0]
 800414a:	4613      	mov	r3, r2
 800414c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800414e:	2300      	movs	r3, #0
 8004150:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800415a:	d112      	bne.n	8004182 <HAL_SPI_Receive+0x44>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d10e      	bne.n	8004182 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2204      	movs	r2, #4
 8004168:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800416c:	88fa      	ldrh	r2, [r7, #6]
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	9300      	str	r3, [sp, #0]
 8004172:	4613      	mov	r3, r2
 8004174:	68ba      	ldr	r2, [r7, #8]
 8004176:	68b9      	ldr	r1, [r7, #8]
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f000 f8f1 	bl	8004360 <HAL_SPI_TransmitReceive>
 800417e:	4603      	mov	r3, r0
 8004180:	e0ea      	b.n	8004358 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004188:	2b01      	cmp	r3, #1
 800418a:	d101      	bne.n	8004190 <HAL_SPI_Receive+0x52>
 800418c:	2302      	movs	r3, #2
 800418e:	e0e3      	b.n	8004358 <HAL_SPI_Receive+0x21a>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004198:	f7fe fb86 	bl	80028a8 <HAL_GetTick>
 800419c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d002      	beq.n	80041b0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80041aa:	2302      	movs	r3, #2
 80041ac:	75fb      	strb	r3, [r7, #23]
    goto error;
 80041ae:	e0ca      	b.n	8004346 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d002      	beq.n	80041bc <HAL_SPI_Receive+0x7e>
 80041b6:	88fb      	ldrh	r3, [r7, #6]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d102      	bne.n	80041c2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	75fb      	strb	r3, [r7, #23]
    goto error;
 80041c0:	e0c1      	b.n	8004346 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2204      	movs	r2, #4
 80041c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	68ba      	ldr	r2, [r7, #8]
 80041d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	88fa      	ldrh	r2, [r7, #6]
 80041da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	88fa      	ldrh	r2, [r7, #6]
 80041e0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2200      	movs	r2, #0
 80041ec:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004208:	d10f      	bne.n	800422a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004218:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004228:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004234:	2b40      	cmp	r3, #64	; 0x40
 8004236:	d007      	beq.n	8004248 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004246:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d162      	bne.n	8004316 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004250:	e02e      	b.n	80042b0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f003 0301 	and.w	r3, r3, #1
 800425c:	2b01      	cmp	r3, #1
 800425e:	d115      	bne.n	800428c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f103 020c 	add.w	r2, r3, #12
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426c:	7812      	ldrb	r2, [r2, #0]
 800426e:	b2d2      	uxtb	r2, r2
 8004270:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004276:	1c5a      	adds	r2, r3, #1
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004280:	b29b      	uxth	r3, r3
 8004282:	3b01      	subs	r3, #1
 8004284:	b29a      	uxth	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	87da      	strh	r2, [r3, #62]	; 0x3e
 800428a:	e011      	b.n	80042b0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800428c:	f7fe fb0c 	bl	80028a8 <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	683a      	ldr	r2, [r7, #0]
 8004298:	429a      	cmp	r2, r3
 800429a:	d803      	bhi.n	80042a4 <HAL_SPI_Receive+0x166>
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a2:	d102      	bne.n	80042aa <HAL_SPI_Receive+0x16c>
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d102      	bne.n	80042b0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	75fb      	strb	r3, [r7, #23]
          goto error;
 80042ae:	e04a      	b.n	8004346 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1cb      	bne.n	8004252 <HAL_SPI_Receive+0x114>
 80042ba:	e031      	b.n	8004320 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d113      	bne.n	80042f2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68da      	ldr	r2, [r3, #12]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d4:	b292      	uxth	r2, r2
 80042d6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042dc:	1c9a      	adds	r2, r3, #2
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	3b01      	subs	r3, #1
 80042ea:	b29a      	uxth	r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 80042f0:	e011      	b.n	8004316 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042f2:	f7fe fad9 	bl	80028a8 <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	683a      	ldr	r2, [r7, #0]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d803      	bhi.n	800430a <HAL_SPI_Receive+0x1cc>
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004308:	d102      	bne.n	8004310 <HAL_SPI_Receive+0x1d2>
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d102      	bne.n	8004316 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004314:	e017      	b.n	8004346 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800431a:	b29b      	uxth	r3, r3
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1cd      	bne.n	80042bc <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	6839      	ldr	r1, [r7, #0]
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	f000 fa45 	bl	80047b4 <SPI_EndRxTransaction>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d002      	beq.n	8004336 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2220      	movs	r2, #32
 8004334:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800433a:	2b00      	cmp	r3, #0
 800433c:	d002      	beq.n	8004344 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	75fb      	strb	r3, [r7, #23]
 8004342:	e000      	b.n	8004346 <HAL_SPI_Receive+0x208>
  }

error :
 8004344:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2201      	movs	r2, #1
 800434a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004356:	7dfb      	ldrb	r3, [r7, #23]
}
 8004358:	4618      	mov	r0, r3
 800435a:	3718      	adds	r7, #24
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b08c      	sub	sp, #48	; 0x30
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	607a      	str	r2, [r7, #4]
 800436c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800436e:	2301      	movs	r3, #1
 8004370:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004372:	2300      	movs	r3, #0
 8004374:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800437e:	2b01      	cmp	r3, #1
 8004380:	d101      	bne.n	8004386 <HAL_SPI_TransmitReceive+0x26>
 8004382:	2302      	movs	r3, #2
 8004384:	e18a      	b.n	800469c <HAL_SPI_TransmitReceive+0x33c>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800438e:	f7fe fa8b 	bl	80028a8 <HAL_GetTick>
 8004392:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800439a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80043a4:	887b      	ldrh	r3, [r7, #2]
 80043a6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80043a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d00f      	beq.n	80043d0 <HAL_SPI_TransmitReceive+0x70>
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043b6:	d107      	bne.n	80043c8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d103      	bne.n	80043c8 <HAL_SPI_TransmitReceive+0x68>
 80043c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80043c4:	2b04      	cmp	r3, #4
 80043c6:	d003      	beq.n	80043d0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80043c8:	2302      	movs	r3, #2
 80043ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80043ce:	e15b      	b.n	8004688 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d005      	beq.n	80043e2 <HAL_SPI_TransmitReceive+0x82>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d002      	beq.n	80043e2 <HAL_SPI_TransmitReceive+0x82>
 80043dc:	887b      	ldrh	r3, [r7, #2]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d103      	bne.n	80043ea <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80043e8:	e14e      	b.n	8004688 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b04      	cmp	r3, #4
 80043f4:	d003      	beq.n	80043fe <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2205      	movs	r2, #5
 80043fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	887a      	ldrh	r2, [r7, #2]
 800440e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	887a      	ldrh	r2, [r7, #2]
 8004414:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	68ba      	ldr	r2, [r7, #8]
 800441a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	887a      	ldrh	r2, [r7, #2]
 8004420:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	887a      	ldrh	r2, [r7, #2]
 8004426:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2200      	movs	r2, #0
 800442c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800443e:	2b40      	cmp	r3, #64	; 0x40
 8004440:	d007      	beq.n	8004452 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004450:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800445a:	d178      	bne.n	800454e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d002      	beq.n	800446a <HAL_SPI_TransmitReceive+0x10a>
 8004464:	8b7b      	ldrh	r3, [r7, #26]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d166      	bne.n	8004538 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446e:	881a      	ldrh	r2, [r3, #0]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447a:	1c9a      	adds	r2, r3, #2
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004484:	b29b      	uxth	r3, r3
 8004486:	3b01      	subs	r3, #1
 8004488:	b29a      	uxth	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800448e:	e053      	b.n	8004538 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b02      	cmp	r3, #2
 800449c:	d11b      	bne.n	80044d6 <HAL_SPI_TransmitReceive+0x176>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d016      	beq.n	80044d6 <HAL_SPI_TransmitReceive+0x176>
 80044a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d113      	bne.n	80044d6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b2:	881a      	ldrh	r2, [r3, #0]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044be:	1c9a      	adds	r2, r3, #2
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	3b01      	subs	r3, #1
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80044d2:	2300      	movs	r3, #0
 80044d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d119      	bne.n	8004518 <HAL_SPI_TransmitReceive+0x1b8>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d014      	beq.n	8004518 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68da      	ldr	r2, [r3, #12]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f8:	b292      	uxth	r2, r2
 80044fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004500:	1c9a      	adds	r2, r3, #2
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800450a:	b29b      	uxth	r3, r3
 800450c:	3b01      	subs	r3, #1
 800450e:	b29a      	uxth	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004514:	2301      	movs	r3, #1
 8004516:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004518:	f7fe f9c6 	bl	80028a8 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004524:	429a      	cmp	r2, r3
 8004526:	d807      	bhi.n	8004538 <HAL_SPI_TransmitReceive+0x1d8>
 8004528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800452a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800452e:	d003      	beq.n	8004538 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004536:	e0a7      	b.n	8004688 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800453c:	b29b      	uxth	r3, r3
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1a6      	bne.n	8004490 <HAL_SPI_TransmitReceive+0x130>
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004546:	b29b      	uxth	r3, r3
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1a1      	bne.n	8004490 <HAL_SPI_TransmitReceive+0x130>
 800454c:	e07c      	b.n	8004648 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d002      	beq.n	800455c <HAL_SPI_TransmitReceive+0x1fc>
 8004556:	8b7b      	ldrh	r3, [r7, #26]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d16b      	bne.n	8004634 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	330c      	adds	r3, #12
 8004566:	7812      	ldrb	r2, [r2, #0]
 8004568:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456e:	1c5a      	adds	r2, r3, #1
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004578:	b29b      	uxth	r3, r3
 800457a:	3b01      	subs	r3, #1
 800457c:	b29a      	uxth	r2, r3
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004582:	e057      	b.n	8004634 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b02      	cmp	r3, #2
 8004590:	d11c      	bne.n	80045cc <HAL_SPI_TransmitReceive+0x26c>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004596:	b29b      	uxth	r3, r3
 8004598:	2b00      	cmp	r3, #0
 800459a:	d017      	beq.n	80045cc <HAL_SPI_TransmitReceive+0x26c>
 800459c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d114      	bne.n	80045cc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	330c      	adds	r3, #12
 80045ac:	7812      	ldrb	r2, [r2, #0]
 80045ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b4:	1c5a      	adds	r2, r3, #1
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045be:	b29b      	uxth	r3, r3
 80045c0:	3b01      	subs	r3, #1
 80045c2:	b29a      	uxth	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80045c8:	2300      	movs	r3, #0
 80045ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f003 0301 	and.w	r3, r3, #1
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d119      	bne.n	800460e <HAL_SPI_TransmitReceive+0x2ae>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045de:	b29b      	uxth	r3, r3
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d014      	beq.n	800460e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68da      	ldr	r2, [r3, #12]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ee:	b2d2      	uxtb	r2, r2
 80045f0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f6:	1c5a      	adds	r2, r3, #1
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004600:	b29b      	uxth	r3, r3
 8004602:	3b01      	subs	r3, #1
 8004604:	b29a      	uxth	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800460a:	2301      	movs	r3, #1
 800460c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800460e:	f7fe f94b 	bl	80028a8 <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800461a:	429a      	cmp	r2, r3
 800461c:	d803      	bhi.n	8004626 <HAL_SPI_TransmitReceive+0x2c6>
 800461e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004624:	d102      	bne.n	800462c <HAL_SPI_TransmitReceive+0x2cc>
 8004626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004628:	2b00      	cmp	r3, #0
 800462a:	d103      	bne.n	8004634 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004632:	e029      	b.n	8004688 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004638:	b29b      	uxth	r3, r3
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1a2      	bne.n	8004584 <HAL_SPI_TransmitReceive+0x224>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004642:	b29b      	uxth	r3, r3
 8004644:	2b00      	cmp	r3, #0
 8004646:	d19d      	bne.n	8004584 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800464a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f000 f917 	bl	8004880 <SPI_EndRxTxTransaction>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d006      	beq.n	8004666 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2220      	movs	r2, #32
 8004662:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004664:	e010      	b.n	8004688 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d10b      	bne.n	8004686 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800466e:	2300      	movs	r3, #0
 8004670:	617b      	str	r3, [r7, #20]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	617b      	str	r3, [r7, #20]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	617b      	str	r3, [r7, #20]
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	e000      	b.n	8004688 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004686:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004698:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800469c:	4618      	mov	r0, r3
 800469e:	3730      	adds	r7, #48	; 0x30
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b088      	sub	sp, #32
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	603b      	str	r3, [r7, #0]
 80046b0:	4613      	mov	r3, r2
 80046b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80046b4:	f7fe f8f8 	bl	80028a8 <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046bc:	1a9b      	subs	r3, r3, r2
 80046be:	683a      	ldr	r2, [r7, #0]
 80046c0:	4413      	add	r3, r2
 80046c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80046c4:	f7fe f8f0 	bl	80028a8 <HAL_GetTick>
 80046c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80046ca:	4b39      	ldr	r3, [pc, #228]	; (80047b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	015b      	lsls	r3, r3, #5
 80046d0:	0d1b      	lsrs	r3, r3, #20
 80046d2:	69fa      	ldr	r2, [r7, #28]
 80046d4:	fb02 f303 	mul.w	r3, r2, r3
 80046d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046da:	e054      	b.n	8004786 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e2:	d050      	beq.n	8004786 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80046e4:	f7fe f8e0 	bl	80028a8 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	69fa      	ldr	r2, [r7, #28]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d902      	bls.n	80046fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d13d      	bne.n	8004776 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	685a      	ldr	r2, [r3, #4]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004708:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004712:	d111      	bne.n	8004738 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800471c:	d004      	beq.n	8004728 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004726:	d107      	bne.n	8004738 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004736:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004740:	d10f      	bne.n	8004762 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004750:	601a      	str	r2, [r3, #0]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004760:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2201      	movs	r2, #1
 8004766:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e017      	b.n	80047a6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d101      	bne.n	8004780 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800477c:	2300      	movs	r3, #0
 800477e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	3b01      	subs	r3, #1
 8004784:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	689a      	ldr	r2, [r3, #8]
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	4013      	ands	r3, r2
 8004790:	68ba      	ldr	r2, [r7, #8]
 8004792:	429a      	cmp	r2, r3
 8004794:	bf0c      	ite	eq
 8004796:	2301      	moveq	r3, #1
 8004798:	2300      	movne	r3, #0
 800479a:	b2db      	uxtb	r3, r3
 800479c:	461a      	mov	r2, r3
 800479e:	79fb      	ldrb	r3, [r7, #7]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d19b      	bne.n	80046dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3720      	adds	r7, #32
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	20000010 	.word	0x20000010

080047b4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b086      	sub	sp, #24
 80047b8:	af02      	add	r7, sp, #8
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047c8:	d111      	bne.n	80047ee <SPI_EndRxTransaction+0x3a>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047d2:	d004      	beq.n	80047de <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047dc:	d107      	bne.n	80047ee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047ec:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047f6:	d12a      	bne.n	800484e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004800:	d012      	beq.n	8004828 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	9300      	str	r3, [sp, #0]
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	2200      	movs	r2, #0
 800480a:	2180      	movs	r1, #128	; 0x80
 800480c:	68f8      	ldr	r0, [r7, #12]
 800480e:	f7ff ff49 	bl	80046a4 <SPI_WaitFlagStateUntilTimeout>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d02d      	beq.n	8004874 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800481c:	f043 0220 	orr.w	r2, r3, #32
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e026      	b.n	8004876 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	9300      	str	r3, [sp, #0]
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	2200      	movs	r2, #0
 8004830:	2101      	movs	r1, #1
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	f7ff ff36 	bl	80046a4 <SPI_WaitFlagStateUntilTimeout>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d01a      	beq.n	8004874 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004842:	f043 0220 	orr.w	r2, r3, #32
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e013      	b.n	8004876 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	9300      	str	r3, [sp, #0]
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	2200      	movs	r2, #0
 8004856:	2101      	movs	r1, #1
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	f7ff ff23 	bl	80046a4 <SPI_WaitFlagStateUntilTimeout>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d007      	beq.n	8004874 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004868:	f043 0220 	orr.w	r2, r3, #32
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004870:	2303      	movs	r3, #3
 8004872:	e000      	b.n	8004876 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
	...

08004880 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b088      	sub	sp, #32
 8004884:	af02      	add	r7, sp, #8
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800488c:	4b1b      	ldr	r3, [pc, #108]	; (80048fc <SPI_EndRxTxTransaction+0x7c>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a1b      	ldr	r2, [pc, #108]	; (8004900 <SPI_EndRxTxTransaction+0x80>)
 8004892:	fba2 2303 	umull	r2, r3, r2, r3
 8004896:	0d5b      	lsrs	r3, r3, #21
 8004898:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800489c:	fb02 f303 	mul.w	r3, r2, r3
 80048a0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048aa:	d112      	bne.n	80048d2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	9300      	str	r3, [sp, #0]
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	2200      	movs	r2, #0
 80048b4:	2180      	movs	r1, #128	; 0x80
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	f7ff fef4 	bl	80046a4 <SPI_WaitFlagStateUntilTimeout>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d016      	beq.n	80048f0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c6:	f043 0220 	orr.w	r2, r3, #32
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e00f      	b.n	80048f2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00a      	beq.n	80048ee <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	3b01      	subs	r3, #1
 80048dc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048e8:	2b80      	cmp	r3, #128	; 0x80
 80048ea:	d0f2      	beq.n	80048d2 <SPI_EndRxTxTransaction+0x52>
 80048ec:	e000      	b.n	80048f0 <SPI_EndRxTxTransaction+0x70>
        break;
 80048ee:	bf00      	nop
  }

  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3718      	adds	r7, #24
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	20000010 	.word	0x20000010
 8004900:	165e9f81 	.word	0x165e9f81

08004904 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d101      	bne.n	8004916 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e041      	b.n	800499a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800491c:	b2db      	uxtb	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d106      	bne.n	8004930 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f7fd fe0a 	bl	8002544 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2202      	movs	r2, #2
 8004934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	3304      	adds	r3, #4
 8004940:	4619      	mov	r1, r3
 8004942:	4610      	mov	r0, r2
 8004944:	f000 fe1a 	bl	800557c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3708      	adds	r7, #8
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80049a2:	b580      	push	{r7, lr}
 80049a4:	b082      	sub	sp, #8
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d101      	bne.n	80049b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e041      	b.n	8004a38 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d106      	bne.n	80049ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f000 f839 	bl	8004a40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2202      	movs	r2, #2
 80049d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	3304      	adds	r3, #4
 80049de:	4619      	mov	r1, r3
 80049e0:	4610      	mov	r0, r2
 80049e2:	f000 fdcb 	bl	800557c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2201      	movs	r2, #1
 80049ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2201      	movs	r2, #1
 80049f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2201      	movs	r2, #1
 8004a02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2201      	movs	r2, #1
 8004a12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2201      	movs	r2, #1
 8004a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3708      	adds	r7, #8
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004a48:	bf00      	nop
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d109      	bne.n	8004a78 <HAL_TIM_PWM_Start+0x24>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	bf14      	ite	ne
 8004a70:	2301      	movne	r3, #1
 8004a72:	2300      	moveq	r3, #0
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	e022      	b.n	8004abe <HAL_TIM_PWM_Start+0x6a>
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	2b04      	cmp	r3, #4
 8004a7c:	d109      	bne.n	8004a92 <HAL_TIM_PWM_Start+0x3e>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	bf14      	ite	ne
 8004a8a:	2301      	movne	r3, #1
 8004a8c:	2300      	moveq	r3, #0
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	e015      	b.n	8004abe <HAL_TIM_PWM_Start+0x6a>
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	2b08      	cmp	r3, #8
 8004a96:	d109      	bne.n	8004aac <HAL_TIM_PWM_Start+0x58>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	bf14      	ite	ne
 8004aa4:	2301      	movne	r3, #1
 8004aa6:	2300      	moveq	r3, #0
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	e008      	b.n	8004abe <HAL_TIM_PWM_Start+0x6a>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	bf14      	ite	ne
 8004ab8:	2301      	movne	r3, #1
 8004aba:	2300      	moveq	r3, #0
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d001      	beq.n	8004ac6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e068      	b.n	8004b98 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d104      	bne.n	8004ad6 <HAL_TIM_PWM_Start+0x82>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2202      	movs	r2, #2
 8004ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ad4:	e013      	b.n	8004afe <HAL_TIM_PWM_Start+0xaa>
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	2b04      	cmp	r3, #4
 8004ada:	d104      	bne.n	8004ae6 <HAL_TIM_PWM_Start+0x92>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2202      	movs	r2, #2
 8004ae0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ae4:	e00b      	b.n	8004afe <HAL_TIM_PWM_Start+0xaa>
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	2b08      	cmp	r3, #8
 8004aea:	d104      	bne.n	8004af6 <HAL_TIM_PWM_Start+0xa2>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2202      	movs	r2, #2
 8004af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004af4:	e003      	b.n	8004afe <HAL_TIM_PWM_Start+0xaa>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2202      	movs	r2, #2
 8004afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2201      	movs	r2, #1
 8004b04:	6839      	ldr	r1, [r7, #0]
 8004b06:	4618      	mov	r0, r3
 8004b08:	f000 ffde 	bl	8005ac8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a23      	ldr	r2, [pc, #140]	; (8004ba0 <HAL_TIM_PWM_Start+0x14c>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d107      	bne.n	8004b26 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b24:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a1d      	ldr	r2, [pc, #116]	; (8004ba0 <HAL_TIM_PWM_Start+0x14c>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d018      	beq.n	8004b62 <HAL_TIM_PWM_Start+0x10e>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b38:	d013      	beq.n	8004b62 <HAL_TIM_PWM_Start+0x10e>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a19      	ldr	r2, [pc, #100]	; (8004ba4 <HAL_TIM_PWM_Start+0x150>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d00e      	beq.n	8004b62 <HAL_TIM_PWM_Start+0x10e>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a17      	ldr	r2, [pc, #92]	; (8004ba8 <HAL_TIM_PWM_Start+0x154>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d009      	beq.n	8004b62 <HAL_TIM_PWM_Start+0x10e>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a16      	ldr	r2, [pc, #88]	; (8004bac <HAL_TIM_PWM_Start+0x158>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d004      	beq.n	8004b62 <HAL_TIM_PWM_Start+0x10e>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a14      	ldr	r2, [pc, #80]	; (8004bb0 <HAL_TIM_PWM_Start+0x15c>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d111      	bne.n	8004b86 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f003 0307 	and.w	r3, r3, #7
 8004b6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2b06      	cmp	r3, #6
 8004b72:	d010      	beq.n	8004b96 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f042 0201 	orr.w	r2, r2, #1
 8004b82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b84:	e007      	b.n	8004b96 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f042 0201 	orr.w	r2, r2, #1
 8004b94:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3710      	adds	r7, #16
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	40010000 	.word	0x40010000
 8004ba4:	40000400 	.word	0x40000400
 8004ba8:	40000800 	.word	0x40000800
 8004bac:	40000c00 	.word	0x40000c00
 8004bb0:	40014000 	.word	0x40014000

08004bb4 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b086      	sub	sp, #24
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	607a      	str	r2, [r7, #4]
 8004bc0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d109      	bne.n	8004be0 <HAL_TIM_PWM_Start_DMA+0x2c>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	bf0c      	ite	eq
 8004bd8:	2301      	moveq	r3, #1
 8004bda:	2300      	movne	r3, #0
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	e022      	b.n	8004c26 <HAL_TIM_PWM_Start_DMA+0x72>
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	2b04      	cmp	r3, #4
 8004be4:	d109      	bne.n	8004bfa <HAL_TIM_PWM_Start_DMA+0x46>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	bf0c      	ite	eq
 8004bf2:	2301      	moveq	r3, #1
 8004bf4:	2300      	movne	r3, #0
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	e015      	b.n	8004c26 <HAL_TIM_PWM_Start_DMA+0x72>
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	2b08      	cmp	r3, #8
 8004bfe:	d109      	bne.n	8004c14 <HAL_TIM_PWM_Start_DMA+0x60>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	bf0c      	ite	eq
 8004c0c:	2301      	moveq	r3, #1
 8004c0e:	2300      	movne	r3, #0
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	e008      	b.n	8004c26 <HAL_TIM_PWM_Start_DMA+0x72>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	bf0c      	ite	eq
 8004c20:	2301      	moveq	r3, #1
 8004c22:	2300      	movne	r3, #0
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d001      	beq.n	8004c2e <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	e15d      	b.n	8004eea <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d109      	bne.n	8004c48 <HAL_TIM_PWM_Start_DMA+0x94>
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	bf0c      	ite	eq
 8004c40:	2301      	moveq	r3, #1
 8004c42:	2300      	movne	r3, #0
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	e022      	b.n	8004c8e <HAL_TIM_PWM_Start_DMA+0xda>
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	2b04      	cmp	r3, #4
 8004c4c:	d109      	bne.n	8004c62 <HAL_TIM_PWM_Start_DMA+0xae>
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	bf0c      	ite	eq
 8004c5a:	2301      	moveq	r3, #1
 8004c5c:	2300      	movne	r3, #0
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	e015      	b.n	8004c8e <HAL_TIM_PWM_Start_DMA+0xda>
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	2b08      	cmp	r3, #8
 8004c66:	d109      	bne.n	8004c7c <HAL_TIM_PWM_Start_DMA+0xc8>
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	bf0c      	ite	eq
 8004c74:	2301      	moveq	r3, #1
 8004c76:	2300      	movne	r3, #0
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	e008      	b.n	8004c8e <HAL_TIM_PWM_Start_DMA+0xda>
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	bf0c      	ite	eq
 8004c88:	2301      	moveq	r3, #1
 8004c8a:	2300      	movne	r3, #0
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d024      	beq.n	8004cdc <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d104      	bne.n	8004ca2 <HAL_TIM_PWM_Start_DMA+0xee>
 8004c98:	887b      	ldrh	r3, [r7, #2]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d001      	beq.n	8004ca2 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e123      	b.n	8004eea <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d104      	bne.n	8004cb2 <HAL_TIM_PWM_Start_DMA+0xfe>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2202      	movs	r2, #2
 8004cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cb0:	e016      	b.n	8004ce0 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	2b04      	cmp	r3, #4
 8004cb6:	d104      	bne.n	8004cc2 <HAL_TIM_PWM_Start_DMA+0x10e>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2202      	movs	r2, #2
 8004cbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cc0:	e00e      	b.n	8004ce0 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	2b08      	cmp	r3, #8
 8004cc6:	d104      	bne.n	8004cd2 <HAL_TIM_PWM_Start_DMA+0x11e>
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2202      	movs	r2, #2
 8004ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cd0:	e006      	b.n	8004ce0 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2202      	movs	r2, #2
 8004cd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004cda:	e001      	b.n	8004ce0 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e104      	b.n	8004eea <HAL_TIM_PWM_Start_DMA+0x336>
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	2b0c      	cmp	r3, #12
 8004ce4:	f200 80ae 	bhi.w	8004e44 <HAL_TIM_PWM_Start_DMA+0x290>
 8004ce8:	a201      	add	r2, pc, #4	; (adr r2, 8004cf0 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8004cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cee:	bf00      	nop
 8004cf0:	08004d25 	.word	0x08004d25
 8004cf4:	08004e45 	.word	0x08004e45
 8004cf8:	08004e45 	.word	0x08004e45
 8004cfc:	08004e45 	.word	0x08004e45
 8004d00:	08004d6d 	.word	0x08004d6d
 8004d04:	08004e45 	.word	0x08004e45
 8004d08:	08004e45 	.word	0x08004e45
 8004d0c:	08004e45 	.word	0x08004e45
 8004d10:	08004db5 	.word	0x08004db5
 8004d14:	08004e45 	.word	0x08004e45
 8004d18:	08004e45 	.word	0x08004e45
 8004d1c:	08004e45 	.word	0x08004e45
 8004d20:	08004dfd 	.word	0x08004dfd
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d28:	4a72      	ldr	r2, [pc, #456]	; (8004ef4 <HAL_TIM_PWM_Start_DMA+0x340>)
 8004d2a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d30:	4a71      	ldr	r2, [pc, #452]	; (8004ef8 <HAL_TIM_PWM_Start_DMA+0x344>)
 8004d32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d38:	4a70      	ldr	r2, [pc, #448]	; (8004efc <HAL_TIM_PWM_Start_DMA+0x348>)
 8004d3a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004d40:	6879      	ldr	r1, [r7, #4]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	3334      	adds	r3, #52	; 0x34
 8004d48:	461a      	mov	r2, r3
 8004d4a:	887b      	ldrh	r3, [r7, #2]
 8004d4c:	f7fd ff9c 	bl	8002c88 <HAL_DMA_Start_IT>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d001      	beq.n	8004d5a <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e0c7      	b.n	8004eea <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68da      	ldr	r2, [r3, #12]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d68:	60da      	str	r2, [r3, #12]
      break;
 8004d6a:	e06e      	b.n	8004e4a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d70:	4a60      	ldr	r2, [pc, #384]	; (8004ef4 <HAL_TIM_PWM_Start_DMA+0x340>)
 8004d72:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d78:	4a5f      	ldr	r2, [pc, #380]	; (8004ef8 <HAL_TIM_PWM_Start_DMA+0x344>)
 8004d7a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d80:	4a5e      	ldr	r2, [pc, #376]	; (8004efc <HAL_TIM_PWM_Start_DMA+0x348>)
 8004d82:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004d88:	6879      	ldr	r1, [r7, #4]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	3338      	adds	r3, #56	; 0x38
 8004d90:	461a      	mov	r2, r3
 8004d92:	887b      	ldrh	r3, [r7, #2]
 8004d94:	f7fd ff78 	bl	8002c88 <HAL_DMA_Start_IT>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d001      	beq.n	8004da2 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e0a3      	b.n	8004eea <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68da      	ldr	r2, [r3, #12]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004db0:	60da      	str	r2, [r3, #12]
      break;
 8004db2:	e04a      	b.n	8004e4a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db8:	4a4e      	ldr	r2, [pc, #312]	; (8004ef4 <HAL_TIM_PWM_Start_DMA+0x340>)
 8004dba:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc0:	4a4d      	ldr	r2, [pc, #308]	; (8004ef8 <HAL_TIM_PWM_Start_DMA+0x344>)
 8004dc2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc8:	4a4c      	ldr	r2, [pc, #304]	; (8004efc <HAL_TIM_PWM_Start_DMA+0x348>)
 8004dca:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004dd0:	6879      	ldr	r1, [r7, #4]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	333c      	adds	r3, #60	; 0x3c
 8004dd8:	461a      	mov	r2, r3
 8004dda:	887b      	ldrh	r3, [r7, #2]
 8004ddc:	f7fd ff54 	bl	8002c88 <HAL_DMA_Start_IT>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d001      	beq.n	8004dea <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e07f      	b.n	8004eea <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68da      	ldr	r2, [r3, #12]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004df8:	60da      	str	r2, [r3, #12]
      break;
 8004dfa:	e026      	b.n	8004e4a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e00:	4a3c      	ldr	r2, [pc, #240]	; (8004ef4 <HAL_TIM_PWM_Start_DMA+0x340>)
 8004e02:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e08:	4a3b      	ldr	r2, [pc, #236]	; (8004ef8 <HAL_TIM_PWM_Start_DMA+0x344>)
 8004e0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e10:	4a3a      	ldr	r2, [pc, #232]	; (8004efc <HAL_TIM_PWM_Start_DMA+0x348>)
 8004e12:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004e18:	6879      	ldr	r1, [r7, #4]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	3340      	adds	r3, #64	; 0x40
 8004e20:	461a      	mov	r2, r3
 8004e22:	887b      	ldrh	r3, [r7, #2]
 8004e24:	f7fd ff30 	bl	8002c88 <HAL_DMA_Start_IT>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d001      	beq.n	8004e32 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e05b      	b.n	8004eea <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68da      	ldr	r2, [r3, #12]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e40:	60da      	str	r2, [r3, #12]
      break;
 8004e42:	e002      	b.n	8004e4a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	75fb      	strb	r3, [r7, #23]
      break;
 8004e48:	bf00      	nop
  }

  if (status == HAL_OK)
 8004e4a:	7dfb      	ldrb	r3, [r7, #23]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d14b      	bne.n	8004ee8 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2201      	movs	r2, #1
 8004e56:	68b9      	ldr	r1, [r7, #8]
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f000 fe35 	bl	8005ac8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a27      	ldr	r2, [pc, #156]	; (8004f00 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d107      	bne.n	8004e78 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e76:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a20      	ldr	r2, [pc, #128]	; (8004f00 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d018      	beq.n	8004eb4 <HAL_TIM_PWM_Start_DMA+0x300>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e8a:	d013      	beq.n	8004eb4 <HAL_TIM_PWM_Start_DMA+0x300>
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a1c      	ldr	r2, [pc, #112]	; (8004f04 <HAL_TIM_PWM_Start_DMA+0x350>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d00e      	beq.n	8004eb4 <HAL_TIM_PWM_Start_DMA+0x300>
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a1b      	ldr	r2, [pc, #108]	; (8004f08 <HAL_TIM_PWM_Start_DMA+0x354>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d009      	beq.n	8004eb4 <HAL_TIM_PWM_Start_DMA+0x300>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a19      	ldr	r2, [pc, #100]	; (8004f0c <HAL_TIM_PWM_Start_DMA+0x358>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d004      	beq.n	8004eb4 <HAL_TIM_PWM_Start_DMA+0x300>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a18      	ldr	r2, [pc, #96]	; (8004f10 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d111      	bne.n	8004ed8 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f003 0307 	and.w	r3, r3, #7
 8004ebe:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	2b06      	cmp	r3, #6
 8004ec4:	d010      	beq.n	8004ee8 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f042 0201 	orr.w	r2, r2, #1
 8004ed4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ed6:	e007      	b.n	8004ee8 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f042 0201 	orr.w	r2, r2, #1
 8004ee6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004ee8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3718      	adds	r7, #24
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	0800546d 	.word	0x0800546d
 8004ef8:	08005515 	.word	0x08005515
 8004efc:	080053db 	.word	0x080053db
 8004f00:	40010000 	.word	0x40010000
 8004f04:	40000400 	.word	0x40000400
 8004f08:	40000800 	.word	0x40000800
 8004f0c:	40000c00 	.word	0x40000c00
 8004f10:	40014000 	.word	0x40014000

08004f14 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	73fb      	strb	r3, [r7, #15]
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	2b0c      	cmp	r3, #12
 8004f26:	d855      	bhi.n	8004fd4 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8004f28:	a201      	add	r2, pc, #4	; (adr r2, 8004f30 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8004f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f2e:	bf00      	nop
 8004f30:	08004f65 	.word	0x08004f65
 8004f34:	08004fd5 	.word	0x08004fd5
 8004f38:	08004fd5 	.word	0x08004fd5
 8004f3c:	08004fd5 	.word	0x08004fd5
 8004f40:	08004f81 	.word	0x08004f81
 8004f44:	08004fd5 	.word	0x08004fd5
 8004f48:	08004fd5 	.word	0x08004fd5
 8004f4c:	08004fd5 	.word	0x08004fd5
 8004f50:	08004f9d 	.word	0x08004f9d
 8004f54:	08004fd5 	.word	0x08004fd5
 8004f58:	08004fd5 	.word	0x08004fd5
 8004f5c:	08004fd5 	.word	0x08004fd5
 8004f60:	08004fb9 	.word	0x08004fb9
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68da      	ldr	r2, [r3, #12]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004f72:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f7fd fedd 	bl	8002d38 <HAL_DMA_Abort_IT>
      break;
 8004f7e:	e02c      	b.n	8004fda <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68da      	ldr	r2, [r3, #12]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f8e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f94:	4618      	mov	r0, r3
 8004f96:	f7fd fecf 	bl	8002d38 <HAL_DMA_Abort_IT>
      break;
 8004f9a:	e01e      	b.n	8004fda <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	68da      	ldr	r2, [r3, #12]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004faa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f7fd fec1 	bl	8002d38 <HAL_DMA_Abort_IT>
      break;
 8004fb6:	e010      	b.n	8004fda <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68da      	ldr	r2, [r3, #12]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004fc6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7fd feb3 	bl	8002d38 <HAL_DMA_Abort_IT>
      break;
 8004fd2:	e002      	b.n	8004fda <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	73fb      	strb	r3, [r7, #15]
      break;
 8004fd8:	bf00      	nop
  }

  if (status == HAL_OK)
 8004fda:	7bfb      	ldrb	r3, [r7, #15]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d157      	bne.n	8005090 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	6839      	ldr	r1, [r7, #0]
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f000 fd6d 	bl	8005ac8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a2a      	ldr	r2, [pc, #168]	; (800509c <HAL_TIM_PWM_Stop_DMA+0x188>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d117      	bne.n	8005028 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	6a1a      	ldr	r2, [r3, #32]
 8004ffe:	f241 1311 	movw	r3, #4369	; 0x1111
 8005002:	4013      	ands	r3, r2
 8005004:	2b00      	cmp	r3, #0
 8005006:	d10f      	bne.n	8005028 <HAL_TIM_PWM_Stop_DMA+0x114>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	6a1a      	ldr	r2, [r3, #32]
 800500e:	f240 4344 	movw	r3, #1092	; 0x444
 8005012:	4013      	ands	r3, r2
 8005014:	2b00      	cmp	r3, #0
 8005016:	d107      	bne.n	8005028 <HAL_TIM_PWM_Stop_DMA+0x114>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005026:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	6a1a      	ldr	r2, [r3, #32]
 800502e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005032:	4013      	ands	r3, r2
 8005034:	2b00      	cmp	r3, #0
 8005036:	d10f      	bne.n	8005058 <HAL_TIM_PWM_Stop_DMA+0x144>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	6a1a      	ldr	r2, [r3, #32]
 800503e:	f240 4344 	movw	r3, #1092	; 0x444
 8005042:	4013      	ands	r3, r2
 8005044:	2b00      	cmp	r3, #0
 8005046:	d107      	bne.n	8005058 <HAL_TIM_PWM_Stop_DMA+0x144>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f022 0201 	bic.w	r2, r2, #1
 8005056:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d104      	bne.n	8005068 <HAL_TIM_PWM_Stop_DMA+0x154>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2201      	movs	r2, #1
 8005062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005066:	e013      	b.n	8005090 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	2b04      	cmp	r3, #4
 800506c:	d104      	bne.n	8005078 <HAL_TIM_PWM_Stop_DMA+0x164>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2201      	movs	r2, #1
 8005072:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005076:	e00b      	b.n	8005090 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	2b08      	cmp	r3, #8
 800507c:	d104      	bne.n	8005088 <HAL_TIM_PWM_Stop_DMA+0x174>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2201      	movs	r2, #1
 8005082:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005086:	e003      	b.n	8005090 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8005090:	7bfb      	ldrb	r3, [r7, #15]
}
 8005092:	4618      	mov	r0, r3
 8005094:	3710      	adds	r7, #16
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	40010000 	.word	0x40010000

080050a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b086      	sub	sp, #24
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050ac:	2300      	movs	r3, #0
 80050ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d101      	bne.n	80050be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80050ba:	2302      	movs	r3, #2
 80050bc:	e0ae      	b.n	800521c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2201      	movs	r2, #1
 80050c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2b0c      	cmp	r3, #12
 80050ca:	f200 809f 	bhi.w	800520c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80050ce:	a201      	add	r2, pc, #4	; (adr r2, 80050d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80050d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d4:	08005109 	.word	0x08005109
 80050d8:	0800520d 	.word	0x0800520d
 80050dc:	0800520d 	.word	0x0800520d
 80050e0:	0800520d 	.word	0x0800520d
 80050e4:	08005149 	.word	0x08005149
 80050e8:	0800520d 	.word	0x0800520d
 80050ec:	0800520d 	.word	0x0800520d
 80050f0:	0800520d 	.word	0x0800520d
 80050f4:	0800518b 	.word	0x0800518b
 80050f8:	0800520d 	.word	0x0800520d
 80050fc:	0800520d 	.word	0x0800520d
 8005100:	0800520d 	.word	0x0800520d
 8005104:	080051cb 	.word	0x080051cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68b9      	ldr	r1, [r7, #8]
 800510e:	4618      	mov	r0, r3
 8005110:	f000 fab4 	bl	800567c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	699a      	ldr	r2, [r3, #24]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f042 0208 	orr.w	r2, r2, #8
 8005122:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	699a      	ldr	r2, [r3, #24]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f022 0204 	bic.w	r2, r2, #4
 8005132:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	6999      	ldr	r1, [r3, #24]
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	691a      	ldr	r2, [r3, #16]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	430a      	orrs	r2, r1
 8005144:	619a      	str	r2, [r3, #24]
      break;
 8005146:	e064      	b.n	8005212 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68b9      	ldr	r1, [r7, #8]
 800514e:	4618      	mov	r0, r3
 8005150:	f000 fafa 	bl	8005748 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	699a      	ldr	r2, [r3, #24]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005162:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	699a      	ldr	r2, [r3, #24]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005172:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	6999      	ldr	r1, [r3, #24]
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	021a      	lsls	r2, r3, #8
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	430a      	orrs	r2, r1
 8005186:	619a      	str	r2, [r3, #24]
      break;
 8005188:	e043      	b.n	8005212 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68b9      	ldr	r1, [r7, #8]
 8005190:	4618      	mov	r0, r3
 8005192:	f000 fb45 	bl	8005820 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	69da      	ldr	r2, [r3, #28]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f042 0208 	orr.w	r2, r2, #8
 80051a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	69da      	ldr	r2, [r3, #28]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f022 0204 	bic.w	r2, r2, #4
 80051b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	69d9      	ldr	r1, [r3, #28]
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	691a      	ldr	r2, [r3, #16]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	430a      	orrs	r2, r1
 80051c6:	61da      	str	r2, [r3, #28]
      break;
 80051c8:	e023      	b.n	8005212 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68b9      	ldr	r1, [r7, #8]
 80051d0:	4618      	mov	r0, r3
 80051d2:	f000 fb8f 	bl	80058f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	69da      	ldr	r2, [r3, #28]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	69da      	ldr	r2, [r3, #28]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	69d9      	ldr	r1, [r3, #28]
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	021a      	lsls	r2, r3, #8
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	430a      	orrs	r2, r1
 8005208:	61da      	str	r2, [r3, #28]
      break;
 800520a:	e002      	b.n	8005212 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	75fb      	strb	r3, [r7, #23]
      break;
 8005210:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800521a:	7dfb      	ldrb	r3, [r7, #23]
}
 800521c:	4618      	mov	r0, r3
 800521e:	3718      	adds	r7, #24
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800522e:	2300      	movs	r3, #0
 8005230:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005238:	2b01      	cmp	r3, #1
 800523a:	d101      	bne.n	8005240 <HAL_TIM_ConfigClockSource+0x1c>
 800523c:	2302      	movs	r3, #2
 800523e:	e0b4      	b.n	80053aa <HAL_TIM_ConfigClockSource+0x186>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2202      	movs	r2, #2
 800524c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800525e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005266:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005278:	d03e      	beq.n	80052f8 <HAL_TIM_ConfigClockSource+0xd4>
 800527a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800527e:	f200 8087 	bhi.w	8005390 <HAL_TIM_ConfigClockSource+0x16c>
 8005282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005286:	f000 8086 	beq.w	8005396 <HAL_TIM_ConfigClockSource+0x172>
 800528a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800528e:	d87f      	bhi.n	8005390 <HAL_TIM_ConfigClockSource+0x16c>
 8005290:	2b70      	cmp	r3, #112	; 0x70
 8005292:	d01a      	beq.n	80052ca <HAL_TIM_ConfigClockSource+0xa6>
 8005294:	2b70      	cmp	r3, #112	; 0x70
 8005296:	d87b      	bhi.n	8005390 <HAL_TIM_ConfigClockSource+0x16c>
 8005298:	2b60      	cmp	r3, #96	; 0x60
 800529a:	d050      	beq.n	800533e <HAL_TIM_ConfigClockSource+0x11a>
 800529c:	2b60      	cmp	r3, #96	; 0x60
 800529e:	d877      	bhi.n	8005390 <HAL_TIM_ConfigClockSource+0x16c>
 80052a0:	2b50      	cmp	r3, #80	; 0x50
 80052a2:	d03c      	beq.n	800531e <HAL_TIM_ConfigClockSource+0xfa>
 80052a4:	2b50      	cmp	r3, #80	; 0x50
 80052a6:	d873      	bhi.n	8005390 <HAL_TIM_ConfigClockSource+0x16c>
 80052a8:	2b40      	cmp	r3, #64	; 0x40
 80052aa:	d058      	beq.n	800535e <HAL_TIM_ConfigClockSource+0x13a>
 80052ac:	2b40      	cmp	r3, #64	; 0x40
 80052ae:	d86f      	bhi.n	8005390 <HAL_TIM_ConfigClockSource+0x16c>
 80052b0:	2b30      	cmp	r3, #48	; 0x30
 80052b2:	d064      	beq.n	800537e <HAL_TIM_ConfigClockSource+0x15a>
 80052b4:	2b30      	cmp	r3, #48	; 0x30
 80052b6:	d86b      	bhi.n	8005390 <HAL_TIM_ConfigClockSource+0x16c>
 80052b8:	2b20      	cmp	r3, #32
 80052ba:	d060      	beq.n	800537e <HAL_TIM_ConfigClockSource+0x15a>
 80052bc:	2b20      	cmp	r3, #32
 80052be:	d867      	bhi.n	8005390 <HAL_TIM_ConfigClockSource+0x16c>
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d05c      	beq.n	800537e <HAL_TIM_ConfigClockSource+0x15a>
 80052c4:	2b10      	cmp	r3, #16
 80052c6:	d05a      	beq.n	800537e <HAL_TIM_ConfigClockSource+0x15a>
 80052c8:	e062      	b.n	8005390 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6818      	ldr	r0, [r3, #0]
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	6899      	ldr	r1, [r3, #8]
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	685a      	ldr	r2, [r3, #4]
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	f000 fbd5 	bl	8005a88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68ba      	ldr	r2, [r7, #8]
 80052f4:	609a      	str	r2, [r3, #8]
      break;
 80052f6:	e04f      	b.n	8005398 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6818      	ldr	r0, [r3, #0]
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	6899      	ldr	r1, [r3, #8]
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	685a      	ldr	r2, [r3, #4]
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	f000 fbbe 	bl	8005a88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	689a      	ldr	r2, [r3, #8]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800531a:	609a      	str	r2, [r3, #8]
      break;
 800531c:	e03c      	b.n	8005398 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6818      	ldr	r0, [r3, #0]
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	6859      	ldr	r1, [r3, #4]
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	461a      	mov	r2, r3
 800532c:	f000 fb32 	bl	8005994 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2150      	movs	r1, #80	; 0x50
 8005336:	4618      	mov	r0, r3
 8005338:	f000 fb8b 	bl	8005a52 <TIM_ITRx_SetConfig>
      break;
 800533c:	e02c      	b.n	8005398 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6818      	ldr	r0, [r3, #0]
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	6859      	ldr	r1, [r3, #4]
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	461a      	mov	r2, r3
 800534c:	f000 fb51 	bl	80059f2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2160      	movs	r1, #96	; 0x60
 8005356:	4618      	mov	r0, r3
 8005358:	f000 fb7b 	bl	8005a52 <TIM_ITRx_SetConfig>
      break;
 800535c:	e01c      	b.n	8005398 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6818      	ldr	r0, [r3, #0]
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	6859      	ldr	r1, [r3, #4]
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	461a      	mov	r2, r3
 800536c:	f000 fb12 	bl	8005994 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2140      	movs	r1, #64	; 0x40
 8005376:	4618      	mov	r0, r3
 8005378:	f000 fb6b 	bl	8005a52 <TIM_ITRx_SetConfig>
      break;
 800537c:	e00c      	b.n	8005398 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4619      	mov	r1, r3
 8005388:	4610      	mov	r0, r2
 800538a:	f000 fb62 	bl	8005a52 <TIM_ITRx_SetConfig>
      break;
 800538e:	e003      	b.n	8005398 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	73fb      	strb	r3, [r7, #15]
      break;
 8005394:	e000      	b.n	8005398 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005396:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80053a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}

080053b2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80053b2:	b480      	push	{r7}
 80053b4:	b083      	sub	sp, #12
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80053ba:	bf00      	nop
 80053bc:	370c      	adds	r7, #12
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr

080053c6 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80053c6:	b480      	push	{r7}
 80053c8:	b083      	sub	sp, #12
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80053ce:	bf00      	nop
 80053d0:	370c      	adds	r7, #12
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr

080053da <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80053da:	b580      	push	{r7, lr}
 80053dc:	b084      	sub	sp, #16
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d107      	bne.n	8005402 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2201      	movs	r2, #1
 80053f6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005400:	e02a      	b.n	8005458 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	429a      	cmp	r2, r3
 800540a:	d107      	bne.n	800541c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2202      	movs	r2, #2
 8005410:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800541a:	e01d      	b.n	8005458 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	429a      	cmp	r2, r3
 8005424:	d107      	bne.n	8005436 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2204      	movs	r2, #4
 800542a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005434:	e010      	b.n	8005458 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	429a      	cmp	r2, r3
 800543e:	d107      	bne.n	8005450 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2208      	movs	r2, #8
 8005444:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2201      	movs	r2, #1
 800544a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800544e:	e003      	b.n	8005458 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	f7ff ffb4 	bl	80053c6 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	771a      	strb	r2, [r3, #28]
}
 8005464:	bf00      	nop
 8005466:	3710      	adds	r7, #16
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005478:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	429a      	cmp	r2, r3
 8005482:	d10b      	bne.n	800549c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2201      	movs	r2, #1
 8005488:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	69db      	ldr	r3, [r3, #28]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d136      	bne.n	8005500 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800549a:	e031      	b.n	8005500 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d10b      	bne.n	80054be <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2202      	movs	r2, #2
 80054aa:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	69db      	ldr	r3, [r3, #28]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d125      	bne.n	8005500 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054bc:	e020      	b.n	8005500 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d10b      	bne.n	80054e0 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2204      	movs	r2, #4
 80054cc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	69db      	ldr	r3, [r3, #28]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d114      	bne.n	8005500 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2201      	movs	r2, #1
 80054da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054de:	e00f      	b.n	8005500 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d10a      	bne.n	8005500 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2208      	movs	r2, #8
 80054ee:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	69db      	ldr	r3, [r3, #28]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d103      	bne.n	8005500 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005500:	68f8      	ldr	r0, [r7, #12]
 8005502:	f7fb feb9 	bl	8001278 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2200      	movs	r2, #0
 800550a:	771a      	strb	r2, [r3, #28]
}
 800550c:	bf00      	nop
 800550e:	3710      	adds	r7, #16
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005520:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	429a      	cmp	r2, r3
 800552a:	d103      	bne.n	8005534 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2201      	movs	r2, #1
 8005530:	771a      	strb	r2, [r3, #28]
 8005532:	e019      	b.n	8005568 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	429a      	cmp	r2, r3
 800553c:	d103      	bne.n	8005546 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2202      	movs	r2, #2
 8005542:	771a      	strb	r2, [r3, #28]
 8005544:	e010      	b.n	8005568 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	429a      	cmp	r2, r3
 800554e:	d103      	bne.n	8005558 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2204      	movs	r2, #4
 8005554:	771a      	strb	r2, [r3, #28]
 8005556:	e007      	b.n	8005568 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	429a      	cmp	r2, r3
 8005560:	d102      	bne.n	8005568 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2208      	movs	r2, #8
 8005566:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	f7ff ff22 	bl	80053b2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	771a      	strb	r2, [r3, #28]
}
 8005574:	bf00      	nop
 8005576:	3710      	adds	r7, #16
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800557c:	b480      	push	{r7}
 800557e:	b085      	sub	sp, #20
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a34      	ldr	r2, [pc, #208]	; (8005660 <TIM_Base_SetConfig+0xe4>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d00f      	beq.n	80055b4 <TIM_Base_SetConfig+0x38>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800559a:	d00b      	beq.n	80055b4 <TIM_Base_SetConfig+0x38>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a31      	ldr	r2, [pc, #196]	; (8005664 <TIM_Base_SetConfig+0xe8>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d007      	beq.n	80055b4 <TIM_Base_SetConfig+0x38>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4a30      	ldr	r2, [pc, #192]	; (8005668 <TIM_Base_SetConfig+0xec>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d003      	beq.n	80055b4 <TIM_Base_SetConfig+0x38>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4a2f      	ldr	r2, [pc, #188]	; (800566c <TIM_Base_SetConfig+0xf0>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d108      	bne.n	80055c6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	68fa      	ldr	r2, [r7, #12]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a25      	ldr	r2, [pc, #148]	; (8005660 <TIM_Base_SetConfig+0xe4>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d01b      	beq.n	8005606 <TIM_Base_SetConfig+0x8a>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055d4:	d017      	beq.n	8005606 <TIM_Base_SetConfig+0x8a>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a22      	ldr	r2, [pc, #136]	; (8005664 <TIM_Base_SetConfig+0xe8>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d013      	beq.n	8005606 <TIM_Base_SetConfig+0x8a>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a21      	ldr	r2, [pc, #132]	; (8005668 <TIM_Base_SetConfig+0xec>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d00f      	beq.n	8005606 <TIM_Base_SetConfig+0x8a>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a20      	ldr	r2, [pc, #128]	; (800566c <TIM_Base_SetConfig+0xf0>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d00b      	beq.n	8005606 <TIM_Base_SetConfig+0x8a>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a1f      	ldr	r2, [pc, #124]	; (8005670 <TIM_Base_SetConfig+0xf4>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d007      	beq.n	8005606 <TIM_Base_SetConfig+0x8a>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a1e      	ldr	r2, [pc, #120]	; (8005674 <TIM_Base_SetConfig+0xf8>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d003      	beq.n	8005606 <TIM_Base_SetConfig+0x8a>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a1d      	ldr	r2, [pc, #116]	; (8005678 <TIM_Base_SetConfig+0xfc>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d108      	bne.n	8005618 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800560c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	4313      	orrs	r3, r2
 8005616:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	695b      	ldr	r3, [r3, #20]
 8005622:	4313      	orrs	r3, r2
 8005624:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	689a      	ldr	r2, [r3, #8]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a08      	ldr	r2, [pc, #32]	; (8005660 <TIM_Base_SetConfig+0xe4>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d103      	bne.n	800564c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	691a      	ldr	r2, [r3, #16]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	615a      	str	r2, [r3, #20]
}
 8005652:	bf00      	nop
 8005654:	3714      	adds	r7, #20
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	40010000 	.word	0x40010000
 8005664:	40000400 	.word	0x40000400
 8005668:	40000800 	.word	0x40000800
 800566c:	40000c00 	.word	0x40000c00
 8005670:	40014000 	.word	0x40014000
 8005674:	40014400 	.word	0x40014400
 8005678:	40014800 	.word	0x40014800

0800567c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800567c:	b480      	push	{r7}
 800567e:	b087      	sub	sp, #28
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a1b      	ldr	r3, [r3, #32]
 800568a:	f023 0201 	bic.w	r2, r3, #1
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a1b      	ldr	r3, [r3, #32]
 8005696:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f023 0303 	bic.w	r3, r3, #3
 80056b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	f023 0302 	bic.w	r3, r3, #2
 80056c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a1c      	ldr	r2, [pc, #112]	; (8005744 <TIM_OC1_SetConfig+0xc8>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d10c      	bne.n	80056f2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	f023 0308 	bic.w	r3, r3, #8
 80056de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	697a      	ldr	r2, [r7, #20]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	f023 0304 	bic.w	r3, r3, #4
 80056f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a13      	ldr	r2, [pc, #76]	; (8005744 <TIM_OC1_SetConfig+0xc8>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d111      	bne.n	800571e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005700:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005708:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	695b      	ldr	r3, [r3, #20]
 800570e:	693a      	ldr	r2, [r7, #16]
 8005710:	4313      	orrs	r3, r2
 8005712:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	699b      	ldr	r3, [r3, #24]
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	4313      	orrs	r3, r2
 800571c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	685a      	ldr	r2, [r3, #4]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	697a      	ldr	r2, [r7, #20]
 8005736:	621a      	str	r2, [r3, #32]
}
 8005738:	bf00      	nop
 800573a:	371c      	adds	r7, #28
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr
 8005744:	40010000 	.word	0x40010000

08005748 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005748:	b480      	push	{r7}
 800574a:	b087      	sub	sp, #28
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a1b      	ldr	r3, [r3, #32]
 8005756:	f023 0210 	bic.w	r2, r3, #16
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a1b      	ldr	r3, [r3, #32]
 8005762:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	699b      	ldr	r3, [r3, #24]
 800576e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800577e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	021b      	lsls	r3, r3, #8
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	4313      	orrs	r3, r2
 800578a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	f023 0320 	bic.w	r3, r3, #32
 8005792:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	011b      	lsls	r3, r3, #4
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	4313      	orrs	r3, r2
 800579e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a1e      	ldr	r2, [pc, #120]	; (800581c <TIM_OC2_SetConfig+0xd4>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d10d      	bne.n	80057c4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	011b      	lsls	r3, r3, #4
 80057b6:	697a      	ldr	r2, [r7, #20]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a15      	ldr	r2, [pc, #84]	; (800581c <TIM_OC2_SetConfig+0xd4>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d113      	bne.n	80057f4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	695b      	ldr	r3, [r3, #20]
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	699b      	ldr	r3, [r3, #24]
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	693a      	ldr	r2, [r7, #16]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	693a      	ldr	r2, [r7, #16]
 80057f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	685a      	ldr	r2, [r3, #4]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	697a      	ldr	r2, [r7, #20]
 800580c:	621a      	str	r2, [r3, #32]
}
 800580e:	bf00      	nop
 8005810:	371c      	adds	r7, #28
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop
 800581c:	40010000 	.word	0x40010000

08005820 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005820:	b480      	push	{r7}
 8005822:	b087      	sub	sp, #28
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a1b      	ldr	r3, [r3, #32]
 800582e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a1b      	ldr	r3, [r3, #32]
 800583a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	69db      	ldr	r3, [r3, #28]
 8005846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800584e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f023 0303 	bic.w	r3, r3, #3
 8005856:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	4313      	orrs	r3, r2
 8005860:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005868:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	021b      	lsls	r3, r3, #8
 8005870:	697a      	ldr	r2, [r7, #20]
 8005872:	4313      	orrs	r3, r2
 8005874:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a1d      	ldr	r2, [pc, #116]	; (80058f0 <TIM_OC3_SetConfig+0xd0>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d10d      	bne.n	800589a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005884:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	021b      	lsls	r3, r3, #8
 800588c:	697a      	ldr	r2, [r7, #20]
 800588e:	4313      	orrs	r3, r2
 8005890:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005898:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a14      	ldr	r2, [pc, #80]	; (80058f0 <TIM_OC3_SetConfig+0xd0>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d113      	bne.n	80058ca <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	695b      	ldr	r3, [r3, #20]
 80058b6:	011b      	lsls	r3, r3, #4
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	011b      	lsls	r3, r3, #4
 80058c4:	693a      	ldr	r2, [r7, #16]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	693a      	ldr	r2, [r7, #16]
 80058ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	685a      	ldr	r2, [r3, #4]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	697a      	ldr	r2, [r7, #20]
 80058e2:	621a      	str	r2, [r3, #32]
}
 80058e4:	bf00      	nop
 80058e6:	371c      	adds	r7, #28
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr
 80058f0:	40010000 	.word	0x40010000

080058f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b087      	sub	sp, #28
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a1b      	ldr	r3, [r3, #32]
 8005902:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a1b      	ldr	r3, [r3, #32]
 800590e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	69db      	ldr	r3, [r3, #28]
 800591a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005922:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800592a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	021b      	lsls	r3, r3, #8
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	4313      	orrs	r3, r2
 8005936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800593e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	031b      	lsls	r3, r3, #12
 8005946:	693a      	ldr	r2, [r7, #16]
 8005948:	4313      	orrs	r3, r2
 800594a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a10      	ldr	r2, [pc, #64]	; (8005990 <TIM_OC4_SetConfig+0x9c>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d109      	bne.n	8005968 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800595a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	695b      	ldr	r3, [r3, #20]
 8005960:	019b      	lsls	r3, r3, #6
 8005962:	697a      	ldr	r2, [r7, #20]
 8005964:	4313      	orrs	r3, r2
 8005966:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	697a      	ldr	r2, [r7, #20]
 800596c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	685a      	ldr	r2, [r3, #4]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	693a      	ldr	r2, [r7, #16]
 8005980:	621a      	str	r2, [r3, #32]
}
 8005982:	bf00      	nop
 8005984:	371c      	adds	r7, #28
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	40010000 	.word	0x40010000

08005994 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005994:	b480      	push	{r7}
 8005996:	b087      	sub	sp, #28
 8005998:	af00      	add	r7, sp, #0
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6a1b      	ldr	r3, [r3, #32]
 80059a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6a1b      	ldr	r3, [r3, #32]
 80059aa:	f023 0201 	bic.w	r2, r3, #1
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	699b      	ldr	r3, [r3, #24]
 80059b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	011b      	lsls	r3, r3, #4
 80059c4:	693a      	ldr	r2, [r7, #16]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	f023 030a 	bic.w	r3, r3, #10
 80059d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059d2:	697a      	ldr	r2, [r7, #20]
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	693a      	ldr	r2, [r7, #16]
 80059de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	697a      	ldr	r2, [r7, #20]
 80059e4:	621a      	str	r2, [r3, #32]
}
 80059e6:	bf00      	nop
 80059e8:	371c      	adds	r7, #28
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr

080059f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059f2:	b480      	push	{r7}
 80059f4:	b087      	sub	sp, #28
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	60f8      	str	r0, [r7, #12]
 80059fa:	60b9      	str	r1, [r7, #8]
 80059fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6a1b      	ldr	r3, [r3, #32]
 8005a02:	f023 0210 	bic.w	r2, r3, #16
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6a1b      	ldr	r3, [r3, #32]
 8005a14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	031b      	lsls	r3, r3, #12
 8005a22:	697a      	ldr	r2, [r7, #20]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a2e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	011b      	lsls	r3, r3, #4
 8005a34:	693a      	ldr	r2, [r7, #16]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	697a      	ldr	r2, [r7, #20]
 8005a3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	693a      	ldr	r2, [r7, #16]
 8005a44:	621a      	str	r2, [r3, #32]
}
 8005a46:	bf00      	nop
 8005a48:	371c      	adds	r7, #28
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr

08005a52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a52:	b480      	push	{r7}
 8005a54:	b085      	sub	sp, #20
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
 8005a5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a6a:	683a      	ldr	r2, [r7, #0]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	f043 0307 	orr.w	r3, r3, #7
 8005a74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	609a      	str	r2, [r3, #8]
}
 8005a7c:	bf00      	nop
 8005a7e:	3714      	adds	r7, #20
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b087      	sub	sp, #28
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	607a      	str	r2, [r7, #4]
 8005a94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005aa2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	021a      	lsls	r2, r3, #8
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	431a      	orrs	r2, r3
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	697a      	ldr	r2, [r7, #20]
 8005aba:	609a      	str	r2, [r3, #8]
}
 8005abc:	bf00      	nop
 8005abe:	371c      	adds	r7, #28
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b087      	sub	sp, #28
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	f003 031f 	and.w	r3, r3, #31
 8005ada:	2201      	movs	r2, #1
 8005adc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6a1a      	ldr	r2, [r3, #32]
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	43db      	mvns	r3, r3
 8005aea:	401a      	ands	r2, r3
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6a1a      	ldr	r2, [r3, #32]
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	f003 031f 	and.w	r3, r3, #31
 8005afa:	6879      	ldr	r1, [r7, #4]
 8005afc:	fa01 f303 	lsl.w	r3, r1, r3
 8005b00:	431a      	orrs	r2, r3
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	621a      	str	r2, [r3, #32]
}
 8005b06:	bf00      	nop
 8005b08:	371c      	adds	r7, #28
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
	...

08005b14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b085      	sub	sp, #20
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d101      	bne.n	8005b2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b28:	2302      	movs	r3, #2
 8005b2a:	e050      	b.n	8005bce <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2202      	movs	r2, #2
 8005b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a1c      	ldr	r2, [pc, #112]	; (8005bdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d018      	beq.n	8005ba2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b78:	d013      	beq.n	8005ba2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a18      	ldr	r2, [pc, #96]	; (8005be0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d00e      	beq.n	8005ba2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a16      	ldr	r2, [pc, #88]	; (8005be4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d009      	beq.n	8005ba2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a15      	ldr	r2, [pc, #84]	; (8005be8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d004      	beq.n	8005ba2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a13      	ldr	r2, [pc, #76]	; (8005bec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d10c      	bne.n	8005bbc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ba8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	68ba      	ldr	r2, [r7, #8]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68ba      	ldr	r2, [r7, #8]
 8005bba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3714      	adds	r7, #20
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop
 8005bdc:	40010000 	.word	0x40010000
 8005be0:	40000400 	.word	0x40000400
 8005be4:	40000800 	.word	0x40000800
 8005be8:	40000c00 	.word	0x40000c00
 8005bec:	40014000 	.word	0x40014000

08005bf0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b085      	sub	sp, #20
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d101      	bne.n	8005c0c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005c08:	2302      	movs	r3, #2
 8005c0a:	e03d      	b.n	8005c88 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	695b      	ldr	r3, [r3, #20]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	69db      	ldr	r3, [r3, #28]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c86:	2300      	movs	r3, #0
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3714      	adds	r7, #20
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <__libc_init_array>:
 8005c94:	b570      	push	{r4, r5, r6, lr}
 8005c96:	4d0d      	ldr	r5, [pc, #52]	; (8005ccc <__libc_init_array+0x38>)
 8005c98:	4c0d      	ldr	r4, [pc, #52]	; (8005cd0 <__libc_init_array+0x3c>)
 8005c9a:	1b64      	subs	r4, r4, r5
 8005c9c:	10a4      	asrs	r4, r4, #2
 8005c9e:	2600      	movs	r6, #0
 8005ca0:	42a6      	cmp	r6, r4
 8005ca2:	d109      	bne.n	8005cb8 <__libc_init_array+0x24>
 8005ca4:	4d0b      	ldr	r5, [pc, #44]	; (8005cd4 <__libc_init_array+0x40>)
 8005ca6:	4c0c      	ldr	r4, [pc, #48]	; (8005cd8 <__libc_init_array+0x44>)
 8005ca8:	f000 f820 	bl	8005cec <_init>
 8005cac:	1b64      	subs	r4, r4, r5
 8005cae:	10a4      	asrs	r4, r4, #2
 8005cb0:	2600      	movs	r6, #0
 8005cb2:	42a6      	cmp	r6, r4
 8005cb4:	d105      	bne.n	8005cc2 <__libc_init_array+0x2e>
 8005cb6:	bd70      	pop	{r4, r5, r6, pc}
 8005cb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cbc:	4798      	blx	r3
 8005cbe:	3601      	adds	r6, #1
 8005cc0:	e7ee      	b.n	8005ca0 <__libc_init_array+0xc>
 8005cc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cc6:	4798      	blx	r3
 8005cc8:	3601      	adds	r6, #1
 8005cca:	e7f2      	b.n	8005cb2 <__libc_init_array+0x1e>
 8005ccc:	08005d3c 	.word	0x08005d3c
 8005cd0:	08005d3c 	.word	0x08005d3c
 8005cd4:	08005d3c 	.word	0x08005d3c
 8005cd8:	08005d40 	.word	0x08005d40

08005cdc <memset>:
 8005cdc:	4402      	add	r2, r0
 8005cde:	4603      	mov	r3, r0
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d100      	bne.n	8005ce6 <memset+0xa>
 8005ce4:	4770      	bx	lr
 8005ce6:	f803 1b01 	strb.w	r1, [r3], #1
 8005cea:	e7f9      	b.n	8005ce0 <memset+0x4>

08005cec <_init>:
 8005cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cee:	bf00      	nop
 8005cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cf2:	bc08      	pop	{r3}
 8005cf4:	469e      	mov	lr, r3
 8005cf6:	4770      	bx	lr

08005cf8 <_fini>:
 8005cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cfa:	bf00      	nop
 8005cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cfe:	bc08      	pop	{r3}
 8005d00:	469e      	mov	lr, r3
 8005d02:	4770      	bx	lr
